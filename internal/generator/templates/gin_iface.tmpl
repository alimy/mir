// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir {{ .VerInfo.MirVer }}

package {{ .PkgName }}

import (
    "net/http"

    "github.com/alimy/mir/v4"
    {{if notEmptyStr .EngineInfo.PkgName }}gin "{{ .EngineInfo.PkgName }}{{else}}"github.com/gin-gonic/gin{{end}}"
	{{ declareImports .Imports }}
)
{{- if .DeclareCoreInterface }}
type _binding_ interface {
	Bind(*gin.Context) mir.Error
}

type _render_ interface {
	Render(*gin.Context)
}

type _default_ interface {
	Bind(*gin.Context, any) mir.Error
	Render(*gin.Context, any, mir.Error)
}
{{- end }}

{{ declareTypes .InOuts .PkgPath .Imports }}

{{if notEmptyStr .Comment }}// {{.Comment}}{{end}}
type {{.TypeName}} interface {
	_default_

{{if notEmptyStr .Chain }}// Chain provide handlers chain for gin
    {{.Chain}}() gin.HandlersChain
{{end}}
{{range .Fields}}    {{.MethodName}}({{if notEmptyStr .InName }}*{{ .InName }}{{end}}) {{if notEmptyStr .OutName }}(*{{ .OutName}}, mir.Error){{else}}mir.Error{{end}}
{{end}}

    mustEmbedUnimplemented{{.TypeName}}Servant()
}
{{if .IsUseFieldChain }}
type {{.TypeName}}Chain interface {
{{range .ChainFields }}    Chain{{.MethodName}}() gin.HandlersChain
{{end}}

	mustEmbedUnimplemented{{.TypeName}}Chain()
}
{{end}}

// Register{{.TypeName}}Servant register {{.TypeName}} servant to gin
func Register{{.TypeName}}Servant(e *gin.Engine, s {{.TypeName}}{{if .IsUseFieldChain }},  m ...{{.TypeName}}Chain{{end}}) {
{{- if .IsUseFieldChain -}}
	var cc {{.TypeName}}Chain
	if len(m) > 0 {
		cc = m[0]
	} else {
		cc = &Unimplemented{{.TypeName}}Chain{}
	}
{{- end}}
{{if notEmptyStr .Group }}    router := e.Group("{{.Group}}"){{else}}    router := e{{end}}
{{if notEmptyStr .Chain }}    // use chain for router
    middlewares := s.{{.Chain}}()
    router.Use(middlewares...)
{{end}}
    // register routes info to router
{{range .Fields}}{{if .NotHttpAny }}    router.Handle("{{.HttpMethod}}", "{{.Path}}", {{if .IsFieldChain }}append(cc.Chain{{.MethodName}}(), {{end}}func(c *gin.Context) {
	{{- if $.WatchCtxDone }}
		select {
		case <- c.Request.Context().Done():
			return
		default:
		}
	{{end -}}
	{{if notEmptyStr .InName -}}
	req := new({{.InName}})
	{{if .IsBindIn -}}
	var bv _binding_ = req
	if err := bv.Bind(c); err != nil {
	{{- else -}}
	if err := s.Bind(c, req); err != nil {
	{{- end }}
		s.Render(c, nil, err)
		return
	}
	{{- end }}
	{{if notEmptyStr .OutName -}}
	resp, err := s.{{ .MethodName}}({{if notEmptyStr .InName}}req{{end}})
	{{if .IsRenderOut -}}
	if err != nil {
		s.Render(c, nil, err)
		return
	}
	var rv _render_ = resp
	rv.Render(c)
	{{- else -}}
	s.Render(c, resp, err)
	{{- end }}
	{{- else -}}
	s.Render(c, nil, s.{{.MethodName}}({{if notEmptyStr .InName}}req{{end}}))
	{{- end }}
	}{{if .IsFieldChain }})...{{end}})
	{{else if .JustHttpAny}}    router.Any("{{.Path}}", {{if .IsFieldChain }}append(cc.Chain{{.MethodName}}(), {{end}}func(c *gin.Context) {
	{{- if $.WatchCtxDone }}
		select {
		case <- c.Request.Context().Done():
			return
		default:
		}
	{{end -}}
	{{if notEmptyStr .InName -}}
	req := new({{.InName}})
	{{if .IsBindIn -}}
	var bv _binding_ = req
	if err := bv.Bind(c); err != nil {
	{{- else -}}
	if err := s.Bind(c, req); err != nil {
	{{- end }}
		s.Render(c, nil, err)
		return
	}
	{{- end }}
	{{if notEmptyStr .OutName -}}
	resp, err := s.{{ .MethodName}}({{if notEmptyStr .InName}}req{{end}})
	{{if .IsRenderOut -}}
	if err != nil {
		s.Render(c, nil, err)
		return
	}
	var rv _render_ = resp
	rv.Render(c)
	{{- else -}}
	s.Render(c, resp, err)
	{{- end }}
	{{- else -}}
	s.Render(c, nil, s.{{.MethodName}}({{if notEmptyStr .InName}}req{{end}}))
	{{- end }}
	}{{if .IsFieldChain }})...{{end}})
	{{else}}{{$field := .}}    {
        	h := {{if .IsFieldChain }}append(cc.Chain{{.MethodName}}(), {{end}}func(c *gin.Context) {
			{{- if $.WatchCtxDone }}
				select {
				case <- c.Request.Context().Done():
					return
				default:
				}
			{{end -}}
	{{if notEmptyStr .InName -}}
	req := new({{.InName}})
	{{if .IsBindIn -}}
	var bv _binding_ = req
	if err := bv.Bind(c); err != nil {
	{{- else -}}
	if err := s.Bind(c, req); err != nil {
	{{- end }}
		s.Render(c, nil, err)
		return
	}
	{{- end }}
	{{if notEmptyStr .OutName -}}
	resp, err := s.{{ .MethodName}}({{if notEmptyStr .InName}}req{{end}})
	{{if .IsRenderOut -}}
	if err != nil {
		s.Render(c, nil, err)
		return
	}
	var rv _render_ = resp
	rv.Render(c)
	{{- else -}}
	s.Render(c, resp, err)
	{{- end }}
	{{- else -}}
	s.Render(c, nil, s.{{.MethodName}}({{if notEmptyStr .InName}}req{{end}}))
	{{- end }}
	}{{if .IsFieldChain }}){{end}}
	{{range .AnyHttpMethods}}        router.Handle("{{.}}", "{{$field.Path}}", h{{if $field.IsFieldChain }}...{{end}})
	{{end}}    }
	{{end}}
{{- end -}}
}

{{ $unimplementedServant := print "Unimplemented" .TypeName "Servant" }}
// {{$unimplementedServant}} can be embedded to have forward compatible implementations.
type {{$unimplementedServant}} struct {}

{{if notEmptyStr .Chain }}
func ({{$unimplementedServant}}){{.Chain}}() gin.HandlersChain {
    return nil
}

{{end}}
{{range .Fields}}
func ({{$unimplementedServant}}){{.MethodName}}({{if notEmptyStr .InName }}req *{{ .InName }}{{end}}) {{if notEmptyStr .OutName }}(*{{ .OutName}}, mir.Error){{else}}mir.Error{{end}} {
	return {{if notEmptyStr .OutName }}nil, {{end}}mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

{{end}}
func ({{$unimplementedServant}})mustEmbedUnimplemented{{.TypeName}}Servant() {}
{{ if .IsUseFieldChain }}
{{ $unimplementedChain := print "Unimplemented" .TypeName "Chain" }}
// {{$unimplementedChain}} can be embedded to have forward compatible implementations.
type {{$unimplementedChain}} struct {}

{{range .Fields}}{{if .IsFieldChain }}func (b *{{$unimplementedChain}}) Chain{{.MethodName}}() gin.HandlersChain {
	return nil
}
{{end}}
{{end}}
func (b *{{$unimplementedChain}})mustEmbedUnimplemented{{.TypeName}}Chain() {}
{{ end }}
