// Code generated by go-mir. DO NOT EDIT.

package {{ .PkgName }}

import (
    "net/http"

    "github.com/alimy/mir/v2"

    mux "{{if notEmptyStr .EngineInfo.PkgName }}{{ .EngineInfo.PkgName }}{{else}}github.com/gorilla/mux{{end}}"
)

// just use for mir.Any method to register
var httpMethods = mir.HttpMethods

{{if notEmptyStr .Comment }}// {{.Comment}}{{end}}
type {{.TypeName}} interface {
{{if notEmptyStr .Chain }}   // Chain provide middlewares for mux
    {{.Chain}}() []mux.MiddlewareFunc
{{end}}
{{range .Fields}}{{if notEmptyStr .Comment }}   // {{.Comment}}
    {{.MethodName}}(http.ResponseWriter, *http.Request){{else}} {{.MethodName}}(http.ResponseWriter, *http.Request){{end}}
{{end}}

    mustEmbedUnimplemented{{.TypeName}}Servant()
}

// Register{{.TypeName}}Servant register {{.TypeName}} servant to mux
func Register{{.TypeName}}Servant(r *mux.Router, s {{.TypeName}}) {
{{if notEmptyStr .Group }}    router := r.PathPrefix("{{.Group}}").Subrouter(){{else}}    router := r
{{end}}
{{if notEmptyStr .Chain }}    // use chain for router
    middlewares := s.{{.Chain}}()
    router.Use(middlewares...)
{{end}}

    // register routes info to router
{{range .Fields}}{{if notHttpAny .HttpMethod }}    router.HandleFunc("{{.Path}}", s.{{.MethodName}}).
        Methods("{{.HttpMethod}}"){{if notEmptyStr .Host}}.
        Host("{{.Host}}"){{end}}{{if valideQuery .Queries}}.
        Queries({{inflateQuery .Queries}}){{end}}{{else}}    router.HandleFunc("{{.Path}}", s.{{.MethodName}}).
        Methods(httpMethods...){{if notEmptyStr .Host}}.
        Host("{{.Host}}"){{end}}{{if valideQuery .Queries}}.
        Queries({{inflateQuery .Queries}}){{end}}{{end}}
{{end}}}

{{ $unimplementedServant := print "Unimplemented" .TypeName "Servant" }}
// {{$unimplementedServant}} can be embedded to have forward compatible implementations.
type {{$unimplementedServant}} struct {
}

{{if notEmptyStr .Chain }}
func ({{$unimplementedServant}}){{.Chain}}() []mux.MiddlewareFunc {
    return nil
}

{{end}}
{{range .Fields}}
func ({{$unimplementedServant}}){{.MethodName}}(rw http.ResponseWriter, r *http.Request) {
    rw.WriteHeader(http.StatusNotImplemented)
    rw.Write([]byte("method {{.MethodName}} not implemented"))
}

{{end}}
func ({{$unimplementedServant}})mustEmbedUnimplemented{{.TypeName}}Servant() {}
