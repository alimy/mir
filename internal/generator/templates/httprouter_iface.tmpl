// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir {{ .VerInfo.MirVer }}

package {{ .PkgName }}

import (
    "net/http"

    "github.com/alimy/mir/v5"
    {{if notEmptyStr .EngineInfo.PkgName }}httprouter "{{ .EngineInfo.PkgName }}{{else}}"github.com/julienschmidt/httprouter{{end}}"
	{{ declareImports .Imports }}
)
{{- if .DeclareCoreInterface }}
type _binding_ interface {
	Bind(*http.Request, httprouter.Params) mir.Error
}

type _render_ interface {
	Render(http.ResponseWriter)
}

type _default_ interface {
	Bind(*http.Request, httprouter.Params, any) mir.Error
	Render(http.ResponseWriter, any, mir.Error)
}
{{- end }}

{{ declareTypes .InOuts .PkgPath .Imports }}

{{if notEmptyStr .Comment }}// {{.Comment}}{{end}}
type {{.TypeName}} interface {
	_default_

{{range .Fields}}    {{if .JustUseContext }}{{ .MethodName}}(http.ResponseWriter, *http.Request, httprouter.Params){{else}}{{.MethodName}}({{if .IsUseContext }}http.ResponseWriter, *http.Request, httprouter.Params{{if notEmptyStr .InName }}, {{end}}{{end}}{{if notEmptyStr .InName }}*{{ .InName }}{{end}}) {{if notEmptyStr .OutName }}(*{{ .OutName}}, mir.Error){{else}}mir.Error{{end}}{{end}}
{{end}}

    mustEmbedUnimplemented{{.TypeName}}Servant()
}

// Register{{.TypeName}}Servant register {{.TypeName}} servant to httprouter
func Register{{.TypeName}}Servant(router *httprouter.Router, s {{.TypeName}}) {
{{range .Fields}}{{if .NotHttpAny }}    router.Handle("{{.HttpMethod}}", "{{joinPath $.Group .Path}}", {{if .JustUseContext}}s.{{ .MethodName}}{{else}}func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
	{{- if $.WatchCtxDone }}
		select {
		case <-hr.Context().Done():
			return
		default:
		}
	{{end -}}
	{{if notEmptyStr .InName -}}
	req := new({{.InName}})
	{{if .IsBindIn -}}
	var bv _binding_ = req
	if err := bv.Bind(hr, p); err != nil {
	{{- else -}}
	if err := s.Bind(hr, p, req); err != nil {
	{{- end }}
		s.Render(rw, nil, err)
		return
	}
	{{- end }}
	{{if notEmptyStr .OutName -}}
	resp, err := s.{{ .MethodName}}({{if .IsUseContext }}rw, hr, p{{if notEmptyStr .InName }}, {{end}}{{end}}{{if notEmptyStr .InName}}req{{end}})
	{{if .IsRenderOut -}}
	if err != nil {
		s.Render(rw, nil, err)
		return
	}
	var rv _render_ = resp
	rv.Render(rw)
	{{- else -}}
	s.Render(rw, resp, err)
	{{- end }}
	{{- else -}}
	s.Render(rw, nil, s.{{.MethodName}}({{if .IsUseContext }}rw, hr, p{{if notEmptyStr .InName }}, {{end}}{{end}}{{if notEmptyStr .InName}}req{{end}}))
	{{- end }}
	}{{end}})
	{{else}}{{$field := .}}    {
        h := {{if .JustUseContext}}s.{{ .MethodName}}{{else}}func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
			{{- if $.WatchCtxDone }}
		select {
		case <-hr.Context().Done():
			return
		default:
		}
	{{end -}}
	{{if notEmptyStr .InName -}}
	req := new({{.InName}})
	{{if .IsBindIn -}}
	var bv _binding_ = req
	if err := bv.Bind(hr, p); err != nil {
	{{- else -}}
	if err := s.Bind(hr, p, req); err != nil {
	{{- end }}
		s.Render(rw, nil, err)
		return
	}
	{{- end }}
	{{if notEmptyStr .OutName -}}
	resp, err := s.{{ .MethodName}}({{if .IsUseContext }}rw, hr, p{{if notEmptyStr .InName }}, {{end}}{{end}}{{if notEmptyStr .InName}}req{{end}})
	{{if .IsRenderOut -}}
	if err != nil {
		s.Render(rw, nil, err)
		return
	}
	var rv _render_ = resp
	rv.Render(rw)
	{{- else -}}
	s.Render(rw, resp, err)
	{{- end }}
	{{- else -}}
	s.Render(rw, nil, s.{{.MethodName}}({{if .IsUseContext }}rw, hr, p{{if notEmptyStr .InName }}, {{end}}{{end}}{{if notEmptyStr .InName}}req{{end}}))
	{{- end }}
	    }{{end}}
		{{range .AnyHttpMethods}}        router.Handle("{{.}}", "{{joinPath $.Group $field.Path}}", h)
		{{end}}    }
	{{end}}
{{- end -}}
}

{{ $unimplementedServant := print "Unimplemented" .TypeName "Servant" }}
// {{$unimplementedServant}} can be embedded to have forward compatible implementations.
type {{$unimplementedServant}} struct {}

{{range .Fields}}
func ({{$unimplementedServant}}){{if .JustUseContext }}{{ .MethodName}}(rw http.ResponseWriter, hr *http.Request, p httprouter.Params){{else}}{{.MethodName}}({{if .IsUseContext }}rw http.ResponseWriter, hr *http.Request, p httprouter.Params{{if notEmptyStr .InName }}, {{end}}{{end}}{{if notEmptyStr .InName }}req *{{ .InName }}{{end}}) {{if notEmptyStr .OutName }}(*{{ .OutName}}, mir.Error){{else}}mir.Error{{end}}{{end}} {
	{{if .JustUseContext -}}
		rw.WriteHeader(http.StatusNotImplemented)
		rw.Write([]byte("method not implemented"))
	{{else -}}
	return {{if notEmptyStr .OutName }}nil, {{end}}mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
	{{end -}}
}

{{end}}
func ({{$unimplementedServant}})mustEmbedUnimplemented{{.TypeName}}Servant() {}
