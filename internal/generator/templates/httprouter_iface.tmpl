// Code generated by go-mir. DO NOT EDIT.

package {{ .PkgName }}

import (
    "net/http"

    httprouter "{{if notEmptyStr .EngineInfo.PkgName }}{{ .EngineInfo.PkgName }}{{else}}github.com/julienschmidt/httprouter{{end}}"
)

{{if notEmptyStr .Comment }}// {{.Comment}}{{end}}
type {{.TypeName}} interface {
{{range .Fields}}{{if notEmptyStr .Comment }}    // {{.Comment}}
    {{.MethodName}}(http.ResponseWriter, *http.Request, httprouter.Params)
    {{else}}    {{.MethodName}}(http.ResponseWriter, *http.Request, httprouter.Params){{end}}
{{end}}

    mustEmbedUnimplemented{{.TypeName}}Servant()
}

// Register{{.TypeName}}Servant register {{.TypeName}} servant to httprouter
func Register{{.TypeName}}Servant(r *httprouter.Router, s {{.TypeName}}) {
{{range .Fields}}{{if notHttpAny .HttpMethod }}    r.Handle("{{.HttpMethod}}", "{{joinPath $.Group .Path}}", s.{{.MethodName}}){{else}}    r.Handle(http.MethodGet, "{{joinPath $.Group .Path}}", s.{{.MethodName}})
    r.Handle(http.MethodPut, "{{joinPath $.Group .Path}}", s.{{.MethodName}})
    r.Handle(http.MethodPost, "{{joinPath $.Group .Path}}", s.{{.MethodName}})
    r.Handle(http.MethodDelete, "{{joinPath $.Group .Path}}", s.{{.MethodName}})
    r.Handle(http.MethodHead, "{{joinPath $.Group .Path}}", s.{{.MethodName}})
    r.Handle(http.MethodPatch, "{{joinPath $.Group .Path}}", s.{{.MethodName}})
    r.Handle(http.MethodOptions, "{{joinPath $.Group .Path}}", s.{{.MethodName}})
    r.Handle(http.MethodConnect, "{{joinPath $.Group .Path}}", s.{{.MethodName}})
    r.Handle(http.MethodTrace, "{{joinPath $.Group .Path}}", s.{{.MethodName}}){{end}}
{{end}}}

{{ $unimplementedServant := print "Unimplemented" .TypeName "Servant" }}
// {{$unimplementedServant}} can be embedded to have forward compatible implementations.
type {{$unimplementedServant}} struct {
}

{{range .Fields}}
func ({{$unimplementedServant}}){{.MethodName}}(rw http.ResponseWriter, r *http.Request, params httprouter.Params) {
    rw.WriteHeader(http.StatusNotImplemented)
    rw.Write([]byte("method {{.MethodName}} not implemented"))
}

{{end}}
func ({{$unimplementedServant}})mustEmbedUnimplemented{{.TypeName}}Servant() {}
