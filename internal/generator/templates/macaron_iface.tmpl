// Code generated by go-mir. DO NOT EDIT.

package {{ .PkgName }}

import (
    "net/http"

    macaron "{{if notEmptyStr .EngineInfo.PkgName }}{{ .EngineInfo.PkgName }}{{else}}gopkg.in/macaron.v1{{end}}"
)

{{if notEmptyStr .Comment }}// {{.Comment}}{{end}}
type {{.TypeName}} interface {
{{if notEmptyStr .Chain }}    // Chain provide handlers chain for macaron
    {{.Chain}}() []macaron.Handler
{{end}}
{{range .Fields}}{{if notEmptyStr .Comment }}    // {{.Comment}}
    {{.MethodName}}(*macaron.Context){{else}}    {{.MethodName}}(*macaron.Context){{end}}
{{end}}

    mustEmbedUnimplemented{{.TypeName}}Servant()
}

// Register{{.TypeName}}Servant register {{.TypeName}} servant to macaron
func Register{{.TypeName}}Servant(m *macaron.Macaron, s {{.TypeName}}) {
{{if notEmptyStr .Group }}{{if notEmptyStr .Chain }}    // use chain for router
    middlewares := s.{{.Chain}}()
    m.Group("{{.Group}}", func() {
{{range .Fields}}{{if notHttpAny .HttpMethod }}        m.Handle("{{.HttpMethod}}", "{{.Path}}", []macaron.Handler{s.{{.MethodName}}}){{else}}        m.Any("{{.Path}}", []macaron.Handler{s.{{.MethodName}}}){{end}}
{{end}}}, middlewares...){{else}} m.Group("{{.Group}}", func() {
{{range .Fields}}{{if notHttpAny .HttpMethod }}        m.Handle("{{.HttpMethod}}", "{{.Path}}", []macaron.Handler{s.{{.MethodName}}}){{else}}        m.Any("{{.Path}}", []macaron.Handler{s.{{.MethodName}}}){{end}}
{{end}}}){{end}}{{else}}{{if notEmptyStr .Chain }}    // use chain for router
    middlewares := s.{{.Chain}}()
    for _, middleware := range middlewares {
        m.Use(middleware)
    }{{end}}
{{range .Fields}}{{if notHttpAny .HttpMethod }}    m.Handle("{{.HttpMethod}}", "{{.Path}}", []macaron.Handler{s.{{.MethodName}}}){{else}}    m.Any("{{.Path}}", []macaron.Handler{s.{{.MethodName}}}){{end}}
{{end}}{{end}}}

{{ $unimplementedServant := print "Unimplemented" .TypeName "Servant" }}
// {{$unimplementedServant}} can be embedded to have forward compatible implementations.
type {{$unimplementedServant}} struct {
}

{{if notEmptyStr .Chain }}
func ({{$unimplementedServant}}){{.Chain}}() []macaron.Handler {
    return nil
}

{{end}}
{{range .Fields}}
func ({{$unimplementedServant}}){{.MethodName}}(c *macaron.Context) {
    c.Resp.WriteHeader(http.StatusNotImplemented)
    c.Resp.Write([]byte("method {{.MethodName}} not implemented"))
}

{{end}}
func ({{$unimplementedServant}})mustEmbedUnimplemented{{.TypeName}}Servant() {}
