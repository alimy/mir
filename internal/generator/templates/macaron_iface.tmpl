// Code generated by go-mir. DO NOT EDIT.

package {{ .PkgName }}

import (
    macaron "{{if notEmptyStr .EngineInfo.PkgName }}{{ .EngineInfo.PkgName }}{{else}}gopkg.in/macaron.v1{{end}}"
)

{{if notEmptyStr .Comment }}// {{.Comment}}{{end}}
type {{.TypeName}} interface {
{{if notEmptyStr .Chain }}    // Chain provide handlers chain for macaron
    {{.Chain}}() []macaron.Handler
{{end}}
{{range .Fields}}{{if notEmptyStr .Comment }}    // {{.Comment}}
    {{.MethodName}}(*macaron.Context){{else}}    {{.MethodName}}(*macaron.Context){{end}}
{{end}}
}

// Register{{.TypeName}}Servant register {{.TypeName}} servant to macaron
func Register{{.TypeName}}Servant(m *macaron.Macaron, s {{.TypeName}}) {
{{if notEmptyStr .Group }}{{if notEmptyStr .Chain }}    // use chain for router
    middlewares := s.{{.Chain}}()
    m.Group("{{.Group}}", func() {
{{range .Fields}}{{if notHttpAny .HttpMethod }}        m.Handle("{{.HttpMethod}}", "{{.Path}}", []macaron.Handler{s.{{.MethodName}}}...){{else}}        m.Any("{{.Path}}", []macaron.Handler{s.{{.MethodName}}}...){{end}}
{{end}}}, middlewares...){{else}} m.Group("{{.Group}}", func() {
{{range .Fields}}{{if notHttpAny .HttpMethod }}        m.Handle("{{.HttpMethod}}", "{{.Path}}", []macaron.Handler{s.{{.MethodName}}}...){{else}}        m.Any("{{.Path}}", []macaron.Handler{s.{{.MethodName}}}...){{end}}
{{end}}}){{end}}{{else}}{{if notEmptyStr .Chain }}    // use chain for router
    middlewares := s.{{.Chain}}()
    m.Use(middlewares...){{end}}
{{range .Fields}}{{if notHttpAny .HttpMethod }}    m.Handle("{{.HttpMethod}}", "{{.Path}}", []macaron.Handler{s.{{.MethodName}}}...){{else}}    m.Any("{{.Path}}", []macaron.Handler{s.{{.MethodName}}}...){{end}}
{{end}}{{end}}}
