// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir {{ .VerInfo.MirVer }}

package {{ .PkgName }}

import (
    "net/http"

    "github.com/alimy/mir/v4"
    {{if notEmptyStr .EngineInfo.PkgName }}iris "{{ .EngineInfo.PkgName }}{{else}}"github.com/kataras/iris/v12{{end}}"
	"{{if notEmptyStr .EngineInfo.PkgName }}{{ .EngineInfo.PkgName }}/context{{else}}github.com/kataras/iris/v12/context{{end}}"
	{{ declareImports .Imports }}
)

{{ declareTypes .InOuts .PkgPath .Imports }}

{{if notEmptyStr .Comment }}// {{.Comment}}{{end}}
type {{.TypeName}} interface {
{{if notEmptyStr .Chain }}// Chain provide handlers chain for iris
    {{.Chain}}() context.Handlers
{{end}}
{{range .Fields}}    {{.MethodName}}({{if notEmptyStr .InName }}*{{ .InName }}{{end}}) {{if notEmptyStr .OutName }}(*{{ .OutName}}, mir.Error){{else}}mir.Error{{end}}
{{end}}

    mustEmbedUnimplemented{{.TypeName}}Servant()
}
{{if .IsUseBinding }}
type {{.TypeName}}Binding interface {
{{range .BindingFields }}    Bind{{.MethodName}}(context.Context) (*{{ .InName }}, mir.Error)
{{end}}

	mustEmbedUnimplemented{{.TypeName}}Binding()
}
{{end}}
{{if .IsUseFieldChain }}
type {{.TypeName}}Chain interface {
{{range .ChainFields }}    Chain{{.MethodName}}() context.Handlers
{{end}}

	mustEmbedUnimplemented{{.TypeName}}Chain()
}
{{end}}

type {{.TypeName}}Render interface {
{{range .Fields}}    {{if notEmptyStr .OutName }}Render{{.MethodName}}(context.Context, *{{ .OutName }}, mir.Error){{else}}Render{{.MethodName}}(context.Context, mir.Error){{end}}
{{end}}
	
	mustEmbedUnimplemented{{.TypeName}}Render()
}

// Register{{.TypeName}}Servant register {{.TypeName}} servant to iris
func Register{{.TypeName}}Servant(app *iris.Application, s {{.TypeName}}{{if .IsUseBinding }},  b {{.TypeName}}Binding{{end}}, r {{.TypeName}}Render{{if .IsUseFieldChain }},  c {{.TypeName}}Chain{{end}}) {
{{if notEmptyStr .Group }}    router := app.Party("{{.Group}}"){{else}}    router := app{{end}}
{{if notEmptyStr .Chain }}    // use chain for party
    middlewares := s.{{.Chain}}()
    router.Use(middlewares...)
{{end}}
    // register routes info to router
{{range .Fields}}{{if .NotHttpAny }}    router.Handle("{{.HttpMethod}}", "{{.Path}}", {{if .IsFieldChain }}append(c.Chain{{.MethodName}}(), {{end}}func(c context.Context) {{if $.WatchCtxDone }}{
		select {
		case <- c.Request().Context().Done():
			return
		default:
		}
{{else}}{ {{end}}
		{{if notEmptyStr .InName }}req, err := b.Bind{{.MethodName}}(c)
		if err != nil {
			{{if notEmptyStr .OutName }}r.Render{{.MethodName}}(c, nil, err){{else}}r.Render{{.MethodName}}(c, err){{end}}
			return
		}
		{{if notEmptyStr .OutName}}resp, err := s.{{.MethodName}}(req)
		r.Render{{.MethodName}}(c, resp, err){{else}}r.Render{{.MethodName}}(c, s.{{.MethodName}}(req)){{end}}{{else}}{{if notEmptyStr .OutName}}resp, err := s.{{.MethodName}}()
		r.Render{{.MethodName}}(c, resp, err){{else}}r.Render{{.MethodName}}(c, s.{{.MethodName}}()){{end}}{{end}}
	}{{if .IsFieldChain }})...{{end}})
	{{else if .JustHttpAny}}    router.Any("{{.Path}}", {{if .IsFieldChain }}append(c.Chain{{.MethodName}}(), {{end}}func(c context.Context) {{if $.WatchCtxDone }}{
		select {
		case <- c.Request().Context().Done():
			return
		default:
		}
{{else}}{ {{end}}
		{{if notEmptyStr .InName }}req, err := b.Bind{{.MethodName}}(c)
		if err != nil {
			{{if notEmptyStr .OutName }}r.Render{{.MethodName}}(c, nil, err){{else}}r.Render{{.MethodName}}(c, err){{end}}
			return
		}
		{{if notEmptyStr .OutName}}resp, err := s.{{.MethodName}}(req)
		r.Render{{.MethodName}}(c, resp, err){{else}}r.Render{{.MethodName}}(c, s.{{.MethodName}}(req)){{end}}{{else}}{{if notEmptyStr .OutName}}resp, err := s.{{.MethodName}}()
		r.Render{{.MethodName}}(c, resp, err){{else}}r.Render{{.MethodName}}(c, s.{{.MethodName}}()){{end}}{{end}}
	}{{if .IsFieldChain }})...{{end}})
	{{else}}{{$field := .}}    {
        h := {{if .IsFieldChain }}append(c.Chain{{.MethodName}}(), {{end}}func(c context.Context) {{if $.WatchCtxDone }}{
			select {
			case <- c.Request().Context().Done():
				return
			default:
			}
{{else}}{ {{end}}
		    {{if notEmptyStr .InName }}req, err := b.Bind{{.MethodName}}(c)
		    if err != nil {
			    {{if notEmptyStr .OutName }}r.Render{{.MethodName}}(c, nil, err){{else}}r.Render{{.MethodName}}(c, err){{end}}
				return
		    }
		    {{if notEmptyStr .OutName}}resp, err := s.{{.MethodName}}(req)
		    r.Render{{.MethodName}}(c, resp, err){{else}}r.Render{{.MethodName}}(c, s.{{.MethodName}}(req)){{end}}{{else}}{{if notEmptyStr .OutName}}resp, err := s.{{.MethodName}}()
		    r.Render{{.MethodName}}(c, resp, err){{else}}r.Render{{.MethodName}}(c, s.{{.MethodName}}()){{end}}{{end}}
	    }{{if .IsFieldChain }}){{end}}
		{{range .AnyHttpMethods}}        router.Handle("{{.}}", "{{$field.Path}}", h{{if $field.IsFieldChain }}...{{end}})
		{{end}}    }
	{{end}}
{{end}}}

{{ $unimplementedServant := print "Unimplemented" .TypeName "Servant" }}
// {{$unimplementedServant}} can be embedded to have forward compatible implementations.
type {{$unimplementedServant}} struct {
}

{{if notEmptyStr .Chain }}
func ({{$unimplementedServant}}){{.Chain}}() context.Handlers {
    return nil
}

{{end}}
{{range .Fields}}
func ({{$unimplementedServant}}){{.MethodName}}({{if notEmptyStr .InName }}req *{{ .InName }}{{end}}) {{if notEmptyStr .OutName }}(*{{ .OutName}}, mir.Error){{else}}mir.Error{{end}} {
	return {{if notEmptyStr .OutName }}nil, {{end}}mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

{{end}}
func ({{$unimplementedServant}})mustEmbedUnimplemented{{.TypeName}}Servant() {}

{{ $unimplementedRender := print "Unimplemented" .TypeName "Render" }}
// {{$unimplementedRender}} can be embedded to have forward compatible implementations.
type {{$unimplementedRender}} struct {
	RenderAny func(context.Context, any, mir.Error)
}

{{range .Fields}}
func (r *{{$unimplementedRender}}) Render{{.MethodName}}(c context.Context{{if notEmptyStr .OutName }}, data *{{ .OutName }}{{end}}, err mir.Error) {
	{{if notEmptyStr .OutName}}r.RenderAny(c, data, err){{else}}r.RenderAny(c, nil, err){{end}}
}

{{end}}
func (r *{{$unimplementedRender}})mustEmbedUnimplemented{{.TypeName}}Render() {}
{{if .IsUseBinding }}
{{ $unimplementedBinding := print "Unimplemented" .TypeName "Binding" }}
// {{$unimplementedBinding}} can be embedded to have forward compatible implementations.
type {{$unimplementedBinding}} struct {
	BindAny func(context.Context, any) mir.Error
}

{{range .Fields}}{{if notEmptyStr .InName }}func (b *{{$unimplementedBinding}}) Bind{{.MethodName}}(c context.Context) (*{{ .InName }}, mir.Error) {
	obj := new({{ .InName }})
	err := b.BindAny(c, obj)
	return obj, err
}
{{end}}
{{end}}
func (b *{{$unimplementedBinding}})mustEmbedUnimplemented{{.TypeName}}Binding() {}
{{end}}
{{if .IsUseFieldChain }}
{{ $unimplementedChain := print "Unimplemented" .TypeName "Chain" }}
// {{$unimplementedChain}} can be embedded to have forward compatible implementations.
type {{$unimplementedChain}} struct {
}

{{range .Fields}}{{if .IsFieldChain }}func (b *{{$unimplementedChain}}) Chain{{.MethodName}}() context.Handlers {
	return nil
}
{{end}}
{{end}}
func (b *{{$unimplementedChain}})mustEmbedUnimplemented{{.TypeName}}Chain() {}
{{end}}
