// Code generated by go-mir. DO NOT EDIT.

package {{ .PkgName }}

import (
    "net/http"
{{if notEmptyStr .Chain }}
    "github.com/gofiber/fiber/v2/middleware/logger"
{{end}}
    fiber "{{if notEmptyStr .EngineInfo.PkgName }}{{ .EngineInfo.PkgName }}{{else}}github.com/gofiber/fiber/v2{{end}}"
)

{{if notEmptyStr .Comment }}// {{.Comment}}{{end}}
type {{.TypeName}} interface {
{{if notEmptyStr .Chain }}// Chain provide handlers chain for fiber
    {{.Chain}}() []interface{}
{{end}}
{{range .Fields}}{{if notEmptyStr .Comment }}    // {{.Comment}}
    {{.MethodName}}(c *fiber.Ctx) error{{else}}    {{.MethodName}}(c *fiber.Ctx) error{{end}}
{{end}}

    mustEmbedUnimplemented{{.TypeName}}Servant()
}

// Register{{.TypeName}}Servant register {{.TypeName}} servant to fiber
func Register{{.TypeName}}Servant(app *fiber.App, s {{.TypeName}}) {
{{if notEmptyStr .Group }}    router := app.Group("{{.Group}}"){{else}}    router := app{{end}}
{{if notEmptyStr .Chain }}    // use chain for router
    middlewares := s.{{.Chain}}()
    router.Use(middlewares...)
{{end}}
    // register routes info to router
{{range .Fields}}{{if eq .HttpMethod "GET" }}    router.Get("{{.Path}}", s.{{.MethodName}}){{else if eq .HttpMethod "POST"}}    router.Post("{{.Path}}", s.{{.MethodName}}){{else if eq .HttpMethod "PUT"}}    router.Put("{{.Path}}", s.{{.MethodName}}){{else if eq .HttpMethod "DELETE"}}    router.Delete("{{.Path}}", s.{{.MethodName}}){{else if eq .HttpMethod "HEAD"}}    router.Head("{{.Path}}", s.{{.MethodName}}){{else if eq .HttpMethod "OPTIONS"}}    router.Options("{{.Path}}", s.{{.MethodName}}){{else if eq .HttpMethod "TRACE"}}    router.Trace("{{.Path}}", s.{{.MethodName}}){{else if eq .HttpMethod "PATCH"}}    router.Patch("{{.Path}}", s.{{.MethodName}}){{else if eq .HttpMethod "CONNECT"}}    router.Connect("{{.Path}}", s.{{.MethodName}}){{else if eq .HttpMethod "ANY" }}    router.All("{{.Path}}", s.{{.MethodName}}){{end}}
{{end}}}

{{ $unimplementedServant := print "Unimplemented" .TypeName "Servant" }}
// {{$unimplementedServant}} can be embedded to have forward compatible implementations.
type {{$unimplementedServant}} struct {
}

{{if notEmptyStr .Chain }}
func ({{$unimplementedServant}}){{.Chain}}() []interface{} {
    return []interface{}{logger.New()}
}

{{end}}
{{range .Fields}}
func ({{$unimplementedServant}}){{.MethodName}}(c *fiber.Ctx) error {
    c.Status(http.StatusNotImplemented)
    c.Write([]byte("method {{.MethodName}} not implemented"))
    return nil
}

{{end}}
func ({{$unimplementedServant}})mustEmbedUnimplemented{{.TypeName}}Servant() {}
