// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/chi_iface.tmpl (1.498kB)
// templates/gin_iface.tmpl (1.017kB)
// templates/httprouter_iface.tmpl (1.487kB)
// templates/mux_iface.tmpl (1.458kB)

package generator

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _chi_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x4d\x4f\xe3\x3c\x10\xc7\xef\xfe\x14\xa3\x9e\x92\x47\xe0\xdc\x91\x38\x3c\x2a\xaf\x07\x4a\x55\xba\xda\xb3\x71\xa6\x89\x45\x63\x67\xed\x09\xa8\xb2\xfc\xdd\x57\x76\x5c\xda\xc2\xb2\x28\x7b\x6a\xc7\x9e\xff\xbc\xfc\xfc\x4f\x55\xc1\xdc\xd4\x08\x0d\x6a\xb4\x82\xb0\x86\xe7\x1d\x34\xe6\xbc\x53\x96\xc3\xd5\x23\x2c\x1e\xd7\x70\x7d\x75\xbf\xe6\x8c\xf5\x42\xbe\x88\x06\xc1\x7b\xe0\xcb\x97\x66\x21\x3a\x84\x10\x18\x53\x5d\x6f\x2c\x41\xc1\x00\x00\x66\x1a\xa9\x6a\x89\xfa\x19\x1b\xe3\x46\x51\x3b\x3c\x73\x69\xba\xaa\x31\xe7\xb2\x55\x95\x6c\xd5\x8c\x95\x8c\x79\xaf\x36\xa0\x0d\x5d\x77\x3d\xed\x9e\xc8\x02\x9f\x9b\xae\x43\x4d\x10\x42\x55\x81\xf7\xfb\x38\x04\xef\x51\xd7\x21\x30\xda\xf5\xb1\x3f\x5f\xef\x7a\x8c\xfd\x43\x00\xa5\x09\xed\x46\x48\x04\x3f\x56\xe4\xf7\x6e\x81\x58\xcf\x5b\xa1\x74\x08\x71\x86\xb8\x63\x8c\xa0\xb7\xe6\x55\xd5\x08\x9d\xaa\xeb\x2d\xbe\x09\x8b\x0e\x36\xc6\x82\x6c\x55\x1a\x36\x65\x15\x65\x8c\xf9\xc3\x21\x87\xed\xdb\x7b\x6f\x85\x6e\x10\xf8\x8d\xc2\x6d\xed\xe2\x5c\x5f\xaf\x90\x3b\x1f\xaf\x91\x9a\x78\xcf\x1f\x90\x5a\x53\x8f\x0b\x14\x11\x16\x5f\xa1\xeb\x8d\x76\xf8\xd3\x2a\x42\x7b\x06\xff\xe5\xd3\x5f\x03\x3a\x2a\xbd\xc7\xad\xc3\xb1\xe4\xbf\xc9\xf3\xf8\xe3\x6f\x60\xac\xaa\x60\x85\x8d\x72\x84\xf6\x04\xe7\x13\xda\x57\xa1\x09\x6c\xbe\xfc\x00\xdb\xe5\x6b\x32\x89\xd9\x66\xd0\xf2\xaf\x75\x8a\xc4\x96\xaf\xcc\x90\xc6\x72\xa7\xe5\xca\xfd\x93\x9d\x10\xbc\xb5\x66\xe8\x33\x3f\x9b\x84\x70\x71\x99\xca\x2c\xf0\x6d\xac\x54\x94\x89\xa4\xe5\x0f\x66\xd0\x54\xcc\xbc\x1f\x55\x21\xcc\xce\xb2\xe6\x84\xd9\xa1\x8c\x3d\xb0\xf8\x64\x15\x96\x5f\x6c\x70\x08\x32\xf9\x25\x7a\x63\xd4\xa6\xbb\x63\xdb\x5c\x5c\x82\xe3\xd9\x2f\xec\xd0\x83\xff\x70\x58\x1c\xe5\x71\xce\xcb\x77\xee\xb9\xfe\x3b\xdb\x24\x71\xa0\xf4\xc6\x44\xa2\xb9\xd3\x97\x26\xbb\x23\xea\xff\xd7\x3b\xe0\xf1\xcf\xe8\x81\x13\x4c\xd9\x17\x37\x83\x96\x09\xc9\x21\x2d\x71\x89\x47\x4b\x41\x6d\x0a\x1c\xff\xe0\xa3\x3f\xf0\xe2\x77\x28\xea\xe2\x1b\xd9\xf1\xee\xb7\x48\x53\xd2\x97\xc6\x4d\xcb\x1f\x26\xa5\x5f\xe1\x16\x09\x27\x35\x10\x24\xdb\x29\x82\xc7\x9e\x94\xd1\x6e\x8a\x64\x6e\xb4\x46\x39\x69\x91\xb5\x15\xf2\xdb\x3d\x3e\x7f\xe3\xbf\x03\x00\x00\xff\xff\xaf\xae\x7b\x8f\xda\x05\x00\x00"

func chi_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_ifaceTmpl,
		"chi_iface.tmpl",
	)
}

func chi_ifaceTmpl() (*asset, error) {
	bytes, err := chi_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_iface.tmpl", size: 1498, mode: os.FileMode(0644), modTime: time.Unix(1583524781, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0xae, 0x69, 0xf8, 0x5f, 0xd0, 0xeb, 0xdc, 0x41, 0x99, 0x85, 0x4b, 0x93, 0x3, 0xc0, 0x81, 0x14, 0xf4, 0xac, 0xc0, 0xd6, 0xf8, 0x92, 0x9d, 0xf2, 0xec, 0xd4, 0x88, 0xcc, 0xf1, 0x1e, 0x95}}
	return a, nil
}

var _gin_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xc1\x6e\xdb\x30\x0c\x86\xef\x7a\x0a\x22\x27\x67\x68\xe5\xfb\x80\x1d\x8a\x34\x5b\x7b\x58\x5a\xac\xd9\x03\xa8\x16\x2d\x0b\x8d\x29\x43\x92\xbb\x19\x82\xde\x7d\x90\xac\x34\x71\xb6\xae\x27\x53\x34\xc9\x9f\xfc\xc8\xba\x86\x8d\x91\x08\x0a\x09\xad\xf0\x28\xe1\x79\x02\x65\xae\x7b\x6d\x39\xdc\x3e\xc0\xee\x61\x0f\xdb\xdb\xfb\x3d\x67\x6c\x10\xcd\x8b\x50\x08\x21\x00\x7f\x7c\x51\x3b\xd1\x23\xc4\xc8\x98\xee\x07\x63\x3d\x54\x0c\x00\x60\xa5\xb4\xef\xc6\x67\xde\x98\xbe\x56\x9a\xae\x95\x21\xdd\x24\x6b\xc5\xd6\x8c\x85\xa0\x5b\x20\xe3\xb7\xfd\xe0\xa7\x27\x6f\x81\x6f\x4c\xdf\x23\x79\x88\xb1\xae\x21\x84\xe3\x3b\xc6\x10\x90\x64\x8c\xcc\x4f\x43\x92\xe4\xfb\x69\xc0\x24\x19\x23\x68\xf2\x68\x5b\xd1\x20\x84\xb9\x22\xbf\x77\x3b\x44\xb9\xe9\x84\xa6\x5c\x28\x5b\x30\x58\xf3\xaa\x25\x42\x27\x48\x1e\xd0\x3a\x68\xb2\xbb\x35\x16\x94\xa6\xdc\x6e\x0e\xac\xd6\xe9\xcd\xef\x4a\x58\xf6\xb1\xa3\x7e\x08\x56\x90\x42\xe0\x5f\x35\x1e\xa4\x4b\x8d\xbd\x3f\x43\x2a\x79\x31\x47\x96\x09\x81\x7f\x47\xdf\x19\x39\x4f\x50\x7d\x4a\x7a\x1b\x43\x1e\x7f\xfb\x75\x08\x78\x70\x38\x27\x7f\x14\x58\x5a\x9a\xbf\x91\xb1\xba\x86\x1f\xa8\xb4\xf3\x68\x17\x8c\x9e\xd0\xbe\x0a\xf2\x60\xcb\xcf\x0b\x82\xae\xfc\xf6\x26\x93\x68\x47\x6a\xfe\x5b\xa7\x42\xc8\x9d\x6c\x49\x69\xc2\x2b\x70\xcb\x7a\xeb\xe3\x22\x16\x58\xbe\x59\x33\x0e\x05\x8a\x35\x63\xea\xe2\xf3\x17\xc0\xd9\x5f\xad\x42\x98\xad\x18\x57\x0b\x04\x67\xa1\xa7\x81\xff\x5a\x72\x21\x3d\x3a\x3c\xdb\xea\x9c\x9a\x89\xf7\x5a\xca\x03\xfe\x12\x16\x5d\x2a\xe5\x78\xd9\x34\x3b\x49\xf0\x9f\x0e\xab\xb3\x38\xce\xf9\xfa\x8d\x6d\xa9\xff\xc6\x2f\xa7\x38\xd0\xd4\x9a\x44\xad\x28\xbd\x7b\x1c\x77\xde\x0f\x37\x34\x01\x4f\xc6\xbc\xd1\x05\x89\x72\x6c\x99\xc2\x29\x24\xc6\xd5\x15\x24\xd7\xa3\xf0\x5d\x7e\x38\x7e\x71\x11\xff\x40\xc5\x6f\x68\xaa\x3e\xce\xba\x38\x9d\x3f\x01\x00\x00\xff\xff\xe3\xbe\x3e\xef\xf9\x03\x00\x00"

func gin_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_ifaceTmpl,
		"gin_iface.tmpl",
	)
}

func gin_ifaceTmpl() (*asset, error) {
	bytes, err := gin_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_iface.tmpl", size: 1017, mode: os.FileMode(0644), modTime: time.Unix(1583524781, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0x1a, 0x89, 0x8d, 0x3d, 0xa2, 0xa7, 0x30, 0x6f, 0xd9, 0xc5, 0x37, 0x13, 0xec, 0x11, 0xe, 0x12, 0x91, 0x4c, 0x88, 0x78, 0xe4, 0x33, 0xdc, 0x95, 0x72, 0xec, 0x3b, 0x6d, 0x66, 0x7c, 0x70}}
	return a, nil
}

var _httprouter_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xc1\x6e\xdb\x30\x0c\x86\xef\x7a\x0a\xc2\xd8\x21\x19\x32\xf9\x19\x86\xa4\x6b\x76\x58\x13\xa4\x01\x76\x56\x6d\xc6\x56\x6b\x4b\x1a\x45\x0f\x30\x08\xbd\xfb\xe0\xd8\xd9\xd2\x0c\x2d\xb0\xc1\x27\x99\xa6\xfc\xfd\x3f\x7f\xc2\x79\x0e\x6b\x5f\x22\x54\xe8\x90\x0c\x63\x09\x4f\x3d\x54\xfe\x53\x6b\x49\xc3\x66\x07\x0f\xbb\x23\xdc\x6d\xbe\x1e\xb5\x52\xc1\x14\x2f\xa6\x42\x10\x01\xbd\x7f\xa9\x1e\x4c\x8b\x90\x92\x52\xb6\x0d\x9e\x18\x16\x0a\x00\x20\x73\xc8\x79\xcd\x1c\x32\x35\xd6\x95\xe5\xba\x7b\xd2\x85\x6f\xf3\xe7\xae\xb1\xe8\x62\x51\xb7\xb6\x1c\x2f\x91\xef\x18\x29\x53\x4b\xa5\x44\xec\x09\x9c\xe7\xbb\x36\x70\xff\xc8\x04\x7a\xed\xdb\x16\x1d\x43\x4a\x79\x0e\x22\x97\x3a\x25\x11\x74\x65\x4a\x8a\xfb\x30\xb8\xd1\xc7\x3e\xe0\xe0\x26\x25\xb0\x8e\x91\x4e\xa6\x40\x10\x25\x42\xc6\x55\x08\xfa\x8b\xc5\xa6\x8c\xc3\x77\x6f\x4b\x0c\x5e\x6f\x64\xce\xfe\x45\xf4\x37\xe4\xda\x97\xa3\xc0\x62\x70\xad\x0f\x18\x83\x77\x11\xbf\x93\x65\xa4\x15\x7c\x9c\xde\xfe\xe8\x30\xf2\x0a\xfe\x4c\xa6\xf7\x86\x4c\x1b\x97\x13\x0a\x9b\x88\xa3\xd4\x3c\xd8\x4b\x10\x97\x33\x29\x95\xe7\x70\xc0\xca\x46\x46\x7a\x95\xcc\x23\xd2\x4f\xe3\x18\x68\x6a\xde\xe4\x16\xa7\x36\xfb\x2b\x19\x75\xea\x5c\xf1\x2e\x6e\x41\xa3\xc9\xc9\xd6\xe1\x7c\xac\x20\xbe\xa6\x2f\xdf\x5b\xc6\x96\x39\x7c\x76\x3d\xe8\xe1\x61\xcc\x64\x5a\x07\xe9\xad\x71\x65\x83\x8b\x4c\xe4\xaa\x9b\x52\xb6\x82\x4c\xe4\xd9\x5b\xb7\x37\x5c\xc3\x07\x7d\x4f\xbe\x0b\xa0\x87\xea\xdc\x8d\xfa\x26\xdf\xe5\x75\xf6\xbf\xb9\xe7\x78\xc7\x6b\xf7\xc8\xff\x0e\x55\x6f\xd1\xf6\xdd\xac\x34\x1f\xe7\xc4\x6d\xb0\x41\xc6\x19\x81\x5b\x34\xe5\x9c\xe3\x1a\x2e\xea\x19\x79\xbb\xc0\xd6\xbb\x38\x23\x71\xed\x9d\xc3\x62\xce\x9d\x1c\xc9\x14\xff\xb1\x92\xbf\xff\xff\x5f\x01\x00\x00\xff\xff\xb1\x1b\x15\xe8\xcf\x05\x00\x00"

func httprouter_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_ifaceTmpl,
		"httprouter_iface.tmpl",
	)
}

func httprouter_ifaceTmpl() (*asset, error) {
	bytes, err := httprouter_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_iface.tmpl", size: 1487, mode: os.FileMode(0644), modTime: time.Unix(1583559479, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0x44, 0x9c, 0x20, 0xc7, 0x87, 0x3c, 0x9f, 0xc1, 0xac, 0xdc, 0xfd, 0x18, 0x40, 0xda, 0x9b, 0x3d, 0x36, 0x56, 0xde, 0xdc, 0xda, 0x58, 0xf6, 0x1c, 0xdc, 0x97, 0xde, 0x5b, 0x33, 0x8, 0x89}}
	return a, nil
}

var _mux_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\xb9\x6e\xdc\x30\x10\xed\xf9\x15\x03\x55\x92\xe1\x50\x40\x4a\x03\x2e\x02\x1f\xb1\x0b\x1f\xb1\x1d\xa4\x08\x52\xd0\xab\x91\x96\xb0\x48\x2a\x3c\x36\x2b\x10\xfc\xf7\x80\xa4\x76\xb5\x07\x9c\x22\x69\xb2\x8d\x44\xce\xbc\x39\xde\x7b\xab\xba\x86\x0b\xd5\x20\x74\x28\x51\x33\x8b\x0d\xbc\x8e\xd0\xa9\x0f\x82\x6b\x0a\x97\x0f\x70\xff\xf0\x02\x57\x97\xb7\x2f\x94\x90\x81\x2d\xde\x58\x87\xe0\x3d\xd0\xc7\xb7\xee\x9e\x09\x84\x10\x08\xe1\x62\x50\xda\x42\x49\x00\x00\x0a\x89\xb6\x5e\x5a\x3b\x14\x24\x9f\x3b\x6e\x97\xee\x95\x2e\x94\xa8\x59\xcf\xc5\x58\x0b\xae\xeb\xd5\xc7\xe2\x28\xda\x29\xcd\xfb\x9e\xd5\xc2\xad\x0b\x52\x11\xe2\x3d\x6f\x41\x2a\x7b\x25\x06\x3b\x3e\x5b\x0d\xf4\x42\x09\x81\xd2\x42\x08\x75\x0d\xde\x6f\xce\x21\x78\x8f\xb2\x09\x81\xd8\x71\x88\xe3\xd1\x97\x71\xc0\x38\x5e\x08\xc0\xa5\x45\xdd\xb2\x05\x82\xcf\x15\xe9\xad\xb9\x47\x6c\x2e\x96\x8c\xcb\x10\x20\xee\x1f\x5f\x61\xd0\x6a\xc5\x1b\x04\xc1\x9b\xa6\xc7\x5f\x4c\xa3\x81\x56\x69\x10\x6e\x9d\x46\x4d\x59\x65\x05\xdf\x7f\x08\xb7\xa6\x77\xdb\xac\x6b\x27\x17\x64\x33\x80\xf7\x9a\xc9\x0e\x81\x5e\x73\xec\x1b\x13\x27\x7b\x7f\x09\x00\x38\xd8\x23\x35\xf2\x9e\xde\xa1\x5d\xaa\x26\x6f\x50\x46\x32\xe9\x13\x9a\x41\x49\x83\xdf\x34\xb7\xa8\x4f\xe1\x64\xba\xfd\xe9\xd0\xd8\xca\x7b\xec\x4d\xdc\xf6\xef\xb0\xd3\xe8\xf9\x19\x08\xa9\x6b\x78\xc2\x8e\x1b\x8b\x7a\x8f\xcc\x67\xd4\x2b\x26\x2d\xe8\x29\x78\x40\xb5\x99\xc2\x56\x25\xd2\x5a\x27\x17\x7f\xac\x53\x6a\x38\x89\x5c\x3e\x29\x97\xe6\x32\xfb\xf5\xaa\x8d\x62\x7b\xf4\x7d\xd6\xca\x0d\x99\x3c\xd0\x09\x08\x67\xe7\xa0\xe9\x23\xb3\xcb\x47\x8d\x2d\x5f\x97\x85\xf7\x39\x2d\x84\xa2\xa2\xcf\xee\x35\xe7\x95\x33\x4d\xfb\xd8\x1d\xf5\x8e\xfd\x91\x45\x72\x06\x61\x91\x6c\x12\x2d\x91\xb1\x49\xac\x5d\xb7\x9c\x9d\x83\xa1\x93\x4d\xc8\xdc\x83\x7e\x35\x58\xee\xe4\x51\x4a\xab\x6d\x4b\x32\x35\xd8\x52\x9a\x30\x06\xb8\x6c\x55\x24\x72\x6a\xf5\xae\xaf\x6e\xac\x1d\x3e\xc9\x11\x68\x7c\xc9\xd2\xef\x91\x43\x6f\x98\x6c\xfa\x64\xd2\xc4\x4b\xa4\x29\x84\xe2\x14\x0c\x3d\xf0\x4a\x45\xd3\x2c\xf1\x97\xaf\x4d\x02\xcc\x75\x23\x9b\xc7\x7a\xdc\x28\x63\x43\x98\xb1\xf1\x9c\x81\x29\x50\x6c\xfc\x95\x90\x2b\xd6\xf3\x06\xbf\x38\xd4\x23\xd0\xf8\xe0\x68\x76\xc1\xd3\x55\xe9\x3d\x97\x6d\xcf\xec\x51\xea\x5c\xed\x50\xc9\x7f\x5a\x34\x7e\xec\xe6\x45\x93\x42\xff\xd1\xa6\x07\x7f\xcf\xdf\x01\x00\x00\xff\xff\x57\x76\xe0\xc3\xb2\x05\x00\x00"

func mux_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_ifaceTmpl,
		"mux_iface.tmpl",
	)
}

func mux_ifaceTmpl() (*asset, error) {
	bytes, err := mux_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_iface.tmpl", size: 1458, mode: os.FileMode(0644), modTime: time.Unix(1583524781, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5e, 0xaa, 0xdb, 0xf8, 0xc2, 0x2c, 0x8d, 0x54, 0x36, 0x93, 0xa1, 0x75, 0xc1, 0x24, 0x24, 0xe5, 0xeb, 0x3a, 0x20, 0x3f, 0xf0, 0xb3, 0xbf, 0x5, 0xe, 0x7a, 0xc6, 0x6e, 0xa8, 0x22, 0xc1, 0xb6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"chi_iface.tmpl":        chi_ifaceTmpl,
	"gin_iface.tmpl":        gin_ifaceTmpl,
	"httprouter_iface.tmpl": httprouter_ifaceTmpl,
	"mux_iface.tmpl":        mux_ifaceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"chi_iface.tmpl":        {chi_ifaceTmpl, map[string]*bintree{}},
	"gin_iface.tmpl":        {gin_ifaceTmpl, map[string]*bintree{}},
	"httprouter_iface.tmpl": {httprouter_ifaceTmpl, map[string]*bintree{}},
	"mux_iface.tmpl":        {mux_ifaceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
