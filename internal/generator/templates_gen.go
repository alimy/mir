// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/chi_iface.tmpl (1.444kB)
// templates/gin_iface.tmpl (1.006kB)
// templates/httprouter_iface.tmpl (1.355kB)
// templates/mux_iface.tmpl (1.42kB)

package generator

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _chi_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xbd\x6e\xe3\x3c\x10\xec\xf9\x14\x8b\x54\xd2\x87\x84\xea\x03\xa4\xf8\xe0\xfc\x16\xb1\x0d\xc7\x87\xab\x19\x6a\x2d\x11\xb1\x48\x1d\xb9\x4a\x60\x10\x7c\xf7\x03\x29\xc9\xb6\x7c\xb8\x9c\xdd\x91\xe2\xcc\xec\xce\xec\xaa\x28\x60\x66\x4a\x84\x0a\x35\x5a\x41\x58\xc2\xfb\x0e\x2a\x73\xd3\x28\xcb\xe1\x7e\x01\xf3\xc5\x1a\x1e\xee\x5f\xd6\x9c\xb1\x56\xc8\x0f\x51\x21\x78\x0f\x7c\xf9\x51\xcd\x45\x83\x10\x02\x63\xaa\x69\x8d\x25\xc8\x18\x00\xc0\x95\x46\x2a\x6a\xa2\xf6\x8a\xf5\xf7\x4a\x51\xdd\xbd\x73\x69\x9a\xa2\x32\x37\xb2\x56\x85\xac\xd5\x15\xcb\x19\xf3\x5e\x6d\x40\x1b\x7a\x68\x5a\xda\xbd\x91\x05\x3e\x33\x4d\x83\x9a\xa2\x6a\x51\x80\xf7\xe3\x87\x10\x98\xf7\xa8\xcb\x10\x18\xed\xda\xd8\x01\x5f\xef\x5a\x8c\x1d\x84\x00\x4a\x13\xda\x8d\x90\x08\xbe\xd7\xe4\x2f\x6e\x8e\x58\xce\x6a\xa1\x74\x08\xa9\x8d\x68\x33\x5e\xa1\xb5\xe6\x53\x95\x08\x8d\x2a\xcb\x2d\x7e\x09\x8b\x0e\x36\xc6\x82\xac\x55\x02\x26\x54\x96\xc7\x3b\x7f\x3d\x60\xf6\xf5\xbd\xb7\x42\x57\x08\xfc\x51\xe1\xb6\x74\x83\x7c\x2a\x3b\x1f\xac\x4c\x7c\x0c\xc5\x27\x5e\x7a\x46\xaf\xd7\x9f\xf9\x2b\x52\x6d\xca\xde\x50\x16\xe3\xe3\x2b\x74\xad\xd1\x0e\x7f\x5a\x45\x68\xaf\xe1\xbf\xe1\xeb\xaf\x0e\x1d\xe5\xfb\x7e\x02\x8b\x51\xad\xb0\x52\x8e\xd0\x4e\x82\x79\x43\xfb\x29\x34\x81\x1d\x1e\x4f\x62\x73\xc3\x33\x99\x64\x7e\xd3\x69\xf9\xad\x4e\x96\x42\xe2\x2b\xd3\xa5\x7e\xdc\x54\x2e\x1f\xc3\x9f\x0c\xf4\xc9\x9a\xae\x1d\x63\xb0\x89\x09\xb7\x77\x49\x67\x8e\x5f\xbd\x54\x96\xf7\xaf\xfc\xd5\x74\x9a\x32\xef\x7b\x56\x08\xd7\x03\x23\x99\xdd\x3a\xfc\x43\xc6\x1e\x4d\xe5\xaf\x63\xef\x1c\x82\x4c\xa3\x8f\x63\xee\xc9\xe9\xed\x78\x03\x6e\xef\xc0\xf1\x61\xf4\x47\x45\xf8\x0f\x87\xd9\x11\x8e\x73\x7e\x48\x7e\x2c\xb0\x8f\x37\x71\x1c\x28\xbd\x31\x31\xd4\xa1\xd4\x37\x0b\xa3\x0d\x3d\x13\xb5\xff\xeb\x1d\xf0\x78\xe8\x97\x60\x1a\xd7\xb0\x19\x8f\x9d\x96\x31\x9a\x03\x2c\xe6\xe3\x3d\x5f\x0a\xaa\xe3\xd1\xf1\x93\x2d\xca\xc7\x35\x3b\x4d\x8e\x3f\xa3\x28\xb3\x7f\x53\x07\xf4\x13\xd2\xf9\xe0\xa5\x71\x97\xa0\xbb\x0b\xc0\xf7\xb8\x45\xc2\x0b\xc4\x05\xc9\xfa\x7c\xf8\xa2\x25\x65\xb4\x3b\x9f\x30\x33\x5a\xa3\xbc\xc0\xc0\xda\x0a\x79\x4e\xff\x87\x9d\x1e\xff\xf0\xdf\x01\x00\x00\xff\xff\xf0\x44\xe0\x39\xa4\x05\x00\x00"

func chi_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_ifaceTmpl,
		"chi_iface.tmpl",
	)
}

func chi_ifaceTmpl() (*asset, error) {
	bytes, err := chi_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_iface.tmpl", size: 1444, mode: os.FileMode(0644), modTime: time.Unix(1583416684, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x61, 0x35, 0x80, 0x5c, 0xef, 0xc, 0xef, 0xba, 0x3, 0x6f, 0xc, 0x66, 0x6b, 0x5d, 0xb7, 0x12, 0xc9, 0xde, 0xfa, 0x8, 0xa9, 0x63, 0xe4, 0x70, 0x11, 0xe2, 0x6b, 0xaf, 0x87, 0x5f, 0x49, 0x59}}
	return a, nil
}

var _gin_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6f\xdc\x20\x10\xbd\xf3\x2b\x46\x39\x79\xab\x04\xdf\x2b\xf5\x10\x6d\xb6\x4d\x0e\xdd\x44\xcd\xf6\x07\x10\x33\xc6\x28\xeb\xc1\x02\x9c\xd6\x42\xfc\xf7\x0a\x8c\x37\xeb\xad\x1a\xf5\x36\x30\x1f\x6f\xde\x7b\x53\xd7\xb0\x35\x12\x41\x21\xa1\x15\x1e\x25\xbc\x4c\xa0\xcc\x4d\xaf\x2d\x87\xbb\x47\xd8\x3f\x1e\x60\x77\xf7\x70\xe0\x8c\x0d\xa2\x79\x15\x0a\x21\x04\xe0\x4f\xaf\x6a\x2f\x7a\x84\x18\x19\xd3\xfd\x60\xac\x87\x8a\x01\x00\x5c\x29\xed\xbb\xf1\x85\x37\xa6\xaf\x95\xa6\x1b\x65\x48\x37\x29\xba\x62\x1b\xc6\x42\xd0\x2d\x90\xf1\xbb\x7e\xf0\xd3\xb3\xb7\xc0\xb7\xa6\xef\x91\x7c\x1a\x54\xd7\x10\xc2\xf2\x11\x23\x0b\x01\x49\xc6\xc8\xfc\x34\x24\x50\x7e\x98\x06\x4c\xa0\x31\x82\x26\x8f\xb6\x15\x0d\x42\x98\x67\xf2\x07\xb7\x47\x94\xdb\x4e\x68\x8a\x31\x6f\x92\x98\xa5\x27\x0c\xd6\xbc\x69\x89\xd0\x09\x92\x47\xb4\x0e\x9a\xfc\xdd\x1a\x0b\x4a\x53\xae\xcd\x85\xd5\x26\xbd\xf9\x7d\x29\xcb\x7f\xa7\x25\x42\xb0\x82\x14\x02\xff\xaa\xf1\x28\x5d\xc1\xc8\xd8\xfb\xc2\x67\x45\xa6\x6c\xb0\x22\x34\x77\xcc\xf3\xe6\x98\x7f\x47\xdf\x19\x39\xb3\xaa\x3e\x25\xf8\xad\x21\x8f\xbf\xfd\xe6\x84\x1c\x59\x52\xe6\x07\x2a\xed\x3c\xda\x95\x0e\xcf\x68\xdf\x04\x79\xb0\x25\x79\xa1\x92\x2b\x69\x6f\x32\xd1\x76\xa4\xe6\xc3\x39\x15\x42\x5e\x61\x47\x4a\x13\x5e\x83\x5b\xcf\xdb\x2c\x62\xaf\x0c\xfc\x66\xcd\x38\x2c\x8c\xad\x19\xd3\x1a\x9f\xbf\x00\xce\x89\x2a\x84\x39\x88\x31\x33\x3a\x3a\xfc\xbb\xf4\x4c\xe4\x7f\x5a\x39\x3a\x3c\xf3\x6d\x6e\xce\xb9\x5e\x4b\x79\xc4\x5f\xc2\xa2\x4b\xc3\x1c\x2f\x5e\x9e\x81\xf0\x9f\x0e\xab\xb3\x3a\xce\xf9\xbb\xbc\x0b\xc0\x49\xc3\xdc\xe3\x40\x53\x6b\x92\x72\x05\xea\x03\xff\xc9\xf8\x7b\xef\x87\x5b\x9a\x80\xa7\x60\xf6\x74\x2d\x49\xb9\xaa\x24\xc7\x7b\x49\x8c\xd7\x49\xe1\x27\xe1\xbb\x14\x3a\x7e\x71\x10\x9b\xe5\x62\x2e\x55\xe3\xb7\x34\x55\xff\xd5\x59\x64\x5d\x2e\xe9\x4f\x00\x00\x00\xff\xff\x59\x02\x57\x72\xee\x03\x00\x00"

func gin_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_ifaceTmpl,
		"gin_iface.tmpl",
	)
}

func gin_ifaceTmpl() (*asset, error) {
	bytes, err := gin_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_iface.tmpl", size: 1006, mode: os.FileMode(0644), modTime: time.Unix(1583416155, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x82, 0x43, 0x71, 0xd5, 0x28, 0x57, 0xb3, 0x23, 0xb4, 0x84, 0xb3, 0x32, 0x31, 0xaa, 0xaf, 0xbb, 0xf9, 0x8e, 0x2e, 0xfa, 0x7, 0x1b, 0x11, 0x7f, 0xd5, 0x4a, 0x25, 0x60, 0x22, 0x31, 0xbb, 0x5}}
	return a, nil
}

var _httprouter_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcd\x8e\xda\x30\x10\xc7\xef\x7e\x8a\x11\x27\xa8\xa8\xf3\x0c\x15\x6c\x97\x1e\x0a\x88\x45\xea\xd9\x9b\x0c\x89\x77\xc9\xd8\x1d\x4f\x2a\x45\x96\xdf\xbd\x0a\x0e\xdd\x05\x55\x2b\xad\x94\x13\x66\xc6\xf9\xfd\x3f\x24\x17\x05\xac\x5c\x85\x50\x23\x21\x1b\xc1\x0a\x9e\x7b\xa8\xdd\xd7\xd6\xb2\x86\xf5\x0e\xb6\xbb\x23\x3c\xac\x7f\x1c\xb5\x52\xde\x94\xaf\xa6\x46\x88\x11\xf4\xfe\xb5\xde\x9a\x16\x21\x25\xa5\x6c\xeb\x1d\x0b\xcc\x15\x00\xc0\x8c\x50\x8a\x46\xc4\xcf\x54\xfe\x5f\x5b\x69\xba\x67\x5d\xba\xb6\x78\xe9\xce\x16\x29\x94\x4d\x6b\xab\x7c\x89\x5d\x27\xc8\x33\xb5\x50\x2a\x46\x7b\x02\x72\xf2\xd0\x7a\xe9\x9f\x84\x41\xaf\x5c\xdb\x22\xc9\xa0\x51\x14\x10\xe3\x75\x90\x92\x8a\x11\xa9\x4a\x49\x49\xef\x07\x3f\xfa\xd8\x7b\x1c\xfc\xa4\x04\x96\x04\xf9\x64\x4a\x84\xa8\x62\x64\x43\x35\x82\xfe\x6e\xf1\x5c\x85\x94\x2e\x96\x2e\x4a\xdb\x51\xe9\x46\x66\xd8\xde\x4b\xe5\x2f\xb2\x5c\x3e\xeb\x9f\x28\x8d\xab\xb2\xde\x7c\x88\xa1\x0f\x18\xbc\xa3\x80\xbf\xd8\x0a\xf2\x12\xbe\x8c\xd3\xdf\x1d\x06\x59\xc2\x5b\x54\xbd\x37\x6c\xda\xb0\xf8\x97\x20\xa9\x21\xdc\x01\x6b\x1b\x04\xf9\x26\xca\x13\xf2\x1f\x43\x02\x3c\x2e\xef\x82\x86\x71\x2d\xee\x1d\x5f\x9d\x3a\x2a\x3f\xc4\xcd\x39\xbb\x1b\xfd\x1c\x2e\x3f\x4b\x08\xb7\xf4\xc5\xc7\xed\x91\x93\x8d\x88\xff\x46\x3d\xe8\xe1\x90\x1b\xb9\x56\xc8\x7a\x63\xa8\x3a\xe3\x3c\xc6\x77\xdb\x94\x96\x10\xe3\x8b\xb3\x04\xfa\x91\x5d\xe7\x41\xef\x8d\x34\xc3\x38\xe8\xbb\x56\x17\xd7\xda\xcf\x01\xef\xa1\x97\x6a\xf3\xe5\x47\x94\xcf\x32\xff\x87\xd9\x77\xd3\x60\x5c\x98\x84\xb3\xc6\x33\x0a\x4e\x41\xda\xa0\xa9\x26\x49\x66\xa4\x6c\xa6\x00\xed\xbc\x58\x47\x61\x0a\xd4\xca\x11\x61\x39\x49\xe1\x47\x36\xe5\xa7\xfb\xbe\x3e\xe0\xb7\x87\xfc\x37\x00\x00\xff\xff\xd6\x71\x90\x56\x4b\x05\x00\x00"

func httprouter_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_ifaceTmpl,
		"httprouter_iface.tmpl",
	)
}

func httprouter_ifaceTmpl() (*asset, error) {
	bytes, err := httprouter_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_iface.tmpl", size: 1355, mode: os.FileMode(0644), modTime: time.Unix(1583416914, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x45, 0x6d, 0x31, 0xc4, 0x22, 0x7b, 0xe2, 0x50, 0x76, 0xb2, 0x4b, 0x33, 0xf, 0x22, 0xb1, 0x37, 0xdc, 0x4f, 0xb8, 0x3, 0x67, 0x61, 0xc5, 0x64, 0xd6, 0x17, 0xf8, 0x6e, 0x54, 0xd0, 0x2b}}
	return a, nil
}

var _mux_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x3f\x6f\xdb\x3e\x10\xdd\xf5\x29\x0e\x9e\xa4\x20\x3f\x0a\xf8\x8d\x01\x32\x14\xf9\xd3\x64\x88\x93\x26\x29\x3a\x14\x1d\x68\xe9\x24\x13\x11\x49\x95\x3c\xba\x16\x08\x7e\xf7\x82\x94\xfc\x47\x31\x9a\xa5\x4b\xbd\x98\x3c\xde\xbb\xbb\xf7\xde\xd9\x65\x09\x57\xba\x46\x68\x51\xa1\xe1\x84\x35\xac\x06\x68\xf5\x7f\x52\x18\x06\xd7\x8f\xb0\x7c\x7c\x85\x9b\xeb\xfb\x57\x96\x65\x3d\xaf\xde\x78\x8b\xe0\x3d\xb0\xa7\xb7\x76\xc9\x25\x42\x08\x59\x26\x64\xaf\x0d\x41\x9e\x01\x00\x2c\x14\x52\xb9\x26\xea\x17\xd9\x78\x6f\x05\xad\xdd\x8a\x55\x5a\x96\xbc\x13\x72\x28\xa5\x30\xe5\xe6\xff\xc5\xc9\x6b\xab\x8d\xe8\x3a\x5e\x4a\xb7\x5d\x64\x45\x96\x79\x2f\x1a\x50\x9a\x6e\x64\x4f\xc3\x0b\x19\x60\x57\x5a\x4a\x54\x14\x9b\x96\x25\x78\xbf\x0b\x84\x90\x79\x8f\xaa\x0e\x21\xa3\xa1\x8f\x03\xb2\xd7\xa1\xc7\x38\x60\x08\x20\x14\xa1\x69\x78\x85\xe0\xc7\x9a\xec\xde\x2e\x11\xeb\xab\x35\x17\x2a\x84\x34\x47\x54\x21\x5e\xa1\x37\x7a\x23\x6a\x04\x29\xea\xba\xc3\x5f\xdc\xa0\x85\x46\x1b\x90\x6e\x9b\x12\x53\x56\x5e\xc0\xf7\x1f\xd2\x6d\xd9\xc3\x3e\xeb\xd6\xa9\x6a\x3f\x84\xf7\x86\xab\x16\x81\xdd\x0a\xec\x6a\x3b\xf5\x48\xbd\x97\x13\x9f\x19\x99\x69\x82\x19\xa1\x11\x31\xd6\x1b\xcf\xec\x01\x69\xad\xeb\x91\x55\x1e\x25\x66\xcf\x68\x7b\xad\x2c\x7e\x33\x82\xd0\x9c\xc3\xd9\x14\xfd\xe9\xd0\x52\xb1\x9f\x27\x64\x51\xaf\x67\x6c\x85\x25\x34\x33\x75\x5e\xd0\x6c\xb8\x22\x30\xd3\xe3\x3b\xed\xec\xf4\x4c\x3a\x29\xd0\x38\x55\x7d\x58\x27\x37\x70\x16\x85\x79\xd6\x2e\x0d\x64\xe7\xf5\x8a\x9d\x05\x33\x5b\x3f\x1b\xed\xfa\x9d\x0e\x26\x21\xe1\xe2\x12\x0c\x7b\xe2\xb4\x7e\x32\xd8\x88\x6d\xee\xc7\xac\x50\xb0\x17\xb7\x1a\x73\xf2\x44\xb0\xb3\x78\x8a\x3c\x72\xe2\x8f\x7e\x3b\x8b\x50\x25\xcf\xa3\xbf\x23\x38\xbd\x1d\x5b\x7f\x71\x09\x96\x4d\x9e\x1f\x35\x61\x5f\x2d\xe6\x47\x79\x8c\xb1\x83\xda\xbb\x06\x7b\x49\x13\xc6\x82\x50\x8d\x8e\x42\x4e\xad\x3e\x58\x12\xa5\xe9\x8e\xa8\xff\xa4\x06\x60\xf1\x30\x1a\x3f\x57\x88\xdd\x71\x55\x77\x69\xef\x72\xef\x93\x54\x21\x9c\x83\x65\xef\x16\xa5\x60\x09\x14\x3f\x63\xd8\xc6\xf4\x43\xd5\x10\x8a\x53\x47\xee\xb4\xa5\x10\x0e\xc8\x78\x4f\xb0\x14\x2f\x26\xa6\x09\xb7\xe1\x9d\xa8\xf1\x8b\x43\x33\x00\x8b\x5f\x02\xed\x31\x74\x0a\xe5\xde\x0b\xd5\x74\x9c\x4e\x52\x8b\xf9\x96\x9f\x18\xfa\x17\x44\xe3\x7f\xd8\x81\x69\x72\xe9\xdf\xe2\x3a\xed\xe8\xee\x57\xfa\x3b\x00\x00\xff\xff\x14\x4d\x8c\x5f\x8c\x05\x00\x00"

func mux_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_ifaceTmpl,
		"mux_iface.tmpl",
	)
}

func mux_ifaceTmpl() (*asset, error) {
	bytes, err := mux_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_iface.tmpl", size: 1420, mode: os.FileMode(0644), modTime: time.Unix(1583416155, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0x6b, 0xd3, 0x49, 0xfd, 0xb6, 0x7c, 0xfb, 0x70, 0xe4, 0x3b, 0x2d, 0xf0, 0x8, 0xeb, 0x3f, 0x9, 0x6f, 0x97, 0x38, 0xe6, 0x66, 0x7f, 0xf7, 0x4a, 0xe6, 0xca, 0xb5, 0xe4, 0x82, 0x67, 0xd4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"chi_iface.tmpl":        chi_ifaceTmpl,
	"gin_iface.tmpl":        gin_ifaceTmpl,
	"httprouter_iface.tmpl": httprouter_ifaceTmpl,
	"mux_iface.tmpl":        mux_ifaceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"chi_iface.tmpl":        {chi_ifaceTmpl, map[string]*bintree{}},
	"gin_iface.tmpl":        {gin_ifaceTmpl, map[string]*bintree{}},
	"httprouter_iface.tmpl": {httprouter_ifaceTmpl, map[string]*bintree{}},
	"mux_iface.tmpl":        {mux_ifaceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
