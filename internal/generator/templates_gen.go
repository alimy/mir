// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/chi_iface.tmpl (1.497kB)
// templates/gin_iface.tmpl (1.016kB)
// templates/httprouter_iface.tmpl (1.486kB)
// templates/mux_iface.tmpl (1.531kB)

package generator

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _chi_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xc9\x6e\xdb\x30\x10\x86\xef\x7c\x8a\x81\x4f\x52\x91\x50\xf7\x00\x39\x14\xce\x7a\x88\x13\x38\x2e\x7a\x66\xa8\xb1\x44\xc4\x22\x55\x72\x94\xc0\x20\xf8\xee\x05\x29\x3a\x5e\xda\x34\x50\x4f\xf6\x90\xf3\xcf\xf2\xf1\x57\x55\xc1\xdc\xd4\x08\x0d\x6a\xb4\x82\xb0\x86\x97\x2d\x34\xe6\xbc\x53\x96\xc3\xd5\x23\x2c\x1e\x57\x70\x7d\x75\xbf\xe2\x8c\xf5\x42\xbe\x8a\x06\xc1\x7b\xe0\x4f\xaf\xcd\x42\x74\x08\x21\x30\xa6\xba\xde\x58\x82\x82\x01\x00\xcc\x34\x52\xd5\x12\xf5\x33\x36\xc6\x8d\xa2\x76\x78\xe1\xd2\x74\x55\x63\xce\x65\xab\x2a\xd9\xaa\x19\x2b\x19\xf3\x5e\xad\x41\x1b\xba\xee\x7a\xda\x3e\x93\x05\x3e\x37\x5d\x87\x9a\x20\x84\xaa\x02\xef\x77\x71\x08\xde\xa3\xae\x43\x60\xb4\xed\x63\x7f\xbe\xda\xf6\x18\xfb\x87\x00\x4a\x13\xda\xb5\x90\x08\x7e\xac\xc8\xef\xdd\x02\xb1\x9e\xb7\x42\xe9\x10\xe2\x0c\x71\xc7\x18\x41\x6f\xcd\x9b\xaa\x11\x3a\x55\xd7\x1b\x7c\x17\x16\x1d\xac\x8d\x05\xd9\xaa\x34\x6c\xca\x2a\xca\x18\xf3\x87\x7d\x0e\xdb\xb5\xf7\xde\x0a\xdd\x20\xf0\x1b\x85\x9b\xda\xc5\xb9\x3e\x5f\x21\x77\x3e\x5c\x23\x35\xf1\x9e\x3f\x20\xb5\xa6\x1e\x17\x28\x22\x2c\xbe\x44\xd7\x1b\xed\xf0\xa7\x55\x84\xf6\x0c\xbe\xe5\xd3\x5f\x03\x3a\x2a\xbd\xc7\x8d\xc3\xb1\xe4\xff\xc9\xf3\xf8\xe3\x6f\x60\xac\xaa\x60\x89\x8d\x72\x84\xf6\x08\xe7\x33\xda\x37\xa1\x09\x6c\xbe\x3c\x81\xed\xf2\x35\x99\xc4\x6c\x3d\x68\xf9\xcf\x3a\x45\x62\xcb\x97\x66\x48\x63\xb9\xe3\x72\xe5\xee\xc9\x8e\x08\xde\x5a\x33\xf4\x99\x9f\x4d\x42\xb8\xb8\x4c\x65\x16\xf8\x3e\x56\x2a\xca\x44\xd2\xf2\x07\x33\x68\x2a\x66\xde\x8f\xaa\x10\x66\x67\x59\x73\xc4\x6c\x5f\xc6\xee\x59\xfc\x61\x15\x96\x5f\x6c\x70\x08\x32\xf9\x25\x7a\x63\xd4\xa6\xbb\x43\xdb\x5c\x5c\x82\xe3\xd9\x2f\x6c\xdf\x83\xff\x70\x58\x1c\xe4\x71\xce\xcb\x0f\xee\xb9\xfe\x07\xdb\x24\x71\xa0\xf4\xda\x44\xa2\xb9\xd3\xa7\x26\xbb\x23\xea\xbf\xeb\x2d\xf0\xf8\x67\xf4\xc0\x11\xa6\xec\x8b\x9b\x41\xcb\x84\x64\x9f\x96\xb8\xc4\xa3\x27\x41\x6d\x0a\x1c\x3f\xf1\xd1\x5f\x78\xf1\x3b\x14\x75\xf1\x85\xec\x70\xf7\x5b\xa4\x29\xe9\x4f\xc6\x4d\xcb\x1f\x26\xa5\x5f\xe1\x06\x09\x27\x35\x10\x24\xdb\x29\x82\xc7\x9e\x94\xd1\x6e\x8a\x64\x6e\xb4\x46\x39\x69\x91\x95\x15\xf2\xcb\x3d\x4e\xbe\xf1\xc0\x7e\x07\x00\x00\xff\xff\x5e\x2b\x45\xbf\xd9\x05\x00\x00"

func chi_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_ifaceTmpl,
		"chi_iface.tmpl",
	)
}

func chi_ifaceTmpl() (*asset, error) {
	bytes, err := chi_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_iface.tmpl", size: 1497, mode: os.FileMode(0644), modTime: time.Unix(1583562451, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0xa3, 0x16, 0x45, 0xdf, 0x78, 0x94, 0xb7, 0xa6, 0xfc, 0xb, 0x7c, 0x1d, 0xb9, 0xc1, 0xd2, 0xb2, 0x4b, 0xcf, 0xab, 0x4f, 0xec, 0x3e, 0x3d, 0xc1, 0x30, 0xe0, 0xca, 0xd6, 0x9e, 0xb6, 0xaa}}
	return a, nil
}

var _gin_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xc1\x6e\xdb\x30\x0c\x86\xef\x7a\x0a\x22\x27\x67\x68\xe5\xfb\x80\x1d\x8a\x34\x5b\x7b\x58\x5a\xac\xd9\x03\xa8\x16\x2d\x0b\x8d\x29\x43\x92\xbb\x19\x82\xde\x7d\x90\xac\x34\x71\xb6\xae\x27\x53\x34\xc9\x9f\xfc\xc8\xba\x86\x8d\x91\x08\x0a\x09\xad\xf0\x28\xe1\x79\x02\x65\xae\x7b\x6d\x39\xdc\x3e\xc0\xee\x61\x0f\xdb\xdb\xfb\x3d\x67\x6c\x10\xcd\x8b\x50\x08\x21\x00\x7f\x7c\x51\x3b\xd1\x23\xc4\xc8\x98\xee\x07\x63\x3d\x54\x0c\x00\x60\xa5\xb4\xef\xc6\x67\xde\x98\xbe\x56\x9a\xae\x95\x21\xdd\x24\x6b\xc5\xd6\x8c\x85\xa0\x5b\x20\xe3\xb7\xfd\xe0\xa7\x27\x6f\x81\x6f\x4c\xdf\x23\x79\x88\xb1\xae\x21\x84\xe3\x3b\xc6\x10\x90\x64\x8c\xcc\x4f\x43\x92\xe4\xfb\x69\xc0\x24\x19\x23\x68\xf2\x68\x5b\xd1\x20\x84\xb9\x22\xbf\x77\x3b\x44\xb9\xe9\x84\xa6\x5c\x28\x5b\x30\x58\xf3\xaa\x25\x42\x27\x48\x1e\xd0\x3a\x68\xb2\xbb\x35\x16\x94\xa6\xdc\x6e\x0e\xac\xd6\xe9\xcd\xef\x4a\x58\xf6\xb1\xa3\x7e\x08\x56\x90\x42\xe0\x5f\x35\x1e\xa4\x4b\x8d\xbd\x3f\x43\x2a\x79\x31\x47\x96\x09\x81\x7f\x47\xdf\x19\x39\x4f\x50\x7d\x4a\x7a\x1b\x43\x1e\x7f\xfb\x75\x08\x78\x70\x38\x27\x7f\x14\x58\x5a\x9a\xbf\x91\xb1\xba\x86\x1f\xa8\xb4\xf3\x68\x17\x8c\x9e\xd0\xbe\x0a\xf2\x60\xcb\xcf\x0b\x82\xae\xfc\xf6\x26\x93\x68\x47\x6a\xfe\x5b\xa7\x42\xc8\x9d\x6c\x49\x69\xc2\x2b\x70\xcb\x7a\xeb\xe3\x22\x16\x58\xbe\x59\x33\x0e\x05\x8a\x35\x63\xea\xe2\xf3\x17\xc0\xd9\x5f\xad\x42\x98\xad\x18\x57\x0b\x04\x67\xa1\xa7\x81\xff\x5a\x72\x21\x3d\x3a\x3c\xdb\xea\x9c\x9a\x89\xf7\x5a\xca\x03\xfe\x12\x16\x5d\x2a\xe5\x78\xd9\x34\x3b\x49\xf0\x9f\x0e\xab\xb3\x38\xce\xf9\xfa\x8d\x6d\xa9\xff\xc6\x2f\xa7\x38\xd0\xd4\x9a\x44\xad\x28\xbd\x7b\x1c\x77\xde\x0f\x37\x34\x01\x4f\xc6\xbc\xd1\x05\x89\x72\x6c\x99\xc2\x29\x24\xc6\xd5\x15\x24\xd7\xa3\xf0\x5d\x7e\x38\x7e\x71\x11\xff\x40\xc5\x6f\x68\xaa\x3e\xce\x3a\x3f\x9d\xc8\xfe\x04\x00\x00\xff\xff\xc1\xb2\xdb\x4a\xf8\x03\x00\x00"

func gin_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_ifaceTmpl,
		"gin_iface.tmpl",
	)
}

func gin_ifaceTmpl() (*asset, error) {
	bytes, err := gin_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_iface.tmpl", size: 1016, mode: os.FileMode(0644), modTime: time.Unix(1583562451, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0xa2, 0x8d, 0xfa, 0xb3, 0x28, 0x69, 0xac, 0x40, 0x74, 0x30, 0x31, 0x3f, 0x65, 0x9d, 0x8, 0xae, 0x59, 0xc7, 0x80, 0x8f, 0x84, 0x9d, 0x19, 0x43, 0x1b, 0x73, 0xb6, 0x2c, 0xec, 0x7f, 0xee}}
	return a, nil
}

var _httprouter_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xc1\x6e\xdb\x30\x0c\x86\xef\x7a\x0a\xc2\xd8\x21\x19\x32\xf9\x19\x86\xa4\x6b\x76\x58\x13\xa4\x01\x76\x56\x6d\xc6\x56\x6b\x4b\x1a\x45\x0f\x30\x08\xbd\xfb\xe0\xd8\xd9\xd2\x00\x2d\xb0\xc2\x27\x99\xa6\xfc\xfd\x3f\x7f\xc2\x79\x0e\x6b\x5f\x22\x54\xe8\x90\x0c\x63\x09\x4f\x3d\x54\xfe\x4b\x6b\x49\xc3\x66\x07\x0f\xbb\x23\xdc\x6d\xbe\x1f\xb5\x52\xc1\x14\x2f\xa6\x42\x10\x01\xbd\x7f\xa9\x1e\x4c\x8b\x90\x92\x52\xb6\x0d\x9e\x18\x16\x0a\x00\x20\x73\xc8\x79\xcd\x1c\x32\x35\xd6\x95\xe5\xba\x7b\xd2\x85\x6f\xf3\xe7\xae\xb1\xe8\x62\x51\xb7\xb6\x1c\x2f\x91\xef\x18\x29\x53\x4b\xa5\x44\xec\x09\x9c\xe7\xbb\x36\x70\xff\xc8\x04\x7a\xed\xdb\x16\x1d\x43\x4a\x79\x0e\x22\x97\x3a\x25\x11\x74\x65\x4a\x8a\xfb\x30\xb8\xd1\xc7\x3e\xe0\xe0\x26\x25\xb0\x8e\x91\x4e\xa6\x40\x10\x25\x42\xc6\x55\x08\xfa\x9b\xc5\xa6\x8c\xc3\x77\x6f\x4b\x0c\x5e\x6f\x64\xce\xfe\x45\xf4\x0f\xe4\xda\x97\xa3\xc0\x62\x70\xad\x0f\x18\x83\x77\x11\x7f\x92\x65\xa4\x15\x7c\x9e\xde\xfe\xea\x30\xf2\x0a\xfe\x4d\xa6\xf7\x86\x4c\x1b\x97\x13\x0a\x9b\x88\xa3\xd4\x3c\xd8\x4b\x10\x97\x33\x29\x95\xe7\x70\xc0\xca\x46\x46\x7a\x95\xcc\x23\xd2\x6f\xe3\x18\x68\x6a\xde\xe4\x16\xa7\x36\xfb\x2b\x19\x75\xea\x5c\xf1\x2e\x6e\x41\xa3\xc9\xc9\xd6\xe1\x7c\xac\x20\xbe\xa6\x2f\xdf\x5b\xc6\x96\x39\x7c\x75\x3d\xe8\xe1\x61\xcc\x64\x5a\x07\xe9\xad\x71\x65\x83\x8b\x4c\xe4\xaa\x9b\x52\xb6\x82\x4c\xe4\xd9\x5b\xb7\x37\x5c\xc3\x27\x7d\x4f\xbe\x0b\xa0\x87\xea\xdc\x8d\xfa\x26\xdf\xe5\x75\xf6\x7f\xb9\xe7\x78\xc7\x6b\xf7\xc8\xff\x0f\x55\x6f\xd1\xf6\xdd\xac\x34\x1f\xe7\xc4\x6d\xb0\x41\xc6\x19\x81\x5b\x34\xe5\x9c\xe3\x1a\x2e\xea\x19\x79\xbb\xc0\xd6\xbb\x38\x23\x71\xed\x9d\xc3\x62\xce\x9d\x1c\xc9\x14\x1f\x58\xc9\xcd\xff\x9f\xd4\x9f\x00\x00\x00\xff\xff\xc5\xf9\xba\x0c\xce\x05\x00\x00"

func httprouter_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_ifaceTmpl,
		"httprouter_iface.tmpl",
	)
}

func httprouter_ifaceTmpl() (*asset, error) {
	bytes, err := httprouter_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_iface.tmpl", size: 1486, mode: os.FileMode(0644), modTime: time.Unix(1583562285, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0x4e, 0xdc, 0x83, 0x3b, 0xe7, 0x4c, 0x9a, 0x7, 0x4d, 0xc3, 0x91, 0x9b, 0x6e, 0x77, 0xfa, 0x30, 0xfa, 0xeb, 0x42, 0xe3, 0x19, 0x8a, 0x7d, 0x9c, 0xbe, 0x61, 0xae, 0xbe, 0x5a, 0xa8, 0x7c}}
	return a, nil
}

var _mux_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x39\x6f\xdb\x3e\x14\xdf\xf9\x29\x1e\x34\x49\x41\xfe\x14\xf0\x1f\x03\x64\x28\x72\x34\x19\x72\x34\x49\xd1\xa1\xe8\xc0\x58\x4f\x32\x1b\x91\x54\x79\xb8\x16\x08\x7e\xf7\x82\xa4\x6c\xcb\x36\xd2\xa1\x5d\x9a\x45\x21\xf9\xae\xdf\xf1\x5c\xd7\x70\xa1\x1a\x84\x0e\x25\x6a\x66\xb1\x81\xd7\x11\x3a\xf5\x9f\xe0\x9a\xc2\xe5\x03\xdc\x3f\xbc\xc0\xd5\xe5\xed\x0b\x25\x64\x60\x8b\x37\xd6\x21\x78\x0f\xf4\xf1\xad\xbb\x67\x02\x21\x04\x42\xb8\x18\x94\xb6\x50\x12\x00\x80\x42\xa2\xad\x97\xd6\x0e\x05\xc9\xe7\x8e\xdb\xa5\x7b\xa5\x0b\x25\x6a\xd6\x73\x31\xd6\x82\xeb\x7a\xf5\x7f\x71\xf4\xda\x29\xcd\xfb\x9e\xd5\xc2\xad\x0b\x52\x11\x52\xd7\xf0\xdd\x19\x0b\xce\x20\xb4\x4a\x43\x9c\xe8\x83\x1c\x41\xa0\x5d\xaa\x06\xac\x02\x8d\x1d\x37\x16\x35\x59\x31\x0d\xb1\xe7\x5d\x7a\x32\x70\x9e\x82\x6f\x76\x37\x84\x78\xcf\x5b\x90\xca\x5e\x89\xc1\x8e\xcf\x56\x03\xbd\x50\x42\xa0\xb4\x10\x42\x5d\x83\xf7\x9b\x73\x08\xde\xa3\x6c\x42\x20\x76\x1c\x22\x58\xfa\x32\x0e\x18\xc1\x86\x00\x5c\x5a\xd4\x2d\x5b\x20\xf8\x5c\x91\xde\x9a\x7b\xc4\xe6\x62\xc9\xb8\x0c\x01\x22\x9b\xf1\x5f\x18\xb4\x5a\xf1\x06\x41\xf0\xa6\xe9\xf1\x27\xd3\x68\x32\x08\xb7\x4e\xc0\x53\x54\x59\xc1\xd7\x6f\xc2\xad\xe9\xdd\x36\xea\xda\xc9\x05\xd9\x0c\xe0\xbd\x66\xb2\x43\xa0\xd7\x1c\xfb\xc6\xc4\xc9\xde\x07\x01\x00\x07\x38\x52\x23\xef\x69\xe6\x20\x23\x28\x23\x4d\xf4\x09\xcd\xa0\xa4\xc1\x2f\x9a\x5b\xd4\xa7\x70\x32\xdd\xfe\x70\x68\x6c\xe5\x3d\xf6\x26\xa2\xfd\xb3\xdc\x69\xf4\xfc\x0d\x49\xc7\xa7\x49\xa8\x3d\x32\x9f\x51\xaf\x98\xb4\x5b\x15\x0f\xa8\x36\xd3\xb3\x55\x89\xb4\xd6\xc9\xc5\x6f\xeb\x94\x1a\x4e\x22\x97\x4f\xca\xa5\xb9\xcc\x7e\xbd\x6a\xa3\xd8\x1e\x7d\x1f\xb5\x72\x43\x26\x0f\x74\x4a\x84\xb3\x73\xd0\xf4\x91\xd9\xe5\xa3\xc6\x96\xaf\xcb\xc2\xfb\x1c\x16\x42\x51\xd1\x67\xf7\x9a\xe3\xca\x1d\x4d\xfb\xb9\x33\xf5\x8e\xfd\x91\x45\x8a\x8e\x5e\x24\x9b\x44\x4b\xe4\xdc\x24\xd6\xdc\x2d\x67\xe7\x60\xe8\x64\x13\xb2\xeb\x41\x3f\x1b\x2c\x67\x71\x94\xd2\x6a\xdb\x92\x4c\x0d\xb6\x94\xa6\x1c\x03\x5c\xb6\x2a\x2d\x4c\x6e\xf5\xae\xaf\xe2\xc6\xc4\x15\x9b\xad\xce\x1e\x39\xf4\x86\xc9\xa6\x4f\x26\x4d\xbc\x44\x9a\x42\x28\x4e\xc1\xd0\x03\xaf\x54\x34\xcd\x12\xff\xa6\x15\x4c\x09\xbb\xba\x91\xcd\x63\x3d\x6e\x94\xb1\x21\xec\x72\xe3\x39\x27\xa6\x87\x62\xe3\xaf\x94\xb9\x62\x3d\x6f\xf0\x93\x43\x3d\x02\x8d\x1f\x8e\x66\x9e\x3c\x5d\x95\xde\x73\xd9\xf6\xcc\x1e\x85\xee\xaa\x1d\x2a\xf9\x57\x40\x67\xbf\x44\x51\x9d\x7f\x08\xe5\x7c\x35\x03\xf9\x15\x00\x00\xff\xff\x85\x3c\xb5\x87\xfb\x05\x00\x00"

func mux_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_ifaceTmpl,
		"mux_iface.tmpl",
	)
}

func mux_ifaceTmpl() (*asset, error) {
	bytes, err := mux_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_iface.tmpl", size: 1531, mode: os.FileMode(0644), modTime: time.Unix(1583562451, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0x67, 0xbd, 0x55, 0x80, 0xf0, 0x26, 0x8a, 0xa2, 0x66, 0x58, 0x28, 0xa8, 0xa, 0xb1, 0xf6, 0xb7, 0xed, 0xe2, 0x33, 0xdb, 0xfb, 0x3e, 0x41, 0x7b, 0x35, 0x46, 0x6f, 0x1d, 0x5d, 0x4b, 0xe4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"chi_iface.tmpl":        chi_ifaceTmpl,
	"gin_iface.tmpl":        gin_ifaceTmpl,
	"httprouter_iface.tmpl": httprouter_ifaceTmpl,
	"mux_iface.tmpl":        mux_ifaceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"chi_iface.tmpl":        {chi_ifaceTmpl, map[string]*bintree{}},
	"gin_iface.tmpl":        {gin_ifaceTmpl, map[string]*bintree{}},
	"httprouter_iface.tmpl": {httprouter_ifaceTmpl, map[string]*bintree{}},
	"mux_iface.tmpl":        {mux_ifaceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
