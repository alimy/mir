// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/chi_iface.tmpl (1.445kB)
// templates/gin_iface.tmpl (997B)
// templates/httprouter_iface.tmpl (1.358kB)
// templates/mux_iface.tmpl (1.423kB)

package generator

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _chi_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4b\x6f\xe3\x3c\x0c\xbc\xeb\x57\x10\x3d\xd9\x1f\x5a\xf9\x5e\xa0\x87\x0f\x49\x5f\x87\x3c\x90\x66\xb1\x67\x55\x66\x6c\xa1\xb1\xe4\x95\xe8\x16\x81\xa0\xff\xbe\x90\x6c\x37\x8f\xc5\x66\x93\x9b\x68\xce\x0c\xc9\x21\x5d\x14\x30\x31\x25\x42\x85\x1a\xad\x20\x2c\xe1\x7d\x07\x95\xb9\x6b\x94\xe5\x30\x5d\xc0\x7c\xb1\x86\xc7\xe9\xeb\x9a\x33\xd6\x0a\xf9\x21\x2a\x04\xef\x81\x2f\x3f\xaa\xb9\x68\x10\x42\x60\x4c\x35\xad\xb1\x04\x19\x03\x00\xb8\xd1\x48\x45\x4d\xd4\xde\xb0\x3e\xae\x14\xd5\xdd\x3b\x97\xa6\x29\x2a\x73\x27\x6b\x55\xc8\x5a\xdd\xb0\x9c\x31\xef\xd5\x06\xb4\xa1\xc7\xa6\xa5\xdd\x1b\x59\xe0\x13\xd3\x34\xa8\x09\x42\x28\x0a\xf0\x7e\x8c\x43\xf0\x1e\x75\x19\x02\xa3\x5d\x1b\xeb\xf3\xf5\xae\xc5\x58\x3f\x04\x50\x9a\xd0\x6e\x84\x44\xf0\xbd\x22\x7f\x75\x73\xc4\x72\x52\x0b\xa5\x43\x48\x4d\xc4\x21\x63\x08\xad\x35\x9f\xaa\x44\x68\x54\x59\x6e\xf1\x4b\x58\x74\xb0\x31\x16\x64\xad\x12\x30\xa1\xb2\x3c\xc6\x7c\xb6\xc7\xb0\xb1\xbe\xf7\x56\xe8\x0a\x81\x3f\x29\xdc\x96\x6e\x90\x3f\x37\xc8\x58\xff\x70\x9a\x81\xd4\x4b\xf6\x6f\x3e\x43\xaa\x4d\xd9\xcf\x94\x45\xff\xf8\x0a\x5d\x6b\xb4\xc3\x9f\x56\x11\xda\x5b\xf8\x6f\xf8\xfa\xab\x43\x47\xf9\x77\x4b\x81\xb1\xa2\x80\x15\x56\xca\x11\xda\x23\x6f\xde\xd0\x7e\x0a\x4d\x60\x87\xe4\x89\x73\x6e\x48\x93\x49\xf3\x6f\x3a\x2d\xcf\xea\x64\xc9\x27\xbe\x32\x5d\xea\xc7\x1d\xcb\xe5\xa3\xff\x47\x46\x3c\x5b\xd3\xb5\xa3\x0d\x36\x31\xe1\xfe\x21\xe9\xcc\xf1\xab\x97\xca\xf2\x3e\xcb\x67\xa6\xd3\x94\x79\xdf\xb3\x42\xb8\x1d\x18\x69\xd8\xad\xc3\x3f\x64\xec\xc1\x62\xfe\xba\xf9\xce\x21\xc8\xb4\xfd\xb8\xe9\x9e\x9c\x72\x87\x47\x70\xff\x00\x8e\x0f\xdb\x3f\x28\xc2\x7f\x38\xcc\x0e\x70\x9c\xf3\xbd\xf3\x63\x81\x6f\x7b\x13\xc7\x81\xd2\x1b\x13\x4d\x1d\x4a\x9d\xbf\x99\x17\xa2\xf6\x7f\xbd\x03\x1e\x1f\xfd\x11\x1c\xdb\x35\x5c\xc6\x53\xa7\x65\xb4\x66\x0f\x8b\xfe\x78\xcf\x97\x82\xea\xf8\x74\xfc\xe4\x8a\xf2\xf1\xcc\x4e\x9d\xe3\x2f\x28\xca\xec\xdf\xd4\x01\xfd\x8c\x74\x39\x78\x69\xdc\x35\xe8\xee\x0a\xf0\x14\xb7\x48\x78\x85\xb8\x20\x59\x5f\x0e\x5f\xb4\xa4\x8c\x76\x97\x13\x26\x46\x6b\x94\x57\x0c\xb0\xb6\x42\x5e\xd2\xff\xfe\xa6\xc7\x3f\xfc\x77\x00\x00\x00\xff\xff\xc0\xae\x01\x96\xa5\x05\x00\x00"

func chi_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_ifaceTmpl,
		"chi_iface.tmpl",
	)
}

func chi_ifaceTmpl() (*asset, error) {
	bytes, err := chi_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_iface.tmpl", size: 1445, mode: os.FileMode(0644), modTime: time.Unix(1583515288, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6f, 0x3a, 0xe1, 0xf0, 0x63, 0x32, 0x9b, 0xc5, 0x46, 0x5, 0xa0, 0x8c, 0x43, 0xab, 0x87, 0xaf, 0x28, 0x32, 0x55, 0x97, 0xa7, 0xd3, 0xad, 0x7, 0x68, 0xd2, 0x8e, 0x7f, 0x78, 0x3d, 0xb2, 0x23}}
	return a, nil
}

var _gin_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xc1\x6e\xdb\x30\x0c\xbd\xeb\x2b\x88\x9e\xec\xa1\x95\xef\x03\x76\x28\xd2\x6c\xed\x61\x69\xb1\x66\x1f\xa0\x5a\xb4\x2c\x34\xa6\x0c\x49\xee\x66\x08\xfa\xf7\x41\xb2\xdc\x26\x2d\x16\x0c\xbb\x51\xe2\x23\x1f\xdf\x23\x9b\x06\x36\x46\x22\x28\x24\xb4\xc2\xa3\x84\xa7\x19\x94\xb9\x1a\xb4\xe5\x70\x73\x0f\xbb\xfb\x3d\x6c\x6f\xee\xf6\x9c\xb1\x51\xb4\xcf\x42\x21\x84\x00\xfc\xe1\x59\xed\xc4\x80\x10\x23\x63\x7a\x18\x8d\xf5\x50\x31\x00\x80\x0b\xa5\x7d\x3f\x3d\xf1\xd6\x0c\x8d\xd2\x74\xa5\x0c\xe9\x36\x45\x17\xac\x66\x2c\x04\xdd\x01\x19\xbf\x1d\x46\x3f\x3f\x7a\x0b\x7c\x63\x86\x01\xc9\x43\x8c\x4d\x03\x21\xac\xef\x18\x43\x40\x92\x31\x32\x3f\x8f\x89\x92\xef\xe7\x11\x13\x65\x8c\xa0\xc9\xa3\xed\x44\x8b\x10\x96\x8e\xfc\xce\xed\x10\xe5\xa6\x17\x9a\x62\xcc\x73\x24\x5d\xe9\x09\xa3\x35\x2f\x5a\x22\xf4\x82\xe4\x01\xad\x83\x36\x7f\x77\xc6\x82\xd2\x94\xb1\x19\x58\xd5\xe9\xcd\x6f\x0b\x2c\xff\xb1\x75\x88\x10\xac\x20\x85\xc0\xbf\x6a\x3c\x48\x57\x38\xfe\x43\xcd\x52\xc6\xbf\xa3\xef\x8d\x5c\xe4\x54\x9f\x12\xef\xc6\x90\xc7\xdf\xbe\x7e\xa5\x8c\x8c\x35\x0d\xfc\x40\xa5\x9d\x47\x7b\x62\xc0\x23\xda\x17\x41\x1e\x6c\x49\xbe\xb3\xc7\x95\xb4\x37\x59\x61\x37\x51\x7b\xb6\x4f\x85\x90\x47\xd8\x92\xd2\x84\x97\xe0\x4e\xfb\xd5\xab\xcb\x27\x4a\xbf\x59\x33\x8d\x50\x14\x59\x33\xa5\x31\x3e\x7f\x01\x5c\x12\x55\x08\x4b\x10\x63\x56\x74\x70\xf8\x11\x7a\xe4\xee\x5f\x77\x38\x39\x3c\x5a\xd8\x52\x9c\x73\x83\x96\xf2\x80\xbf\x84\x45\x97\x9a\x39\x5e\x96\x78\x44\xc2\x7f\x3a\xac\x8e\x70\x9c\xf3\x37\x7b\x57\x82\x57\x0f\x73\x8d\x03\x4d\x9d\x49\xce\x15\xaa\xf3\x8b\xbf\xf5\x7e\xbc\xa6\x19\x78\x0a\x96\x9d\x9e\x5a\x52\xce\x29\xd9\xf1\x06\x89\xf1\x32\x39\xfc\x20\x7c\x9f\x42\xc7\xdf\x1d\x44\x5d\x38\x3e\xb8\xc6\xaf\x69\xae\xfe\xa9\xb2\xd8\xba\x5e\xd2\x9f\x00\x00\x00\xff\xff\x0e\xa1\x1e\xdc\xe5\x03\x00\x00"

func gin_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_ifaceTmpl,
		"gin_iface.tmpl",
	)
}

func gin_ifaceTmpl() (*asset, error) {
	bytes, err := gin_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_iface.tmpl", size: 997, mode: os.FileMode(0644), modTime: time.Unix(1583515288, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xf6, 0xdb, 0x66, 0xf9, 0x71, 0xec, 0x50, 0x61, 0xf4, 0xd, 0x14, 0x7d, 0xa5, 0xd3, 0x59, 0x32, 0xfe, 0xc0, 0x15, 0x33, 0xfa, 0xea, 0xb3, 0xb0, 0x2e, 0x46, 0x52, 0x0, 0x2e, 0x35, 0xde}}
	return a, nil
}

var _httprouter_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xc1\x6e\xdb\x30\x0c\x86\xef\x7a\x0a\x22\xa7\x64\xc8\xe4\x67\x18\x92\xae\xd9\x61\x4d\x90\x06\xd8\x59\xb5\x19\x5b\xad\x4d\x69\x14\x3d\xc0\x10\xf4\xee\x83\xa3\x64\x6d\x83\xa1\x45\x00\x9f\x2c\x93\xd4\xc7\xff\xff\x01\x15\x05\xac\x5c\x85\x50\x23\x21\x1b\xc1\x0a\x9e\x06\xa8\xdd\xd7\xce\xb2\x86\xf5\x16\x1e\xb6\x07\xb8\x5b\xff\x38\x68\xa5\xbc\x29\x5f\x4c\x8d\x10\x23\xe8\xdd\x4b\xfd\x60\x3a\x84\x94\x94\xb2\x9d\x77\x2c\x30\x57\x00\x00\x33\x42\x29\x1a\x11\x3f\x53\xf9\xbf\xb6\xd2\xf4\x4f\xba\x74\x5d\xf1\xdc\xb7\x16\x29\x94\x4d\x67\xab\x3c\xc4\xae\x17\xe4\x99\x5a\x28\x15\xa3\x3d\x02\x39\xb9\xeb\xbc\x0c\x8f\xc2\xa0\x57\xae\xeb\x90\x64\xdc\x51\x14\x10\xe3\xa5\x90\x92\x8a\x11\xa9\x4a\x49\xc9\xe0\x47\x3d\xfa\x30\x78\x1c\xf5\xa4\x04\x96\x04\xf9\x68\x4a\x84\xa8\x62\x64\x43\x35\x82\xfe\x6e\xb1\xad\x42\x4a\x27\x49\x1f\x6e\x1a\x07\xae\xb7\xe5\x4b\x79\x63\x3e\xeb\x9f\x28\x8d\xab\xf2\xca\xf9\xe8\x44\xef\x31\x78\x47\x01\x7f\xb1\x15\xe4\x25\x7c\x39\x57\x7f\xf7\x18\x64\x09\xaf\x6e\xf5\xce\xb0\xe9\xc2\xe2\x9f\x89\xa4\x46\x7f\x7b\xac\x6d\x10\xe4\x77\x6e\x1e\x91\xff\x18\x12\xe0\x73\xf3\xca\x6b\x38\xb7\xc5\xbd\xe1\xab\x63\x4f\xe5\x87\xb8\x39\x67\x75\x67\x3d\xfb\xd3\x67\x09\xe1\x3d\x7d\xf1\x69\x80\x1b\x11\xff\x8d\x06\xd0\xe3\x21\x27\x72\x89\x90\xf5\xc6\x50\xd5\xe2\x3c\xc6\x37\xdd\x94\x96\x10\xe3\xb3\xb3\x04\xfa\x9e\x5d\xef\x41\xef\x8c\x34\x63\x39\xe8\xab\x54\x17\x97\xd8\xdb\x80\xd7\xd0\x53\xb4\x79\xf8\x1e\xe5\x56\xe6\xff\x30\xbb\x7e\x1a\x8c\x0b\x93\x70\xd6\xd8\xa2\xe0\x14\xa4\x0d\x9a\x6a\x12\x67\x46\xca\x66\x0a\xd0\xd6\x8b\x75\x14\xa6\x40\xad\x1c\x11\x96\x93\x04\x7e\x60\x53\xde\x9c\xf7\xe5\x01\xbf\x3e\xe4\xbf\x01\x00\x00\xff\xff\x7a\xdc\x23\x21\x4e\x05\x00\x00"

func httprouter_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_ifaceTmpl,
		"httprouter_iface.tmpl",
	)
}

func httprouter_ifaceTmpl() (*asset, error) {
	bytes, err := httprouter_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_iface.tmpl", size: 1358, mode: os.FileMode(0644), modTime: time.Unix(1583512325, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0x48, 0x54, 0xf1, 0x45, 0x81, 0xe9, 0x27, 0x7, 0x4b, 0xf3, 0x37, 0x58, 0x77, 0xb4, 0x50, 0x45, 0xfa, 0x4, 0x14, 0xef, 0xe8, 0xbf, 0xaf, 0xe, 0xc8, 0x6d, 0xdf, 0x22, 0x1f, 0x77, 0xa7}}
	return a, nil
}

var _mux_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4b\x6f\xdb\x3c\x10\xbc\xf3\x57\x2c\x7c\x92\x82\x7c\x14\xf0\x1d\x03\xe4\x50\xe4\xd1\xe4\x90\xc4\xb5\x5d\xf4\x50\xf4\x40\x4b\x2b\x99\x88\x48\xaa\x7c\xb8\x16\x08\xfe\xf7\x82\x94\xfc\x50\x8c\xfa\xd2\x4b\x7d\x31\xb9\xdc\xd9\xdd\x99\x59\xbb\x28\xe0\x4e\x55\x08\x0d\x4a\xd4\xcc\x62\x05\xeb\x1e\x1a\xf5\x9f\xe0\x9a\xc2\xfd\x1b\xbc\xbe\xad\xe0\xe1\xfe\x79\x45\x09\xe9\x58\xf9\xce\x1a\x04\xef\x81\xce\xdf\x9b\x57\x26\x10\x42\x20\x84\x8b\x4e\x69\x0b\x19\x01\x00\x98\x49\xb4\xc5\xc6\xda\x6e\x46\x86\x7b\xc3\xed\xc6\xad\x69\xa9\x44\xc1\x5a\x2e\xfa\x42\x70\x5d\x6c\xff\x9f\x9d\xbd\x36\x4a\xf3\xb6\x65\x85\x70\xbb\x19\xc9\x09\xf1\x9e\xd7\x20\x95\x7d\x10\x9d\xed\x97\x56\x03\xbd\x53\x42\xa0\xb4\xb1\x69\x51\x80\xf7\xfb\x40\x08\xc4\x7b\x94\x55\x08\xc4\xf6\x5d\x1c\x90\xae\xfa\x0e\xe3\x80\x21\x00\x97\x16\x75\xcd\x4a\x04\x3f\xd4\xa4\xcf\xe6\x15\xb1\xba\xdb\x30\x2e\x43\x48\x73\x44\x15\xe2\x15\x3a\xad\xb6\xbc\x42\x10\xbc\xaa\x5a\xfc\xc5\x34\x1a\xa8\x95\x06\xe1\x76\x29\x31\x65\x65\x39\x7c\xff\x21\xdc\x8e\xbe\x1c\xb2\x1e\x9d\x2c\x0f\x43\x78\xaf\x99\x6c\x10\xe8\x23\xc7\xb6\x32\x63\x8f\x8b\x7c\xc6\x21\x26\x9c\x06\xd0\x50\x72\x38\xd3\x17\xb4\x1b\x55\x0d\xc4\xb2\xa8\x32\x5d\xa0\xe9\x94\x34\xf8\x4d\x73\x8b\xfa\x1a\xae\xc6\xe8\x4f\x87\xc6\xe6\x87\x91\x02\x89\x92\x2d\xb0\xe1\xc6\xa2\x9e\x08\xb4\x44\xbd\x65\xd2\x82\x1e\x1f\x3f\xc8\x67\xc6\x67\xab\x92\x08\xb5\x93\xe5\xc5\x3a\x99\x86\xab\xa8\xcd\x42\xb9\x34\x90\x99\xd6\xcb\xf7\x2e\x4c\x94\xf8\xac\x95\xeb\xf6\x3a\xe8\x84\x84\x9b\x5b\xd0\x74\xce\xec\x66\xae\xb1\xe6\xbb\xcc\x0f\x59\x21\xa7\x4b\xb7\x1e\x72\xb2\x44\xb0\x35\x78\x8e\x3c\x31\xe3\x8f\x96\x3b\x83\x50\x26\xdb\xa3\xc5\x03\x38\xbd\x9d\xba\x7f\x73\x0b\x86\x8e\xb6\x9f\x34\xa1\x5f\x0d\x66\x27\x79\x94\xd2\xa3\xda\xfb\x06\x07\x49\x13\xc6\x00\x97\xb5\x8a\x42\x8e\xad\x2e\xef\xc9\x93\xb5\xdd\x27\xd9\x03\x8d\x87\xc1\xf8\xa9\x42\xf4\x89\xc9\xaa\x4d\xab\x97\x79\x9f\xa4\x0a\xe1\x1a\x0c\xfd\xb0\x28\x39\x4d\xa0\xf8\x19\xc2\x26\xa6\x1f\xab\x86\x90\x9f\x3b\xf2\xa4\x8c\x0d\xe1\x88\x8c\xf7\x04\x4b\xf1\x7c\x64\x9a\x70\x5b\xd6\xf2\x0a\xbf\x38\xd4\x3d\xd0\xf8\xc5\xd1\x9c\x42\xc7\x50\xe6\x3d\x97\x75\xcb\xec\x59\x6a\x3e\xdd\xf2\x33\x43\xff\x82\x68\xfc\x1b\x3b\x32\x4d\x2e\xfd\x5b\x5c\xc7\x1d\xdd\xff\x4a\x7f\x07\x00\x00\xff\xff\x41\x7a\x4f\xca\x8f\x05\x00\x00"

func mux_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_ifaceTmpl,
		"mux_iface.tmpl",
	)
}

func mux_ifaceTmpl() (*asset, error) {
	bytes, err := mux_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_iface.tmpl", size: 1423, mode: os.FileMode(0644), modTime: time.Unix(1583512325, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0xae, 0xfe, 0x3b, 0xa9, 0x1b, 0x2a, 0x64, 0xbd, 0x6c, 0x59, 0x52, 0xfa, 0xe, 0x1, 0x5f, 0x46, 0x7e, 0x45, 0x78, 0xd4, 0x29, 0xb2, 0x6, 0xb4, 0x9d, 0x5f, 0x79, 0x80, 0xb1, 0x67, 0x15}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"chi_iface.tmpl":        chi_ifaceTmpl,
	"gin_iface.tmpl":        gin_ifaceTmpl,
	"httprouter_iface.tmpl": httprouter_ifaceTmpl,
	"mux_iface.tmpl":        mux_ifaceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"chi_iface.tmpl":        {chi_ifaceTmpl, map[string]*bintree{}},
	"gin_iface.tmpl":        {gin_ifaceTmpl, map[string]*bintree{}},
	"httprouter_iface.tmpl": {httprouter_ifaceTmpl, map[string]*bintree{}},
	"mux_iface.tmpl":        {mux_ifaceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
