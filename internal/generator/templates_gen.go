// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/chi_iface.tmpl (1.604kB)
// templates/echo_iface.tmpl (1.116kB)
// templates/fiber_iface.tmpl (1.789kB)
// templates/fiber_iface_v2.tmpl (1.804kB)
// templates/gin_iface.tmpl (1.123kB)
// templates/httprouter_iface.tmpl (1.576kB)
// templates/iris_iface.tmpl (1.249kB)
// templates/macaron_iface.tmpl (1.761kB)
// templates/mux_iface.tmpl (1.641kB)

package generator

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _chi_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x4d\x6f\xe3\x2e\x10\xc6\xef\x7c\x8a\x91\x4f\xf6\x5f\x2d\xbe\x57\xea\xe1\xaf\xbe\x1f\xfa\xa2\x36\xab\x3d\x53\x3c\xb6\x51\x63\xf0\xc2\xb8\x55\x84\xf8\xee\x2b\xb0\xd3\x38\xdd\x64\x2b\xef\x29\x01\x66\x9e\x87\xe7\xc7\xb8\x2c\xe1\xc2\x54\x08\x0d\x6a\xb4\x82\xb0\x82\xd7\x0d\x34\xe6\xb4\x53\x96\xc3\xe5\x23\x3c\x3c\xae\xe0\xea\xf2\x6e\xc5\x19\xeb\x85\x7c\x13\x0d\x82\xf7\xc0\x9f\xde\x9a\x07\xd1\x21\x84\xc0\x98\xea\x7a\x63\x09\x72\x06\x00\x90\x69\xa4\xb2\x25\xea\x33\x96\xd6\xb2\x55\x90\x79\xaf\x6a\xd0\x86\xae\xba\x9e\x36\x2f\x64\x81\x5f\xe9\x46\x69\xbc\xd3\xb5\x99\x49\x45\xe1\x23\x07\xb8\x76\x18\x42\xa3\xa8\x1d\x5e\xb9\x34\x5d\xd9\x98\x53\xd9\xaa\x52\xb6\xca\x7b\xd4\x55\x08\x19\x2b\x18\xfb\xd3\xe8\xc2\x74\x1d\x6a\x82\x10\xca\x12\xbc\xdf\xae\x93\x66\x6c\x63\xb4\xe9\x63\x24\xbe\xda\xf4\x18\xed\x42\x00\xa5\x09\x6d\x2d\x24\x82\x3f\xa4\xd8\x0a\xa5\x21\x84\x98\x2e\xd2\x4b\xcb\xde\x9a\x77\x55\x21\x74\xaa\xaa\xd6\xf8\x21\x2c\x3a\xa8\x8d\x8d\xf1\x13\x86\xe8\x1c\x0b\x43\xc8\x8b\xb8\xc9\xef\x77\x85\x6c\x7b\x15\xef\xad\xd0\x0d\x02\xbf\x56\xb8\xae\x5c\xbc\xe3\xf1\x38\x93\xfd\x3c\xd2\xd6\xe9\x1e\xa9\x35\xd5\x18\x26\x8f\x6f\xc1\x9f\xd1\xf5\x46\x3b\xfc\x69\x15\xa1\x3d\x81\xff\xa6\xdd\x5f\x03\x3a\x2a\xb6\x78\xff\xbd\x7d\xba\xfe\xf8\x1b\x18\x2b\x4b\x78\xc6\x46\x39\x42\xbb\x87\xf6\x05\xed\xbb\xd0\x04\x76\x3a\xfc\x02\xde\x4d\xc7\x64\x12\xb8\x7a\xd0\xf2\xaf\x3a\x79\x02\xcc\x9f\xcd\x90\xae\xe5\xf6\xe5\x8a\x83\xcf\x77\x63\xcd\xd0\x4f\xfc\x6c\x6a\x84\xb3\xf3\x24\xf3\x80\x1f\xa3\x52\x5e\x24\x92\x96\xdf\x9b\x41\x53\x9e\x79\x3f\x76\x85\x90\x9d\x4c\x3d\x7b\xcc\x76\x32\x76\xc7\xe2\xd8\xd8\xb0\xe9\xe1\x06\x87\x20\xd3\x5e\x9c\x93\x51\x22\x9d\xcd\x47\xe8\xec\x1c\x1c\x9f\xcf\x0e\xdb\xf9\xf1\x1f\x0e\xf3\x59\x31\xe7\xbc\xf8\x7c\x83\xc9\xe4\x93\x73\x6a\x71\xa0\x74\x6d\x22\xdd\xc9\xee\xe8\xc0\xdd\x12\xf5\xff\xeb\x0d\xf0\xf8\x67\x9c\x87\x3d\x64\xd3\x8c\x5c\x0f\x5a\x26\x3c\xbb\xb2\xc4\x28\x6e\x3d\x09\x6a\xd3\x22\x05\x98\xcf\xd4\x01\x76\xfc\x16\x45\x95\x7f\xd3\x36\xcf\x7e\x83\xb4\xa4\xfc\xc9\xb8\x65\xf5\xc3\xa2\xf2\x4b\x5c\x23\xe1\x22\x03\x41\xb2\x5d\xd2\xf0\xd8\x93\x32\xda\x2d\x69\xb9\x30\x5a\xa3\x5c\x14\x64\x65\x85\xfc\x36\xc7\x97\xef\x3d\xb0\xdf\x01\x00\x00\xff\xff\x1d\xac\xcb\x35\x44\x06\x00\x00"

func chi_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_ifaceTmpl,
		"chi_iface.tmpl",
	)
}

func chi_ifaceTmpl() (*asset, error) {
	bytes, err := chi_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_iface.tmpl", size: 1604, mode: os.FileMode(0644), modTime: time.Unix(1602742933, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0xac, 0x24, 0x98, 0x7d, 0x9f, 0xab, 0x8f, 0xa1, 0x71, 0xe5, 0x3, 0x97, 0x86, 0x12, 0xec, 0x59, 0xe8, 0x5b, 0xc4, 0x6b, 0x4f, 0xe1, 0x3d, 0xc4, 0x37, 0x5b, 0x95, 0xfb, 0x9b, 0x66, 0x2a}}
	return a, nil
}

var _echo_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xbf\x6e\xdb\x30\x10\xc6\x77\x3e\xc5\xc1\x93\x54\xa4\xd4\xd2\xa9\x40\x87\xc0\x71\xda\x0c\xf9\x83\xc6\x9d\x8a\x0e\xb4\x78\x92\x08\x5b\xa4\x40\x9e\xdc\x0a\x04\xdf\xbd\x20\x25\x39\x72\x1a\xb7\x9d\x4c\xdd\x1d\xbf\xef\xee\x77\x74\x51\xc0\xda\x48\x84\x1a\x35\x5a\x41\x28\x61\x37\x40\x6d\xde\xb7\xca\x72\xb8\x79\x84\x87\xc7\x2d\x6c\x6e\xee\xb6\x9c\xb1\x4e\x94\x7b\x51\x23\x78\x0f\xfc\x69\x5f\x3f\x88\x16\x21\x04\xc6\x54\xdb\x19\x4b\x90\x31\x00\x00\x2c\x1b\x03\x2b\xef\x55\x05\xda\xd0\xa6\xed\x68\x78\x26\x0b\x7c\xa3\x6b\xa5\xf1\x4e\x57\x66\x71\x37\x2a\x5d\x48\xe0\xc1\x61\x08\xb5\xa2\xa6\xdf\xf1\xd2\xb4\xc5\x41\xec\x1c\x89\x72\x5f\x44\x87\xe2\xf8\xc1\x7b\xd4\x32\x84\x15\xcb\x19\xfb\xd3\x6e\x6d\xda\x16\x35\x41\x08\x45\x01\xde\xcf\xdf\x49\x39\x5e\x63\x34\x74\x71\x12\xbe\x1d\x3a\x8c\xa6\x21\x80\xd2\x84\xb6\x12\x25\x82\x7f\x4b\xb1\x11\x4a\x8f\x7a\xe3\xb1\xb3\xe6\xa8\x24\x42\x23\xb4\x3c\xa0\x75\x50\xa6\x70\x65\x6c\x82\x90\x68\x44\xe7\x18\x0d\x21\xcb\xe1\xfb\x8f\x18\xe7\xf7\x4a\xca\x03\xfe\x14\x16\x6f\x7b\x5d\xb2\xb9\x21\xef\xad\xd0\x35\x02\xbf\x55\x78\x90\x2e\x76\x7a\x79\xa8\xa8\xfd\x6a\xb0\xd9\xef\x1e\xa9\x31\x72\x1c\x29\x4b\x86\x6b\xa3\x09\x7f\x51\x0e\x68\xad\xb1\x33\xda\xff\x2f\x9f\xda\x1b\x7f\x03\x63\x45\x01\x5f\xb1\x56\x8e\xd0\x9e\x01\x7c\x46\x7b\x14\x9a\xc0\x4e\xc9\x57\x78\xdd\x94\x26\x33\xf2\xa9\x7a\x5d\xfe\x55\x28\x43\x78\x97\x3a\xda\x94\x8d\xb9\x02\x77\xae\x97\xbf\xb9\xa5\xcf\xd6\xf4\xdd\x04\xa8\x86\x8f\x9f\x00\xc7\x50\xb6\xf2\x7e\x3c\x85\xb0\xca\x97\x0c\xc6\xaa\x97\x31\x2f\xed\x7d\x42\xde\x3b\x5c\x2c\xda\x9a\x9e\xd0\x26\xf4\xed\x69\xad\x2e\x2a\x3a\xbe\xdc\x7d\xaa\xa8\xf9\x37\x87\xd9\xa2\x8e\x73\x9e\x9f\xc0\x4e\xfa\x27\x78\x49\xda\x81\xd2\x95\x89\xc8\x26\xa7\x8b\xaf\xe4\x0b\x51\x77\xad\x07\xe0\xf1\x30\x2e\x75\xc6\xc0\xaf\xa5\x4c\xf3\xbf\xa4\x42\x58\x5d\xc5\x7f\x29\x7f\x12\xd4\xa4\x8f\xd4\xef\xf2\x31\x9c\x43\xe2\xd7\x7a\xc8\xfe\x7d\x61\xf9\x54\x02\xfb\x1d\x00\x00\xff\xff\x24\x32\xd5\xc4\x5c\x04\x00\x00"

func echo_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_ifaceTmpl,
		"echo_iface.tmpl",
	)
}

func echo_ifaceTmpl() (*asset, error) {
	bytes, err := echo_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_iface.tmpl", size: 1116, mode: os.FileMode(0644), modTime: time.Unix(1602742933, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0x4, 0xb1, 0xb1, 0xc, 0x9, 0xa6, 0xdd, 0xf3, 0xb6, 0x27, 0xb4, 0x92, 0xa8, 0x17, 0x88, 0xdd, 0x58, 0x44, 0x35, 0x13, 0xf8, 0x81, 0x5d, 0x9c, 0x51, 0x7d, 0xe7, 0xdd, 0xd0, 0x78, 0x86}}
	return a, nil
}

var _fiber_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xcf\x6f\x9b\x30\x14\xc7\xef\xfe\x2b\x9e\x38\x25\x53\x67\xee\x93\x76\x88\x08\x6b\x2a\x6d\x21\x6a\xe8\x61\x9a\x76\x70\xe1\x41\xac\x82\xed\xd9\xa6\x5b\x64\xf9\x7f\x9f\xf8\x91\x16\x58\x3a\x55\xc9\x25\x21\xd8\xfe\xbc\xf7\x3e\x5f\x2b\x61\x08\x91\xcc\x11\x4a\x14\xa8\x99\xc5\x1c\x1e\x8f\x50\xca\x8f\x35\xd7\x14\xd6\x09\x6c\x93\x14\xe2\xf5\x5d\x4a\x09\x51\x2c\x7b\x62\x25\x82\x73\x40\x77\x4f\xe5\x96\xd5\x08\xde\x13\xc2\x6b\x25\xb5\x85\x05\x01\x00\x28\xf8\x23\x6a\x08\x9c\xe3\x05\x08\x69\xe3\x5a\xd9\xe3\xde\x6a\xa0\xb1\x28\xb9\xc0\x3b\x51\xc8\xd1\xe1\x16\xf5\xc6\x02\x56\x06\xbd\x2f\xb9\x3d\x34\x8f\x34\x93\x75\x58\xca\x8e\x1d\x76\x9f\xce\xa1\xc8\xbd\x0f\xc8\x92\x90\x7f\x6b\x45\xb2\xae\x51\x58\xf0\x3e\x0c\xc1\xb9\xd3\xef\x0e\xdb\x1e\x23\xf6\xa8\xda\x39\x68\x7a\x54\xd8\x56\xf4\x1e\xb8\xb0\xa8\x0b\x96\x21\xb8\x73\xc4\x03\xe3\xa2\xe7\xf5\x8f\x4a\xcb\x67\x9e\x23\x1c\x98\xc8\x2b\xd4\x06\xb2\xee\x75\x21\x75\xaf\xa0\x93\xd1\x96\x6e\x5f\x7b\xbf\x58\xc2\x8f\x9f\x2f\x25\x9c\x27\xa7\x4e\x9c\xd3\x4c\x94\x08\xf4\x0b\xc7\x2a\x37\x6d\x8b\x6f\x4f\xd3\x32\x67\x13\x9d\xea\x7c\x43\x7b\x90\x79\x3f\xcb\x22\x83\x0f\x5d\x13\x34\xb2\x7f\x96\x27\x95\xef\xd9\x38\xb4\xd4\x7f\x7b\x42\xc2\x10\xee\xb1\xe4\xc6\xb6\xc6\x47\xb6\xf6\xa8\x9f\x99\xb0\xa0\x87\xc5\x99\x4b\x33\x2c\x5b\x39\xc8\x28\x1a\x91\xfd\x97\xb4\x60\x4a\x9d\x7a\x59\x29\x75\x03\x66\x8a\x5c\x9e\x4d\xe5\x56\xcb\x46\x0d\x5e\xb4\x6c\xda\x46\x3e\x7d\x06\xa6\x54\xbf\xb2\x08\x9c\xeb\x9f\xbc\x0f\x26\x1e\x26\x9b\x5f\xe7\x7e\x2b\xf5\xc1\x7b\x63\x70\x14\x73\xcf\xe8\xfc\xd7\x3c\xcf\x2b\xfc\xcd\x34\x9a\x96\x69\xe8\x38\x78\xf2\x5a\x90\x3e\x18\x5c\x8c\x36\x53\x4a\x97\x2f\xba\x87\x22\x2f\x4a\xbb\x23\x06\xb8\x28\x64\x2b\x72\x28\x77\xfe\xbe\xe0\x2f\xa0\x1b\x6b\x55\x1f\x2e\x04\xb7\x71\x1a\x4c\xbc\xd0\x5b\xb4\x9d\x8e\x1d\xb3\x07\xef\x83\x9b\xbe\xc9\xf1\x65\x18\x04\xc1\x19\xdc\x2e\xd9\xa7\xc1\x04\xb7\x93\xe6\x1a\xde\xc3\x1c\xd7\x5c\x41\x5b\xc7\x5f\xe3\x34\x9e\x02\xd7\x58\xa1\xc5\xcb\x99\x9b\x78\xb5\x9e\x12\x37\xc8\xf2\xcb\x79\xc9\x2e\xbd\x4b\xb6\xfb\x29\x32\x51\x96\x4b\x61\x2e\xa7\xa6\xf7\xab\x68\x36\x78\xaa\x59\x76\xc5\xdc\xbb\x55\x1a\x6d\x66\xd9\x30\x9b\x1d\x2e\x27\x46\xc9\x76\x1b\x47\xb3\xbc\x23\x29\x04\x66\x57\x64\xbe\xda\x7e\x9f\x5d\xf0\x55\x55\xbd\x03\x37\xfe\x83\xf3\xe4\x6f\x00\x00\x00\xff\xff\x63\x80\x12\x67\xfd\x06\x00\x00"

func fiber_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_fiber_ifaceTmpl,
		"fiber_iface.tmpl",
	)
}

func fiber_ifaceTmpl() (*asset, error) {
	bytes, err := fiber_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fiber_iface.tmpl", size: 1789, mode: os.FileMode(0644), modTime: time.Unix(1602751963, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3b, 0x5b, 0x4e, 0x2c, 0x10, 0x5a, 0x2, 0xb1, 0xb4, 0xc6, 0x64, 0xee, 0x26, 0x14, 0x66, 0x12, 0xa8, 0x64, 0xd0, 0x6a, 0xe, 0x67, 0x56, 0xaf, 0xf, 0x51, 0x95, 0x2, 0x6c, 0xf2, 0x3, 0x7c}}
	return a, nil
}

var _fiber_iface_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xcd\x6e\xdb\x3a\x10\x85\xf7\x7c\x8a\x81\x56\xf6\x45\x2e\x05\x74\x59\xa0\x0b\x43\x56\xe3\x00\xad\x65\xc4\xca\xa2\x28\xba\x60\xa4\x91\x4c\x44\x22\x59\x92\x4a\x6b\x10\x7c\xf7\x42\x3f\x4e\x24\xd5\x29\x02\x7b\x63\xcb\x1a\xf2\x3b\x33\xe7\x0c\x1c\x86\x10\xc9\x1c\xa1\x44\x81\x9a\x59\xcc\xe1\xf1\x08\xa5\xfc\xbf\xe6\x9a\xc2\x3a\x81\x6d\x92\x42\xbc\xbe\x4b\x29\x21\x8a\x65\x4f\xac\x44\x70\x0e\xe8\xee\xa9\xdc\xb2\x1a\xc1\x7b\x42\x78\xad\xa4\xb6\xb0\x20\x00\x00\x05\x7f\x44\x0d\x81\x73\xbc\x00\x21\x6d\x5c\x2b\x7b\xdc\x5b\x0d\x34\x16\x25\x17\x78\x27\x0a\x39\xba\xdc\xa2\xde\x28\x60\x65\xd0\xfb\x92\xdb\x43\xf3\x48\x33\x59\x87\xa5\xec\xd8\x61\xff\xf9\xfc\xc1\x39\x14\xb9\xf7\x01\x59\x12\xf2\xb7\x5c\x24\xeb\x1a\x85\x05\xef\xc3\x10\x9c\x3b\xfd\xee\xc8\xed\x35\x62\x8f\xaa\x1d\x85\xa6\x47\x85\xad\xa8\xf7\xc0\x85\x45\x5d\xb0\x0c\xc1\x9d\x23\x1e\x18\x17\x3d\xaf\x7f\x54\x5a\x3e\xf3\x1c\xe1\xc0\x44\x5e\xa1\x36\x90\x75\xaf\x0b\xa9\x7b\x17\x3a\x3f\x5a\xe9\xf6\xb5\xf7\x8b\x25\x7c\xff\xf1\x22\xe1\x3c\x39\x75\xe2\x9c\x66\xa2\x44\xa0\x9f\x39\x56\xb9\x69\x5b\x7c\x7b\x9a\x96\x39\x9b\xe8\xa4\xf3\x15\xed\x41\xe6\xfd\x2c\x8b\x0c\xfe\xeb\x9a\xa0\x91\xfd\xbd\x04\xd4\x5a\xea\x93\xa7\xef\x3f\x3e\xb4\xd7\x7f\x7b\x42\xc2\x10\xee\xb1\xe4\xc6\xa2\x9e\x38\xb7\x47\xfd\xcc\x84\x05\x3d\x14\x67\xbe\x9a\xa1\x6c\xe5\x60\x4c\xd1\x88\xec\x9f\xa4\x05\x53\xea\xd4\xd1\x4a\xa9\x1b\x30\x53\xe4\xf2\x6c\x42\xb7\x5a\x36\x6a\xf0\x48\xcb\xa6\x6d\xe4\xe3\x27\x60\x4a\xf5\x95\x45\xe0\x5c\xff\xe4\x7d\xb0\x1c\xbb\x31\x39\xfc\x3a\xf7\x5b\x1b\x30\x64\xd0\x18\x1c\x45\xde\x33\xba\x2c\x6a\x9e\xe7\x15\xfe\x62\x1a\x4d\xcb\x34\x74\xbc\x04\xe4\x55\x90\x3e\x18\x5c\x8c\x0e\x53\x4a\x97\x2f\x76\x0f\x22\x2f\x96\x76\x57\x0c\x70\x51\xc8\xd6\xc8\x41\xee\xfc\xee\xe0\x4f\xa0\x1b\x6b\x55\x1f\x31\x04\xb7\x71\x1a\x4c\x7c\xa1\xb7\x68\x3b\x3b\x76\xcc\x1e\xbc\x0f\x6e\xfa\x26\xc7\x2b\x31\x18\x04\x67\x70\xbb\x64\x9f\x06\x13\xdc\x4e\x9a\x6b\x78\x0f\x73\x5c\x73\x05\x6d\x1d\x7f\x89\xd3\x78\x0a\x5c\x63\x85\x16\x2f\x67\x6e\xe2\xd5\x7a\x4a\xdc\x20\xcb\x2f\xe7\x25\xbb\xf4\x2e\xd9\xee\xa7\xc8\x44\x59\x2e\x85\xb9\x9c\x9a\xde\xaf\xa2\xd9\xe0\xa9\x66\xd9\x15\x73\xef\x56\x69\xb4\x99\x65\xc3\x6c\x76\xb8\x9c\x18\x25\xdb\x6d\x1c\xcd\xf2\x8e\xa4\x10\x98\x5d\x91\xf9\x6a\xfb\x6d\xb6\xe0\xab\xaa\x7a\x07\x6e\xfc\x07\xe7\xc9\x9f\x00\x00\x00\xff\xff\x78\xe2\x43\x2c\x0c\x07\x00\x00"

func fiber_iface_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_fiber_iface_v2Tmpl,
		"fiber_iface_v2.tmpl",
	)
}

func fiber_iface_v2Tmpl() (*asset, error) {
	bytes, err := fiber_iface_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fiber_iface_v2.tmpl", size: 1804, mode: os.FileMode(0644), modTime: time.Unix(1602751748, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x91, 0x1b, 0xbf, 0xb, 0x5, 0x9e, 0xbf, 0x37, 0xbc, 0x63, 0x0, 0x56, 0x17, 0xe7, 0x3f, 0xd2, 0xca, 0xe9, 0xb6, 0x60, 0xf5, 0x5d, 0x80, 0x93, 0xe0, 0x5b, 0xb3, 0xa0, 0x9, 0xcb, 0xab, 0xb6}}
	return a, nil
}

var _gin_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xc1\x6e\xdb\x3c\x0c\xc7\xef\x7a\x0a\xc2\x27\xfb\x43\x2b\xdf\x3f\x60\x87\x22\xcd\xd6\x1e\xd6\x16\x6b\xf6\x00\xaa\x4d\xcb\x42\x63\xca\x90\xe4\x6e\x86\xa0\x77\x1f\x24\x2b\x8d\xd3\x25\xdb\x4e\x91\x29\xea\xff\x27\x7f\x64\xea\x1a\x36\xba\x45\x90\x48\x68\x84\xc3\x16\x5e\x66\x90\xfa\x7a\x50\x86\xc3\xed\x23\x3c\x3c\xee\x60\x7b\x7b\xbf\xe3\x8c\x8d\xa2\x79\x15\x12\xc1\x7b\xe0\x4f\xaf\xf2\x41\x0c\x08\x21\x30\xa6\x86\x51\x1b\x07\x25\x03\x00\x90\x8a\xa0\xf0\x5e\x75\x40\xda\x6d\x87\xd1\xcd\xcf\xce\x00\xdf\x92\x54\x84\xf7\xd4\xe9\xd5\xd3\x28\x74\xe1\x02\xf7\x16\x43\x90\xca\xf5\xd3\x0b\x6f\xf4\x50\x4b\x45\xd7\x52\x93\x6a\xe2\xc9\x7b\xa4\x36\x84\x82\x55\x8c\xfd\xee\xb5\xd1\xc3\x80\xe4\x20\x84\xba\x06\xef\x0f\xdf\x49\x36\x3e\x63\x6e\x1e\x63\x17\x7c\x37\x8f\x18\x1d\x43\x00\x45\x0e\x4d\x27\x1a\x04\x7f\x4e\xb1\x17\x8a\x16\xbd\xe5\x38\x1a\xfd\xa6\x5a\x84\x5e\x50\xbb\x47\x63\xa1\x49\xe1\x4e\x9b\x08\x20\x81\x88\xc6\x31\x18\x42\x59\xc5\x20\xbf\xcb\xb9\x29\xca\x0e\xb5\x78\x6f\x04\x49\x04\xfe\x59\xe1\xbe\xb5\xb1\xc8\xcb\xfd\x44\xdd\x0f\x3d\x1d\xbc\xbe\xa2\xeb\x75\xbb\x74\x53\xfe\x17\xfd\x36\x9a\x1c\xfe\x74\xd5\x01\xe6\xbf\x24\xe6\x92\x96\xdf\xc0\x58\x5d\xc3\x37\x94\xca\x3a\x34\x27\xbc\x9e\xd1\xbc\x09\x72\x60\xf2\xe5\x07\x9a\x36\x5f\x3b\x9d\x70\x74\x13\x35\x7f\xd4\x29\x11\x52\x25\xcb\x32\x5c\x81\x3d\xd5\xab\xce\x0e\xe5\x8b\xd1\xd3\x98\xa1\x18\x3d\xc5\x2a\xfe\xff\x04\xb8\xc4\xcb\xc2\xfb\xe5\x14\x42\x71\x82\x60\x95\x7a\x6c\xf8\xd2\xc0\x33\xf0\xc9\xe2\x6a\xc2\x8b\x42\x02\x3f\xa8\xb6\xdd\xe3\x0f\x61\xd0\x46\x45\xcb\xd7\x53\x67\x47\x3b\xfe\xdd\x62\xb9\x4a\xe6\x9c\x57\xef\x9c\xb3\xc9\x3b\xcb\xf4\xc4\x82\xa2\x4e\x47\x82\xd9\xee\xe2\xa2\xdc\x39\x37\xde\xd0\x0c\x3c\x1e\x96\xe9\x9e\x50\xc9\x8b\x97\x88\x1c\x53\x42\x28\xae\xe2\x1f\x95\x3f\x09\xd7\xa7\x8f\x54\xfc\x7a\x3b\xce\x60\xe3\x37\x34\x97\x7f\x7f\xb5\x5e\xa3\xc0\x7e\x05\x00\x00\xff\xff\xc2\xe8\x35\xf4\x63\x04\x00\x00"

func gin_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_ifaceTmpl,
		"gin_iface.tmpl",
	)
}

func gin_ifaceTmpl() (*asset, error) {
	bytes, err := gin_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_iface.tmpl", size: 1123, mode: os.FileMode(0644), modTime: time.Unix(1602742933, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0xa2, 0x69, 0xe, 0x6a, 0x25, 0x8c, 0x0, 0xce, 0xb9, 0x51, 0x69, 0x42, 0xb5, 0x6b, 0x2c, 0xdd, 0xa, 0xf9, 0xb8, 0x5f, 0xc0, 0xc6, 0xe4, 0x38, 0x1a, 0xfb, 0x55, 0x85, 0x64, 0xff, 0x12}}
	return a, nil
}

var _httprouter_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xc1\x8e\x9b\x30\x10\x86\xef\x7e\x8a\x11\xea\x21\xa9\x52\xf3\x0c\x55\x92\x6e\xf6\xd0\x4d\x94\x8d\xd4\xb3\x17\x26\xe0\xdd\x30\x76\xed\xa1\x12\xb2\xfc\xee\x95\x81\x54\x34\x55\x56\xea\x8a\x93\x6d\x06\x7f\xbf\xfd\x0d\xe4\x39\xac\x4d\x89\x50\x21\xa1\x53\x8c\x25\xbc\x74\x50\x99\x2f\x8d\x76\x12\x36\x7b\x78\xda\x9f\x60\xbb\x79\x3c\x49\x21\xac\x2a\xde\x54\x85\x10\x02\xc8\xc3\x5b\xf5\xa4\x1a\x84\x18\x85\xd0\x8d\x35\x8e\x61\x21\x00\x00\x32\x42\xce\x6b\x66\x9b\x89\x7e\x9d\xa6\xce\xb4\x8c\x0e\xb2\x10\xf4\x19\xc8\xf0\xb6\xb1\xdc\x3d\xb3\x03\xb9\xa5\x4a\x13\x3e\xd2\xd9\x4c\x88\x89\x7f\xa7\x80\x17\x8f\x31\x56\x9a\xeb\xf6\x45\x16\xa6\xc9\x5f\xdb\x8b\x46\xf2\x45\xdd\xe8\x72\xc8\x1d\xc2\x42\x40\x2a\x63\xcc\xc4\x52\x88\x7f\x63\xd7\xa6\x69\x90\x18\x62\xcc\x73\x08\xe1\xba\xee\x13\xd2\x36\xc1\x9d\x4d\xf7\x94\xa7\xce\x62\x0a\x8f\x11\x34\x31\xba\xb3\x2a\x10\x82\x08\xc1\x29\xaa\x10\xe4\x37\x8d\x97\xd2\xa7\x7d\xf7\x23\x92\x85\x9b\x98\xde\x4c\x08\xf2\x3b\x72\x6d\xca\x21\x60\x91\x0e\x2f\x8f\xe8\xad\x21\x8f\x3f\x9c\x66\x74\x2b\xf8\x3c\x3e\xfd\xd9\xa2\xe7\xd5\xc4\xa6\x3c\x28\xa7\x1a\xbf\x1c\x51\x83\x98\xf9\xb0\x57\x11\xd7\x31\x0a\x91\xe7\x70\xc4\x4a\xfb\xde\xee\xc4\xcc\x33\xba\x5f\x8a\x18\xdc\x58\xbc\xf1\xe6\xc7\x32\x9b\x49\x8c\x38\xb7\x54\xbc\x8b\x5b\xb8\xe1\x90\xe3\xb1\x8e\xfd\xb0\x02\xff\x37\x7d\xf9\x5e\x33\x76\xcc\xf6\x2b\x75\x20\xd3\x64\x70\x32\xb6\xc3\xc9\x9d\xa2\xf2\x82\x8b\x2c\x84\x49\x35\xc6\x6c\x95\xbe\xd2\x57\xa3\xe9\xa0\xb8\x86\x4f\xf2\xc1\x99\xd6\x82\x4c\xab\xbe\xea\xe5\x8d\xdf\xe5\xd4\xfd\x1f\x6e\xaf\x77\x78\xed\x01\xf9\xff\xa1\xe2\x1e\xed\xd0\xce\x4a\x33\x7e\x4e\xdc\x06\x2f\xc8\x38\x23\x70\x87\xaa\x9c\xf3\xba\x8a\x8b\x7a\x46\xde\xde\xb2\x36\xe4\x67\x24\xae\x0d\x11\x16\x73\xf6\xe4\xe4\x54\xf1\x81\x96\xdc\xfc\xff\x51\xfc\x0e\x00\x00\xff\xff\xde\x4c\x1a\xca\x28\x06\x00\x00"

func httprouter_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_ifaceTmpl,
		"httprouter_iface.tmpl",
	)
}

func httprouter_ifaceTmpl() (*asset, error) {
	bytes, err := httprouter_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_iface.tmpl", size: 1576, mode: os.FileMode(0644), modTime: time.Unix(1602742933, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0x7b, 0x6e, 0x55, 0xcf, 0xd, 0xeb, 0xf1, 0x86, 0xe5, 0xf5, 0x77, 0x8a, 0x8, 0xe, 0x75, 0x24, 0x2, 0x4b, 0xc0, 0x86, 0xce, 0x5f, 0x3f, 0xe8, 0xef, 0xca, 0x82, 0x2a, 0xd6, 0x98, 0x64}}
	return a, nil
}

var _iris_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\xdb\x30\x0c\x86\xef\x7a\x0a\x22\x27\x67\xe8\x64\x6c\xc7\x01\x3b\x04\x69\xb6\xf6\xb0\x36\x58\xb3\x07\x50\x6d\xda\x11\x12\x4b\x82\xc4\x64\x33\x04\xbd\xfb\x20\xc9\x4e\x9d\x2e\x29\x0a\xec\x64\x5b\xa4\xfe\x9f\xfc\x48\x97\x25\x2c\x75\x8d\xd0\xa2\x42\x2b\x08\x6b\x78\xee\xa1\xd5\x1f\x3b\x69\x39\xdc\x3e\xc2\xc3\xe3\x06\x56\xb7\xf7\x1b\xce\x98\x11\xd5\x4e\xb4\x08\xde\x03\x5f\xef\xda\x07\xd1\x21\x84\xc0\x98\xec\x8c\xb6\x04\x05\x03\x00\x98\x79\x2f\x1b\x50\x9a\x56\x9d\xa1\xfe\x89\x2c\xf0\x95\x6a\xa5\xc2\x7b\xd5\xe8\xc9\xb5\x28\x72\x31\x50\x56\x5a\x11\xfe\x21\xef\x71\xef\x30\x84\x56\xd2\xf6\xf0\xcc\x2b\xdd\x95\x3b\x41\xc2\x0a\x57\x4a\x2b\x5d\x79\xfc\xf4\x79\x92\xaa\xea\x10\x66\x2c\x55\x10\xa3\xff\x5f\xc6\x3b\xec\x4f\xb6\x73\xc6\xfe\xb5\x5b\xea\xae\x43\x45\xb1\xa3\x12\xbc\x1f\xbf\x93\x72\xbc\xc6\xa8\x37\x91\x25\xdf\xf4\x06\xa3\x69\x08\x20\x15\xa1\x6d\x44\x85\xe0\x2f\x29\x6e\x85\x54\x59\x2f\xbf\x1a\xab\x8f\xb2\x46\xd8\x0a\x55\xef\xd1\x3a\xa8\xd2\x71\xa3\x6d\x82\x90\x68\x44\xe7\x78\x1a\x42\x31\x87\x81\x17\xbf\x1b\x2e\xb0\xb1\x16\xef\xad\x50\x2d\x02\xff\x26\x71\x5f\xbb\x58\xe4\xf5\x7e\xa2\xec\xab\x9e\x46\xab\x1f\x48\x5b\x5d\xe7\x6e\x8a\xd1\x6d\x99\x9f\xf3\x11\xe9\x3b\x73\x87\xc2\xf2\x33\x30\x56\x96\xf0\x13\x5b\xe9\x08\xed\x19\xb5\x27\xb4\x47\xa1\x08\xec\x10\x7c\xc5\xd4\x0d\x61\xd2\x19\x4a\x73\x50\xd5\x9b\x42\x85\x30\x06\x3e\xc4\x5c\xbe\x30\x66\x2f\x2b\x41\x52\xab\x1b\x70\xe7\xc2\xf3\x8b\x33\xfa\x6e\xf5\xc1\x0c\x8c\x0c\x7c\xf9\x0a\xc2\x18\xbe\x16\x96\xfa\x62\xe6\x7d\x0e\x87\x30\x3b\x63\x31\xe6\xbd\xf4\x7c\x6d\xf2\x03\xf9\x83\xc3\xc9\xa8\x4d\x54\x4f\x03\xe8\x64\x5d\xef\xf1\xb7\xb0\xe8\xa2\xa4\xe3\xd3\xe1\xa7\x0c\xc3\x7f\x39\x2c\x26\x79\x9c\xf3\xf9\x09\xf2\x20\x7f\x02\x69\xf5\x81\xd0\x81\x54\x8d\x8e\xf8\xb2\xd1\xd5\x55\xb9\x23\x32\x0b\xd5\x03\x8f\x2f\x79\xb8\x23\x88\x61\xe1\x12\x82\x97\x68\x08\xb3\x9b\xf8\xa3\xf2\xb5\xa0\x6d\xfa\x48\x15\x4f\xf7\xe2\x9c\x13\x5f\xa8\x8c\xf1\xed\x0b\xd3\xc5\x09\xec\x6f\x00\x00\x00\xff\xff\x0e\x19\xfa\x4b\xe1\x04\x00\x00"

func iris_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_ifaceTmpl,
		"iris_iface.tmpl",
	)
}

func iris_ifaceTmpl() (*asset, error) {
	bytes, err := iris_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_iface.tmpl", size: 1249, mode: os.FileMode(0644), modTime: time.Unix(1602742933, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x83, 0xc0, 0x72, 0xb0, 0xaf, 0x29, 0x6d, 0x7c, 0x89, 0x73, 0x33, 0xdb, 0x74, 0x95, 0x31, 0x54, 0xa5, 0xdb, 0x8, 0x6a, 0xc1, 0x68, 0x2b, 0x76, 0xfe, 0x7f, 0xfc, 0xf, 0x2a, 0x8b, 0xd1}}
	return a, nil
}

var _macaron_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x8c\x7a\x4a\x51\x71\xc4\x15\x89\xc3\xaa\x5b\xd8\x3d\xec\x87\xd8\x72\x42\x08\x99\x66\x92\x5a\x6d\xec\xc8\x76\x0b\x91\x35\xff\x1d\x39\x8e\xb7\x2e\xdb\x02\x42\xec\x69\x4f\xb1\x3d\x33\x6f\xde\xbc\x37\x4a\x59\xc2\x5c\x57\x08\x0d\x2a\x34\xc2\x61\x05\xdf\x7a\x68\xf4\xeb\x56\x1a\x0e\x97\x77\x70\x7b\xb7\x84\xc5\xe5\xf5\x92\x33\xd6\x89\xd5\x46\x34\x08\xde\x03\xbf\xdf\x34\xb7\xa2\x45\x20\x62\x4c\xb6\x9d\x36\x0e\x0a\x06\x00\xd0\x8a\x95\x30\x5a\xc1\xc4\x7b\x59\x83\xd2\x6e\xd1\x76\xae\x7f\x70\x06\xf8\x42\x35\x52\xe1\xb5\xaa\x75\x56\x1e\xc0\xce\x04\x70\x6b\x91\xa8\xd1\xdd\xa6\xe1\x52\x95\x23\x32\xdf\xbf\xf1\x1e\x55\x45\x34\x61\x53\xc6\x9e\xb6\x99\xeb\xb6\x45\xe5\x80\xa8\x2c\xc1\xfb\x74\x1f\x10\x43\x19\x73\x7d\x17\x86\xe0\xcb\xbe\xc3\xd0\x8c\x08\xa4\x72\x68\x6a\xb1\x42\xf0\xa7\x10\xd7\x42\x2a\x20\x0a\xf3\x05\xbd\x86\x6b\x67\xf4\x5e\x56\x08\x6b\xa1\xaa\x2d\x1a\x0b\xab\xe1\xb9\xd6\x26\x69\x30\xe8\x11\x08\x84\x00\x51\x31\x85\xcf\x5f\xd2\x10\x57\xb1\x8a\x25\x4e\xde\x1b\xa1\x1a\x04\xfe\x5e\xe2\xb6\xb2\x81\xec\xf9\xb9\x46\x1e\xf9\x6c\xa9\xd7\x0d\xba\xb5\xae\xe2\x54\xc5\xab\xd4\x6d\xae\x95\xc3\x1f\x6e\x9a\x34\xfd\xdb\xe4\x91\x5a\xfc\x12\x63\x65\x09\x1f\xb1\x91\xd6\xa1\x39\xd2\xef\x01\xcd\x5e\x28\x07\x66\x0c\xfe\xa2\xae\x1d\xc3\x4e\x3f\x4a\x53\xef\xd4\xea\xb7\x58\x45\x0b\x8f\x8c\x6e\xe2\x77\x06\xf6\x18\x78\x7a\xd2\xad\x0f\x46\xef\x3a\x38\xa9\xe0\xb1\x8f\x3b\x8b\x99\x69\x46\xef\x1c\x9a\xb8\xc3\xb2\xaa\xb6\xf8\x5d\x18\xb4\xf0\xf6\x1d\x58\x9e\x9b\x18\x33\x62\x97\x62\xe2\x7d\x3c\x11\x4d\x66\x10\x86\x2a\x22\xa9\x33\x6e\x5e\x39\xd7\x5d\xa8\x1e\x78\x38\x44\xf9\x47\x3e\x11\x35\xae\xc5\x00\x7b\xc8\x18\xb0\xc3\xd3\xbd\x70\xeb\xe1\xf2\x64\x8f\xfc\xc0\x31\xf7\x93\x8e\xcc\x8e\xe8\x17\xaa\x2f\xfe\x09\x27\xdf\x03\x9a\xe5\xfa\x70\xce\x0f\x8d\x5e\xb2\x2a\xe9\x21\xe1\x3f\xe7\xf6\x85\x82\xaf\xb9\x0d\x21\x2f\x6a\x9b\x17\x7b\x76\x18\xf2\x93\xc5\xe2\x10\x8b\x30\xf4\xc7\x9f\xcf\x79\x63\x9e\xcf\x94\xff\x64\x48\xf2\x85\xfd\x0c\x00\x00\xff\xff\xe6\xfd\xc4\x5b\xe1\x06\x00\x00"

func macaron_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_ifaceTmpl,
		"macaron_iface.tmpl",
	)
}

func macaron_ifaceTmpl() (*asset, error) {
	bytes, err := macaron_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_iface.tmpl", size: 1761, mode: os.FileMode(0644), modTime: time.Unix(1602750531, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0xbb, 0x2c, 0x2f, 0xe1, 0xb3, 0x4, 0x42, 0xbb, 0xc7, 0x53, 0xf3, 0x65, 0xd7, 0xf8, 0x77, 0x67, 0x3c, 0xbd, 0x43, 0x6a, 0x1e, 0xa3, 0xbd, 0x76, 0x7e, 0xb, 0x51, 0x11, 0x40, 0x8a, 0x2d}}
	return a, nil
}

var _mux_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\xbb\x6e\xdb\x30\x14\xdd\xf9\x15\x17\x9a\xa4\x20\xa5\x80\x8e\x01\x32\x14\x79\x34\x19\xf2\x68\x92\xa2\x43\xd1\x81\xb1\xae\x64\x36\x22\xa9\xf2\xe1\x5a\x20\xf8\xef\x05\x49\xd9\x96\xf3\x1a\xda\xa5\x5e\x04\x92\xf7\x71\xee\x39\xe7\xba\xae\xe1\x44\x35\x08\x1d\x4a\xd4\xcc\x62\x03\x8f\x23\x74\xea\x83\xe0\x9a\xc2\xe9\x0d\x5c\xdf\x3c\xc0\xd9\xe9\xe5\x03\x25\x64\x60\x8b\x27\xd6\x21\x78\x0f\xf4\xf6\xa9\xbb\x66\x02\x21\x04\x42\xb8\x18\x94\xb6\x50\x12\x00\x80\x42\xa2\xad\x97\xd6\x0e\x05\xc9\xe7\x8e\xdb\xa5\x7b\xa4\x0b\x25\x6a\xd6\x73\x31\xd6\x82\xeb\x7a\xf5\x71\x7a\x16\x6e\x0d\x85\xf7\xbc\x05\xa9\xec\x99\x18\xec\x78\x6f\x35\xd0\x33\xd9\x71\x89\x97\xb2\x55\xb3\x4e\xb1\xef\x1b\x0f\xd8\x1b\x0c\x61\xd6\xaa\x53\x9a\xf7\x3d\xab\x85\x5b\x7b\x8f\xb2\x09\xa1\x20\x15\x21\x75\x0d\x3f\x9d\xb1\xe0\x0c\x42\xab\x34\xc4\x29\x3f\xc9\x11\x04\xda\xa5\x6a\xc0\x2a\xd0\xd8\x71\x63\x51\x93\x15\xd3\x10\xe7\xb8\x4a\x4f\x06\x8e\x53\xf0\xc5\xee\x86\x90\x97\xb8\x4f\x94\x10\x28\x2d\x84\x50\xd7\xe0\xfd\xe6\x9c\x20\x46\x10\xc4\x8e\x43\x24\x90\x3e\x8c\x03\x46\xf4\x21\x00\x97\x16\x75\xcb\x16\x08\xfe\xb5\x8a\x4b\xc6\x25\x84\x00\x00\x51\xaa\x74\x1a\xb4\x5a\xf1\x06\x41\xf0\xa6\xe9\xf1\x37\xd3\x68\xf2\x34\x6e\x9d\x48\x8d\x8d\x63\x60\x08\x65\x05\xdf\x7f\x08\xb7\xa6\x57\xdb\xd0\x73\x27\x17\x64\x03\xc7\x7b\xcd\x64\x87\x40\xcf\x39\xf6\x8d\x89\x38\xdf\x1e\x29\x43\x98\x4f\xb5\xe9\x96\x19\xc9\xf3\x94\x91\x34\x7a\x87\x66\x50\xd2\xe0\x37\xcd\x2d\xea\x43\x38\x98\x6e\x7f\x39\x34\xb6\xda\x08\xf6\x97\xb9\x13\xf4\xfc\x0d\x49\xd5\xbb\x49\xb6\x3d\x6a\xef\x51\xaf\x98\xb4\x5b\x4d\x9f\x11\x6f\xa6\x67\xab\x12\x73\xad\x93\x8b\x77\xeb\x94\x1a\x0e\x22\x97\x77\xca\x25\x5c\x66\xbf\x5e\xf5\xaa\x7e\x9f\xb5\x72\x43\x26\x0f\x74\x4a\x84\xa3\x63\xd0\xf4\x96\xd9\xe5\xad\xc6\x96\xaf\xcb\xc2\xfb\x1c\x16\x42\x51\xd1\x7b\xf7\x98\xe3\xca\x1d\x4d\xfb\xb9\x33\xf5\xde\x71\x4b\xd4\x2a\xda\x7c\x91\xae\xa2\x3d\x72\x89\xbc\x76\x33\xe7\x1c\x1d\x83\xa1\x73\xcb\x90\x5d\x3f\xfa\xd5\x60\x39\x0b\xa6\x94\x56\xdb\xf6\x64\xea\xb2\xa5\x37\xe5\x18\xe0\xb2\x55\x69\x95\x72\xbf\x37\x3d\x16\x77\x29\x2e\xdf\x6c\xa9\xf6\x88\xa2\x17\x4c\x36\x7d\x32\x6c\xe2\x28\x52\x16\x42\x71\x98\xe1\xce\x7d\x53\xd1\x84\x25\xfe\xa6\xe5\x4c\x09\xbb\xba\x91\xd9\x97\x6c\x5d\x28\x63\x43\xd8\xe5\xc6\x73\x4e\x4c\x0f\xc5\xc6\x6b\x29\x73\xc5\x7a\xde\xe0\x17\x87\x7a\x04\x1a\x3f\x1c\xcd\x3c\x79\xba\x2a\xbd\xe7\xb2\xed\x99\x7d\x11\xba\xab\xf6\x5c\xd5\x7f\x1a\x74\xf6\x1f\x15\xd5\xf9\x8f\xa6\x9c\xaf\x69\x20\x7f\x02\x00\x00\xff\xff\xfc\x4e\x9d\x4f\x69\x06\x00\x00"

func mux_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_ifaceTmpl,
		"mux_iface.tmpl",
	)
}

func mux_ifaceTmpl() (*asset, error) {
	bytes, err := mux_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_iface.tmpl", size: 1641, mode: os.FileMode(0644), modTime: time.Unix(1602742933, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xa, 0xc9, 0x40, 0x57, 0x10, 0x93, 0x61, 0xad, 0x3, 0x4d, 0x4c, 0x35, 0x91, 0xa7, 0x59, 0x5a, 0x14, 0xbd, 0x4f, 0xa0, 0x90, 0x5b, 0x85, 0x49, 0xd4, 0xa, 0x8b, 0x2e, 0x97, 0x14, 0x2a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"chi_iface.tmpl":        chi_ifaceTmpl,
	"echo_iface.tmpl":       echo_ifaceTmpl,
	"fiber_iface.tmpl":      fiber_ifaceTmpl,
	"fiber_iface_v2.tmpl":   fiber_iface_v2Tmpl,
	"gin_iface.tmpl":        gin_ifaceTmpl,
	"httprouter_iface.tmpl": httprouter_ifaceTmpl,
	"iris_iface.tmpl":       iris_ifaceTmpl,
	"macaron_iface.tmpl":    macaron_ifaceTmpl,
	"mux_iface.tmpl":        mux_ifaceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"chi_iface.tmpl":        {chi_ifaceTmpl, map[string]*bintree{}},
	"echo_iface.tmpl":       {echo_ifaceTmpl, map[string]*bintree{}},
	"fiber_iface.tmpl":      {fiber_ifaceTmpl, map[string]*bintree{}},
	"fiber_iface_v2.tmpl":   {fiber_iface_v2Tmpl, map[string]*bintree{}},
	"gin_iface.tmpl":        {gin_ifaceTmpl, map[string]*bintree{}},
	"httprouter_iface.tmpl": {httprouter_ifaceTmpl, map[string]*bintree{}},
	"iris_iface.tmpl":       {iris_ifaceTmpl, map[string]*bintree{}},
	"macaron_iface.tmpl":    {macaron_ifaceTmpl, map[string]*bintree{}},
	"mux_iface.tmpl":        {mux_ifaceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
