// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/gin_iface.tmpl (933B)

package generator

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gin_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcb\x6e\xdb\x30\x10\xbc\xf3\x2b\x16\x39\x49\x45\x42\xdf\x0b\xf4\x10\x38\x6e\x93\x43\x9d\xa2\x71\x3e\x40\x91\x56\x14\x11\x6b\x29\x90\xab\xa0\x02\xc1\x7f\x2f\xf8\xb0\x63\xf5\x60\xf4\xb6\x24\x77\x67\x76\x66\xb8\xd9\xc0\xd6\x74\x08\x0a\x09\x6d\xc3\xd8\xc1\xdb\x02\xca\xdc\x8d\xda\x4a\x78\x78\x86\xfd\xf3\x01\x76\x0f\x4f\x07\x29\xc4\xd4\xb4\xef\x8d\x42\xf0\x1e\xe4\xaf\x77\xb5\x6f\x46\x84\x10\x84\xd0\xe3\x64\x2c\x43\x25\x00\x00\x6e\x94\xe6\x61\x7e\x93\xad\x19\x37\x4a\xd3\x9d\x32\xa4\xdb\x58\xdd\x88\x5a\x08\xef\x75\x0f\x64\x78\x37\x4e\xbc\xbc\xb0\x05\xb9\x35\xe3\x88\xc4\x11\x68\xb3\x01\xef\x4f\x17\x21\x08\xef\x91\xba\x10\x04\x2f\x53\x24\x95\x87\x65\xc2\x48\x1a\x02\x68\x62\xb4\x7d\xd3\x22\xf8\x8c\x29\x9f\xdc\x1e\xb1\xdb\x0e\x8d\xa6\x10\xd2\x26\x51\x59\x3c\xc2\x64\xcd\x87\xee\xd0\xc2\xd0\x50\x77\x44\xeb\xa0\x4d\xf7\xbd\xb1\xa0\x34\xa5\xe6\xd4\x59\xd5\xf1\x2c\x1f\x4b\x5b\xba\x3b\x6f\xe1\xbd\x6d\x48\x21\xc8\xef\x1a\x8f\x9d\x2b\x24\x89\x7c\x5f\x04\xad\xd4\x94\x15\x56\x8a\xf2\x44\xc6\xcb\xb5\xfc\x89\x3c\x98\x2e\xcb\xaa\x5a\xf8\x12\x17\xd8\x1a\x62\xfc\xc3\xf5\x99\x3b\x88\x68\xce\x6f\x54\xda\x31\xda\x95\x15\x2f\x68\x3f\x1a\x62\xb0\xe5\x11\x9c\x66\x04\x36\x49\x59\x3f\x53\x7b\x75\xac\xc2\xcc\xb8\x23\xa5\x09\x6f\xc1\xad\x7d\xae\xc1\xa7\x3d\xad\x99\x23\xf4\xd7\x6f\x80\xf2\x87\x35\xf3\x54\x79\x9f\x8b\x10\xea\x6b\x01\xcc\x0e\x2f\xcc\xce\x30\xe9\x6d\xb8\xf4\x38\x02\x3b\x59\x22\xb8\x20\x94\xaf\x0e\xab\x55\xa7\x94\xf2\xd3\x95\x13\xc9\x59\x7a\x9a\x72\xa0\xa9\x37\xd1\x81\x42\x77\x25\x38\x32\xfc\xc8\x3c\xdd\xd3\x02\x32\x16\x39\x8c\x53\x7a\x65\x89\xfc\x1d\xa2\xe2\xcf\x96\x10\x6e\xa3\x53\xaf\x56\xc7\xca\xc9\x7f\x82\xac\x4f\x49\x1f\x1d\xae\xc1\xee\x69\xa9\xfe\x67\xb0\x7c\xb9\x12\xff\xdf\x00\x00\x00\xff\xff\x4b\x2f\x17\x8c\xa5\x03\x00\x00"

func gin_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_ifaceTmpl,
		"gin_iface.tmpl",
	)
}

func gin_ifaceTmpl() (*asset, error) {
	bytes, err := gin_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_iface.tmpl", size: 933, mode: os.FileMode(0644), modTime: time.Unix(1583300997, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0x6, 0xfd, 0xe2, 0x30, 0x90, 0xd2, 0x9c, 0xd5, 0xd, 0xc6, 0x3f, 0xe, 0xa0, 0x83, 0x8, 0xdb, 0xb4, 0x68, 0xb3, 0x14, 0xdc, 0x1f, 0x4d, 0x29, 0x57, 0xe1, 0x27, 0x7b, 0x6e, 0xbe, 0xf7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gin_iface.tmpl": gin_ifaceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"gin_iface.tmpl": {gin_ifaceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
