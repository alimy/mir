// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/chi_iface.tmpl (1.447kB)
// templates/gin_iface.tmpl (1.009kB)
// templates/httprouter_iface.tmpl (1.358kB)
// templates/mux_iface.tmpl (1.423kB)

package generator

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _chi_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xcb\x6e\xe3\x3a\x0c\x86\xf7\x7a\x0a\xa2\x2b\xfb\xa0\x95\xf7\x05\xba\x38\x48\xaf\x8b\x5c\x90\x66\x30\x6b\x55\x66\x6c\xa1\xb1\xe4\x91\xe8\x16\x81\xa0\x77\x1f\x48\xb6\x73\x1b\x4c\x26\xd9\x49\xd6\xcf\x9f\xe4\x47\xba\x28\x60\x62\x4a\x84\x0a\x35\x5a\x41\x58\xc2\xc7\x16\x2a\x73\xd7\x28\xcb\xe1\x71\x0e\xb3\xf9\x0a\x9e\x1e\xdf\x56\x9c\xb1\x56\xc8\x4f\x51\x21\x78\x0f\x7c\xf1\x59\xcd\x44\x83\x10\x02\x63\xaa\x69\x8d\x25\xc8\x18\x00\xc0\x8d\x46\x2a\x6a\xa2\xf6\x86\xf5\xf7\x4a\x51\xdd\x7d\x70\x69\x9a\xa2\x32\x77\xb2\x56\x85\xac\xd5\x0d\xcb\x19\xf3\x5e\xad\x41\x1b\x7a\x6a\x5a\xda\xbe\x93\x05\x3e\x31\x4d\x83\x9a\xa2\x6b\x51\x80\xf7\xe3\x87\x10\x98\xf7\xa8\xcb\x10\x18\x6d\xdb\x58\x01\x5f\x6d\x5b\x8c\x15\x84\x00\x4a\x13\xda\xb5\x90\x08\xbe\xf7\xe4\x6f\x6e\x86\x58\x4e\x6a\xa1\x74\x08\xa9\x8c\xd8\x66\xbc\x42\x6b\xcd\x97\x2a\x11\x1a\x55\x96\x1b\xfc\x16\x16\x1d\xac\x8d\x05\x59\xab\x24\x4c\xaa\x2c\x8f\x77\x3e\xdd\x6b\x76\xf9\xbd\xb7\x42\x57\x08\xfc\x59\xe1\xa6\x74\x83\xfd\xd9\x56\x86\xfc\x47\xed\xf4\x41\xbd\x65\x7f\xe6\x53\xa4\xda\x94\x7d\x4f\x59\x24\xc8\x97\xe8\x5a\xa3\x1d\xfe\xb4\x8a\xd0\xde\xc2\x7f\xc3\xd7\x5f\x1d\x3a\xca\x77\x25\x05\x16\x69\x2d\xb1\x52\x8e\xd0\x1e\xb1\x79\x47\xfb\x25\x34\x81\x1d\x1e\x4f\xc8\xb9\xe1\x99\x4c\xea\x7f\xdd\x69\x79\xd6\x27\x4b\x9c\xf8\xd2\x74\xa9\x1e\x77\x6c\x97\x8f\xfc\x8f\x40\xbc\x58\xd3\xb5\x23\x06\x9b\x22\xe1\xfe\x21\xf9\xcc\xf0\xbb\xb7\xca\xf2\xfe\x95\x4f\x4d\xa7\x29\xf3\xbe\x8f\x0a\xe1\x76\x88\x48\xcd\x6e\x1c\xfe\x61\x63\x0f\x06\xf3\xd7\xc9\x77\x0e\x41\xa6\xe9\xc7\x49\xf7\xc1\xe9\xed\x70\x09\xee\x1f\xc0\xf1\x61\xfa\x07\x49\xf8\x0f\x87\xd9\x81\x8e\x73\xbe\x27\x3f\x26\xd8\xe1\x4d\x31\x0e\x94\x5e\x9b\x08\x75\x48\x75\x7e\x67\x5e\x89\xda\xff\xf5\x16\x78\x3c\xf4\x4b\x70\x8c\x6b\xd8\x8c\xe7\x4e\xcb\x88\x66\x2f\x8b\x7c\xbc\xe7\x0b\x41\x75\x3c\x3a\x7e\xb2\x45\xf9\xb8\x66\xa7\xe4\xf8\x2b\x8a\x32\xfb\x77\xe8\xa0\x7e\x41\xba\x5c\xbc\x30\xee\x1a\x75\x77\x85\xf8\x11\x37\x48\x78\x85\xb9\x20\x59\x5f\x2e\x9f\xb7\xa4\x8c\x76\x97\x07\x4c\x8c\xd6\x28\xaf\x68\x60\x65\x85\xbc\xa4\xfe\xfd\x4e\x8f\x7f\xf8\xef\x00\x00\x00\xff\xff\x9a\x7f\x12\x61\xa7\x05\x00\x00"

func chi_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_ifaceTmpl,
		"chi_iface.tmpl",
	)
}

func chi_ifaceTmpl() (*asset, error) {
	bytes, err := chi_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_iface.tmpl", size: 1447, mode: os.FileMode(0644), modTime: time.Unix(1583512325, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0xf7, 0xbe, 0x4, 0x1c, 0x65, 0xec, 0xcf, 0x4b, 0x41, 0x26, 0xb8, 0x78, 0x6e, 0xc6, 0x6, 0xcb, 0x5b, 0xc2, 0x57, 0x33, 0xe3, 0x69, 0xfd, 0x42, 0xda, 0x44, 0x2a, 0x16, 0x63, 0x3c, 0xa4}}
	return a, nil
}

var _gin_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcd\x6e\xdb\x30\x0c\xc7\xef\x7a\x0a\xa2\x27\x7b\x68\xe5\xfb\x80\x1d\x8a\x34\x5b\x7b\x58\x5a\xac\xd9\x03\xa8\x16\x2d\x0b\x8d\x29\x43\x92\xbb\x19\x82\xde\x7d\x90\x6c\x27\x71\x86\x05\xbb\x51\xe2\xe7\xff\x47\x56\x15\x6c\x8c\x44\x50\x48\x68\x85\x47\x09\x6f\x23\x28\x73\xd7\x69\xcb\xe1\xe1\x19\x76\xcf\x7b\xd8\x3e\x3c\xed\x39\x63\xbd\xa8\xdf\x85\x42\x08\x01\xf8\xcb\xbb\xda\x89\x0e\x21\x46\xc6\x74\xd7\x1b\xeb\xa1\x60\x00\x00\x37\x4a\xfb\x76\x78\xe3\xb5\xe9\x2a\xa5\xe9\x4e\x19\xd2\x75\xb2\x6e\x58\xc9\x58\x08\xba\x01\x32\x7e\xdb\xf5\x7e\x7c\xf5\x16\xf8\xc6\x74\x1d\x92\x4f\x85\xaa\x0a\x42\x58\x3e\x62\x64\x21\x20\xc9\x18\x99\x1f\xfb\xd4\x94\xef\xc7\x1e\x53\xd3\x18\x41\x93\x47\xdb\x88\x1a\x21\x4c\x35\xf9\x93\xdb\x21\xca\x4d\x2b\x34\xc5\x98\x27\x49\xca\xd2\x13\x7a\x6b\x3e\xb4\x44\x68\x05\xc9\x03\x5a\x07\x75\xfe\x6e\x8c\x05\xa5\x29\xc7\xe6\xc0\xa2\x4c\x6f\xfe\x38\x87\xe5\xbf\xe3\x10\x21\x58\x41\x0a\x81\x7f\xd5\x78\x90\x6e\xee\x71\x55\xcf\x3c\xc4\x4a\xd3\x94\x34\x95\x9c\x6c\xfe\x1d\x7d\x6b\xe4\x24\xac\xf8\x94\x26\xd8\x18\xf2\xf8\xdb\x97\xc7\xe6\x91\x25\x38\x3f\x50\x69\xe7\xd1\xae\x50\xbc\xa2\xfd\x10\xe4\xc1\xce\xce\x0b\x50\x6e\x76\x7b\x93\xb5\x36\x03\xd5\x57\xeb\x14\x08\x79\x84\x2d\x29\x4d\x78\x0b\x6e\x5d\xaf\x5c\x78\xaf\x34\x7f\xb3\x66\xe8\x17\xc5\xd6\x0c\x69\x8c\xcf\x5f\x00\x27\x47\x11\xc2\x64\xc4\x98\x15\x1d\x1c\xfe\x1d\x7a\xc6\xf9\x9f\xdb\x1c\x1c\x9e\xad\x6e\x4a\xce\xbe\x4e\x4b\x79\xc0\x5f\xc2\xa2\x4b\xc5\x1c\x9f\xd7\x79\xd6\x84\xff\x74\x58\x9c\xc5\x71\xce\x4f\x78\x97\x06\x47\x86\x39\xc7\x81\xa6\xc6\x24\x72\x73\xab\xeb\x27\xf0\xe8\x7d\x7f\x4f\x23\xf0\x64\x4c\x3b\x5d\x23\x99\x0f\x2b\xe1\x38\x85\xc4\x78\x9b\x08\xbf\x08\xdf\x26\xd3\xf1\x8b\x83\x28\x97\x8b\xb9\xa4\xc6\xef\x69\x2c\xfe\x2b\x73\xc6\xba\x5c\xd2\x9f\x00\x00\x00\xff\xff\xd2\x47\x9d\x6e\xf1\x03\x00\x00"

func gin_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_ifaceTmpl,
		"gin_iface.tmpl",
	)
}

func gin_ifaceTmpl() (*asset, error) {
	bytes, err := gin_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_iface.tmpl", size: 1009, mode: os.FileMode(0644), modTime: time.Unix(1583512325, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x12, 0xe2, 0x32, 0xf8, 0xa4, 0x3d, 0x78, 0xb9, 0x8a, 0xf7, 0x46, 0x43, 0xec, 0xba, 0xd6, 0xe7, 0xcf, 0x78, 0x19, 0x4e, 0xe9, 0x2e, 0x9, 0x2f, 0x45, 0x45, 0x55, 0x59, 0x1d, 0xf2, 0xcb, 0x31}}
	return a, nil
}

var _httprouter_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xc1\x6e\xdb\x30\x0c\x86\xef\x7a\x0a\x22\xa7\x64\xc8\xe4\x67\x18\x92\xae\xd9\x61\x4d\x90\x06\xd8\x59\xb5\x19\x5b\xad\x4d\x69\x14\x3d\xc0\x10\xf4\xee\x83\xa3\x64\x6d\x83\xa1\x45\x00\x9f\x2c\x93\xd4\xc7\xff\xff\x01\x15\x05\xac\x5c\x85\x50\x23\x21\x1b\xc1\x0a\x9e\x06\xa8\xdd\xd7\xce\xb2\x86\xf5\x16\x1e\xb6\x07\xb8\x5b\xff\x38\x68\xa5\xbc\x29\x5f\x4c\x8d\x10\x23\xe8\xdd\x4b\xfd\x60\x3a\x84\x94\x94\xb2\x9d\x77\x2c\x30\x57\x00\x00\x33\x42\x29\x1a\x11\x3f\x53\xf9\xbf\xb6\xd2\xf4\x4f\xba\x74\x5d\xf1\xdc\xb7\x16\x29\x94\x4d\x67\xab\x3c\xc4\xae\x17\xe4\x99\x5a\x28\x15\xa3\x3d\x02\x39\xb9\xeb\xbc\x0c\x8f\xc2\xa0\x57\xae\xeb\x90\x64\xdc\x51\x14\x10\xe3\xa5\x90\x92\x8a\x11\xa9\x4a\x49\xc9\xe0\x47\x3d\xfa\x30\x78\x1c\xf5\xa4\x04\x96\x04\xf9\x68\x4a\x84\xa8\x62\x64\x43\x35\x82\xfe\x6e\xb1\xad\x42\x4a\x27\x49\x1f\x6e\x1a\x07\xae\xb7\xe5\x4b\x79\x63\x3e\xeb\x9f\x28\x8d\xab\xf2\xca\xf9\xe8\x44\xef\x31\x78\x47\x01\x7f\xb1\x15\xe4\x25\x7c\x39\x57\x7f\xf7\x18\x64\x09\xaf\x6e\xf5\xce\xb0\xe9\xc2\xe2\x9f\x89\xa4\x46\x7f\x7b\xac\x6d\x10\xe4\x77\x6e\x1e\x91\xff\x18\x12\xe0\x73\xf3\xca\x6b\x38\xb7\xc5\xbd\xe1\xab\x63\x4f\xe5\x87\xb8\x39\x67\x75\x67\x3d\xfb\xd3\x67\x09\xe1\x3d\x7d\xf1\x69\x80\x1b\x11\xff\x8d\x06\xd0\xe3\x21\x27\x72\x89\x90\xf5\xc6\x50\xd5\xe2\x3c\xc6\x37\xdd\x94\x96\x10\xe3\xb3\xb3\x04\xfa\x9e\x5d\xef\x41\xef\x8c\x34\x63\x39\xe8\xab\x54\x17\x97\xd8\xdb\x80\xd7\xd0\x53\xb4\x79\xf8\x1e\xe5\x56\xe6\xff\x30\xbb\x7e\x1a\x8c\x0b\x93\x70\xd6\xd8\xa2\xe0\x14\xa4\x0d\x9a\x6a\x12\x67\x46\xca\x66\x0a\xd0\xd6\x8b\x75\x14\xa6\x40\xad\x1c\x11\x96\x93\x04\x7e\x60\x53\xde\x9c\xf7\xe5\x01\xbf\x3e\xe4\xbf\x01\x00\x00\xff\xff\x7a\xdc\x23\x21\x4e\x05\x00\x00"

func httprouter_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_ifaceTmpl,
		"httprouter_iface.tmpl",
	)
}

func httprouter_ifaceTmpl() (*asset, error) {
	bytes, err := httprouter_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_iface.tmpl", size: 1358, mode: os.FileMode(0644), modTime: time.Unix(1583512325, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0x48, 0x54, 0xf1, 0x45, 0x81, 0xe9, 0x27, 0x7, 0x4b, 0xf3, 0x37, 0x58, 0x77, 0xb4, 0x50, 0x45, 0xfa, 0x4, 0x14, 0xef, 0xe8, 0xbf, 0xaf, 0xe, 0xc8, 0x6d, 0xdf, 0x22, 0x1f, 0x77, 0xa7}}
	return a, nil
}

var _mux_ifaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4b\x6f\xdb\x3c\x10\xbc\xf3\x57\x2c\x7c\x92\x82\x7c\x14\xf0\x1d\x03\xe4\x50\xe4\xd1\xe4\x90\xc4\xb5\x5d\xf4\x50\xf4\x40\x4b\x2b\x99\x88\x48\xaa\x7c\xb8\x16\x08\xfe\xf7\x82\x94\xfc\x50\x8c\xfa\xd2\x4b\x7d\x31\xb9\xdc\xd9\xdd\x99\x59\xbb\x28\xe0\x4e\x55\x08\x0d\x4a\xd4\xcc\x62\x05\xeb\x1e\x1a\xf5\x9f\xe0\x9a\xc2\xfd\x1b\xbc\xbe\xad\xe0\xe1\xfe\x79\x45\x09\xe9\x58\xf9\xce\x1a\x04\xef\x81\xce\xdf\x9b\x57\x26\x10\x42\x20\x84\x8b\x4e\x69\x0b\x19\x01\x00\x98\x49\xb4\xc5\xc6\xda\x6e\x46\x86\x7b\xc3\xed\xc6\xad\x69\xa9\x44\xc1\x5a\x2e\xfa\x42\x70\x5d\x6c\xff\x9f\x9d\xbd\x36\x4a\xf3\xb6\x65\x85\x70\xbb\x19\xc9\x09\xf1\x9e\xd7\x20\x95\x7d\x10\x9d\xed\x97\x56\x03\xbd\x53\x42\xa0\xb4\xb1\x69\x51\x80\xf7\xfb\x40\x08\xc4\x7b\x94\x55\x08\xc4\xf6\x5d\x1c\x90\xae\xfa\x0e\xe3\x80\x21\x00\x97\x16\x75\xcd\x4a\x04\x3f\xd4\xa4\xcf\xe6\x15\xb1\xba\xdb\x30\x2e\x43\x48\x73\x44\x15\xe2\x15\x3a\xad\xb6\xbc\x42\x10\xbc\xaa\x5a\xfc\xc5\x34\x1a\xa8\x95\x06\xe1\x76\x29\x31\x65\x65\x39\x7c\xff\x21\xdc\x8e\xbe\x1c\xb2\x1e\x9d\x2c\x0f\x43\x78\xaf\x99\x6c\x10\xe8\x23\xc7\xb6\x32\x63\x8f\x8b\x7c\xc6\x21\x26\x9c\x06\xd0\x50\x72\x38\xd3\x17\xb4\x1b\x55\x0d\xc4\xb2\xa8\x32\x5d\xa0\xe9\x94\x34\xf8\x4d\x73\x8b\xfa\x1a\xae\xc6\xe8\x4f\x87\xc6\xe6\x87\x91\x02\x89\x92\x2d\xb0\xe1\xc6\xa2\x9e\x08\xb4\x44\xbd\x65\xd2\x82\x1e\x1f\x3f\xc8\x67\xc6\x67\xab\x92\x08\xb5\x93\xe5\xc5\x3a\x99\x86\xab\xa8\xcd\x42\xb9\x34\x90\x99\xd6\xcb\xf7\x2e\x4c\x94\xf8\xac\x95\xeb\xf6\x3a\xe8\x84\x84\x9b\x5b\xd0\x74\xce\xec\x66\xae\xb1\xe6\xbb\xcc\x0f\x59\x21\xa7\x4b\xb7\x1e\x72\xb2\x44\xb0\x35\x78\x8e\x3c\x31\xe3\x8f\x96\x3b\x83\x50\x26\xdb\xa3\xc5\x03\x38\xbd\x9d\xba\x7f\x73\x0b\x86\x8e\xb6\x9f\x34\xa1\x5f\x0d\x66\x27\x79\x94\xd2\xa3\xda\xfb\x06\x07\x49\x13\xc6\x00\x97\xb5\x8a\x42\x8e\xad\x2e\xef\xc9\x93\xb5\xdd\x27\xd9\x03\x8d\x87\xc1\xf8\xa9\x42\xf4\x89\xc9\xaa\x4d\xab\x97\x79\x9f\xa4\x0a\xe1\x1a\x0c\xfd\xb0\x28\x39\x4d\xa0\xf8\x19\xc2\x26\xa6\x1f\xab\x86\x90\x9f\x3b\xf2\xa4\x8c\x0d\xe1\x88\x8c\xf7\x04\x4b\xf1\x7c\x64\x9a\x70\x5b\xd6\xf2\x0a\xbf\x38\xd4\x3d\xd0\xf8\xc5\xd1\x9c\x42\xc7\x50\xe6\x3d\x97\x75\xcb\xec\x59\x6a\x3e\xdd\xf2\x33\x43\xff\x82\x68\xfc\x1b\x3b\x32\x4d\x2e\xfd\x5b\x5c\xc7\x1d\xdd\xff\x4a\x7f\x07\x00\x00\xff\xff\x41\x7a\x4f\xca\x8f\x05\x00\x00"

func mux_ifaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_ifaceTmpl,
		"mux_iface.tmpl",
	)
}

func mux_ifaceTmpl() (*asset, error) {
	bytes, err := mux_ifaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_iface.tmpl", size: 1423, mode: os.FileMode(0644), modTime: time.Unix(1583512325, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0xae, 0xfe, 0x3b, 0xa9, 0x1b, 0x2a, 0x64, 0xbd, 0x6c, 0x59, 0x52, 0xfa, 0xe, 0x1, 0x5f, 0x46, 0x7e, 0x45, 0x78, 0xd4, 0x29, 0xb2, 0x6, 0xb4, 0x9d, 0x5f, 0x79, 0x80, 0xb1, 0x67, 0x15}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"chi_iface.tmpl":        chi_ifaceTmpl,
	"gin_iface.tmpl":        gin_ifaceTmpl,
	"httprouter_iface.tmpl": httprouter_ifaceTmpl,
	"mux_iface.tmpl":        mux_ifaceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"chi_iface.tmpl":        {chi_ifaceTmpl, map[string]*bintree{}},
	"gin_iface.tmpl":        {gin_ifaceTmpl, map[string]*bintree{}},
	"httprouter_iface.tmpl": {httprouter_ifaceTmpl, map[string]*bintree{}},
	"mux_iface.tmpl":        {mux_ifaceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
