// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.1.0

package v2

import (
	"net/http"

	"github.com/alimy/mir/v4"
	"github.com/gorilla/mux"
)

type _binding_ interface {
	Bind(*http.Request) mir.Error
}

type _render_ interface {
	Render(http.ResponseWriter)
}

type _default_ interface {
	Bind(*http.Request, any) mir.Error
	Render(http.ResponseWriter, any, mir.Error)
}

type LoginReq struct {
	AgentInfo AgentInfo `json:"agent_info"`
	Name      string    `json:"name"`
	Passwd    string    `json:"passwd"`
}

type AgentInfo struct {
	Platform  string `json:"platform"`
	UserAgent string `json:"user_agent"`
}

type LoginResp struct {
	UserInfo
	ServerInfo ServerInfo `json:"server_info"`
	JwtToken   string     `json:"jwt_token"`
}

type ServerInfo struct {
	ApiVer string `json:"api_ver"`
}

type UserInfo struct {
	Name string `json:"name"`
}

type TweetsReq struct {
	Date string `json:"date"`
}

type TweetsResp struct {
	Tweets []Tweet `json:"tweets"`
	Total  uint32  `json:"total"`
}

type Tweet struct {
	Type    string `json:"type"`
	Content string `json:"content"`
}

type Site interface {
	_default_

	MultiAttachments(http.ResponseWriter, *http.Request)
	ManyResources(http.ResponseWriter, *http.Request)
	AnyStaticks(http.ResponseWriter, *http.Request)
	Statics(http.ResponseWriter, *http.Request)
	Assets(http.ResponseWriter, *http.Request, *LoginReq) mir.Error
	SimpleUpload(http.ResponseWriter, *http.Request, *LoginReq) (*LoginResp, mir.Error)
	FileUpload(http.ResponseWriter, *http.Request)
	ImageUpload(http.ResponseWriter, *http.Request)
	Logout() mir.Error
	Login(*LoginReq) (*LoginResp, mir.Error)
	PrevTweets(*TweetsReq) (*TweetsResp, mir.Error)
	NextTweets(*TweetsReq) (*TweetsResp, mir.Error)
	Articles() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

// RegisterSiteServant register Site servant to mux
func RegisterSiteServant(e *mux.Router, s Site) {
	router := e.PathPrefix("/v2").Subrouter()

	// register routes info to router

	router.HandleFunc("/attachments/{name}/", s.MultiAttachments).Methods("OPTIONS", "HEAD", "GET")
	router.HandleFunc("/resources/{name}/", s.ManyResources).Methods("OPTIONS", "HEAD", "GET")
	router.HandleFunc("/anystaticks/{name}/", s.AnyStaticks).Methods("GET", "HEAD", "PUT", "PATCH", "DELETE", "CONNECT", "POST", "OPTIONS", "TRACE")
	router.HandleFunc("/statics/{name}/", s.Statics).Methods("GET")
	router.HandleFunc("/assets/{name}/", func(rw http.ResponseWriter, hr *http.Request) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}
		req := new(LoginReq)
		if err := s.Bind(hr, req); err != nil {
			s.Render(rw, nil, err)
			return
		}
		s.Render(rw, nil, s.Assets(rw, hr, req))
	}).Methods("GET")
	router.HandleFunc("/upload/simple/{name}/", func(rw http.ResponseWriter, hr *http.Request) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}
		req := new(LoginReq)
		if err := s.Bind(hr, req); err != nil {
			s.Render(rw, nil, err)
			return
		}
		resp, err := s.SimpleUpload(rw, hr, req)
		s.Render(rw, resp, err)
	}).Methods("POST")
	router.HandleFunc("/upload/file/{name}/", s.FileUpload).Methods("POST")
	router.HandleFunc("/upload/image/{name}/", s.ImageUpload).Methods("POST")
	router.HandleFunc("/user/logout/", func(rw http.ResponseWriter, hr *http.Request) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.Logout())
	}).Methods("POST")
	router.HandleFunc("/user/login/", func(rw http.ResponseWriter, hr *http.Request) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}
		req := new(LoginReq)
		if err := s.Bind(hr, req); err != nil {
			s.Render(rw, nil, err)
			return
		}
		resp, err := s.Login(req)
		s.Render(rw, resp, err)
	}).Methods("POST")
	router.HandleFunc("/tweets/prev", func(rw http.ResponseWriter, hr *http.Request) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}
		req := new(TweetsReq)
		if err := s.Bind(hr, req); err != nil {
			s.Render(rw, nil, err)
			return
		}
		resp, err := s.PrevTweets(req)
		s.Render(rw, resp, err)
	}).Methods("HEAD", "GET", "POST")
	router.HandleFunc("/tweets/next", func(rw http.ResponseWriter, hr *http.Request) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}
		req := new(TweetsReq)
		if err := s.Bind(hr, req); err != nil {
			s.Render(rw, nil, err)
			return
		}
		resp, err := s.NextTweets(req)
		s.Render(rw, resp, err)
	}).Methods("GET", "POST", "PUT", "PATCH", "DELETE", "TRACE", "HEAD", "CONNECT", "OPTIONS")
	router.HandleFunc("/articles/{category}/{id:[0-9]+}", func(rw http.ResponseWriter, hr *http.Request) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.Articles())
	}).Methods("GET").
		Host("{subdomain}.example.com").
		Queries("filter", "{filter}", "foo", "bar", "id", "{id:[0-9]+}")
	router.HandleFunc("/index/", func(rw http.ResponseWriter, hr *http.Request) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.Index())
	}).Methods("GET")
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) MultiAttachments(rw http.ResponseWriter, hr *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) ManyResources(rw http.ResponseWriter, hr *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) AnyStaticks(rw http.ResponseWriter, hr *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) Statics(rw http.ResponseWriter, hr *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) Assets(rw http.ResponseWriter, hr *http.Request, req *LoginReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) SimpleUpload(rw http.ResponseWriter, hr *http.Request, req *LoginReq) (*LoginResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) FileUpload(rw http.ResponseWriter, hr *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) ImageUpload(rw http.ResponseWriter, hr *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) Logout() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Login(req *LoginReq) (*LoginResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) PrevTweets(req *TweetsReq) (*TweetsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) NextTweets(req *TweetsReq) (*TweetsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}
