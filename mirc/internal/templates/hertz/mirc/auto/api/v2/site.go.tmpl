// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.1.0

package v2

import (
	"context"
	"net/http"

	"github.com/alimy/mir/v4"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/route"
)

type _binding_ interface {
	Bind(context.Context, *app.RequestContext) mir.Error
}

type _render_ interface {
	Render(context.Context, *app.RequestContext)
}

type _default_ interface {
	Bind(context.Context, *app.RequestContext, any) mir.Error
	Render(context.Context, *app.RequestContext, any, mir.Error)
}

type LoginReq struct {
	AgentInfo AgentInfo `json:"agent_info"`
	Name      string    `json:"name"`
	Passwd    string    `json:"passwd"`
}

type AgentInfo struct {
	Platform  string `json:"platform"`
	UserAgent string `json:"user_agent"`
}

type LoginResp struct {
	UserInfo
	ServerInfo ServerInfo `json:"server_info"`
	JwtToken   string     `json:"jwt_token"`
}

type ServerInfo struct {
	ApiVer string `json:"api_ver"`
}

type UserInfo struct {
	Name string `json:"name"`
}

type TweetsReq struct {
	Date string `json:"date"`
}

type TweetsResp struct {
	Tweets []Tweet `json:"tweets"`
	Total  uint32  `json:"total"`
}

type Tweet struct {
	Type    string `json:"type"`
	Content string `json:"content"`
}

type Site interface {
	_default_

	MultiAttachments(context.Context, *app.RequestContext)
	ManyResources(context.Context, *app.RequestContext)
	AnyStaticks(context.Context, *app.RequestContext)
	Statics(context.Context, *app.RequestContext)
	Assets(context.Context, *app.RequestContext, *LoginReq) mir.Error
	SimpleUpload(context.Context, *app.RequestContext, *LoginReq) (*LoginResp, mir.Error)
	FileUpload(context.Context, *app.RequestContext)
	ImageUpload(context.Context, *app.RequestContext)
	Logout() mir.Error
	Login(*LoginReq) (*LoginResp, mir.Error)
	PrevTweets(*TweetsReq) (*TweetsResp, mir.Error)
	NextTweets(*TweetsReq) (*TweetsResp, mir.Error)
	Articles() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

type SiteChain interface {
	ChainMultiAttachments() []app.HandlerFunc
	ChainSimpleUpload() []app.HandlerFunc
	ChainFileUpload() []app.HandlerFunc
	ChainIndex() []app.HandlerFunc

	mustEmbedUnimplementedSiteChain()
}

// RegisterSiteServant register Site servant to hertz
func RegisterSiteServant(e *route.Engine, s Site, m ...SiteChain) {
	var cc SiteChain
	if len(m) > 0 {
		cc = m[0]
	} else {
		cc = &UnimplementedSiteChain{}
	}
	router := e.Group("v2")

	// register routes info to router
	{
		h := append(cc.ChainMultiAttachments(), s.MultiAttachments)
		router.Handle("OPTIONS", "/attachments/:name/", h...)
		router.Handle("HEAD", "/attachments/:name/", h...)
		router.Handle("GET", "/attachments/:name/", h...)
	}
	{
		h := s.ManyResources
		router.Handle("OPTIONS", "/resources/:name/", h)
		router.Handle("HEAD", "/resources/:name/", h)
		router.Handle("GET", "/resources/:name/", h)
	}
	router.Any("/anystaticks/:name/", s.AnyStaticks)
	router.Handle("GET", "/statics/:name/", s.Statics)
	router.Handle("GET", "/assets/:name/", func(c context.Context, ctx *app.RequestContext) {
		select {
		case <-c.Done():
			return
		default:
		}
		req := new(LoginReq)
		if err := s.Bind(c, ctx, req); err != nil {
			s.Render(c, ctx, nil, err)
			return
		}
		s.Render(c, ctx, nil, s.Assets(c, ctx, req))
	})
	router.Handle("POST", "/upload/simple/:name/", append(cc.ChainSimpleUpload(), func(c context.Context, ctx *app.RequestContext) {
		select {
		case <-c.Done():
			return
		default:
		}
		req := new(LoginReq)
		if err := s.Bind(c, ctx, req); err != nil {
			s.Render(c, ctx, nil, err)
			return
		}
		resp, err := s.SimpleUpload(c, ctx, req)
		s.Render(c, ctx, resp, err)
	})...)
	router.Handle("POST", "/upload/file/:name/", append(cc.ChainFileUpload(), s.FileUpload)...)
	router.Handle("POST", "/upload/image/:name/", s.ImageUpload)
	router.Handle("POST", "/user/logout/", func(c context.Context, ctx *app.RequestContext) {
		select {
		case <-c.Done():
			return
		default:
		}

		s.Render(c, ctx, nil, s.Logout())
	})
	router.Handle("POST", "/user/login/", func(c context.Context, ctx *app.RequestContext) {
		select {
		case <-c.Done():
			return
		default:
		}
		req := new(LoginReq)
		if err := s.Bind(c, ctx, req); err != nil {
			s.Render(c, ctx, nil, err)
			return
		}
		resp, err := s.Login(req)
		s.Render(c, ctx, resp, err)
	})
	{
		h := func(c context.Context, ctx *app.RequestContext) {
			select {
			case <-c.Done():
				return
			default:
			}
			req := new(TweetsReq)
			if err := s.Bind(c, ctx, req); err != nil {
				s.Render(c, ctx, nil, err)
				return
			}
			resp, err := s.PrevTweets(req)
			s.Render(c, ctx, resp, err)
		}
		router.Handle("GET", "/tweets/prev/", h)
		router.Handle("POST", "/tweets/prev/", h)
		router.Handle("HEAD", "/tweets/prev/", h)
	}
	router.Any("/tweets/next/", func(c context.Context, ctx *app.RequestContext) {
		select {
		case <-c.Done():
			return
		default:
		}
		req := new(TweetsReq)
		if err := s.Bind(c, ctx, req); err != nil {
			s.Render(c, ctx, nil, err)
			return
		}
		resp, err := s.NextTweets(req)
		s.Render(c, ctx, resp, err)
	})
	router.Handle("GET", "/articles/:category/", func(c context.Context, ctx *app.RequestContext) {
		select {
		case <-c.Done():
			return
		default:
		}

		s.Render(c, ctx, nil, s.Articles())
	})
	router.Handle("GET", "/index/", append(cc.ChainIndex(), func(c context.Context, ctx *app.RequestContext) {
		select {
		case <-c.Done():
			return
		default:
		}

		s.Render(c, ctx, nil, s.Index())
	})...)
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) MultiAttachments(c context.Context, ctx *app.RequestContext) {
	ctx.String(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) ManyResources(c context.Context, ctx *app.RequestContext) {
	ctx.String(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) AnyStaticks(c context.Context, ctx *app.RequestContext) {
	ctx.String(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Statics(c context.Context, ctx *app.RequestContext) {
	ctx.String(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Assets(c context.Context, ctx *app.RequestContext, req *LoginReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) SimpleUpload(c context.Context, ctx *app.RequestContext, req *LoginReq) (*LoginResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) FileUpload(c context.Context, ctx *app.RequestContext) {
	ctx.String(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) ImageUpload(c context.Context, ctx *app.RequestContext) {
	ctx.String(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Logout() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Login(req *LoginReq) (*LoginResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) PrevTweets(req *TweetsReq) (*TweetsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) NextTweets(req *TweetsReq) (*TweetsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}

// UnimplementedSiteChain can be embedded to have forward compatible implementations.
type UnimplementedSiteChain struct {
}

func (b *UnimplementedSiteChain) ChainMultiAttachments() []app.HandlerFunc {
	return nil
}

func (b *UnimplementedSiteChain) ChainSimpleUpload() []app.HandlerFunc {
	return nil
}

func (b *UnimplementedSiteChain) ChainFileUpload() []app.HandlerFunc {
	return nil
}

func (b *UnimplementedSiteChain) ChainIndex() []app.HandlerFunc {
	return nil
}

func (b *UnimplementedSiteChain) mustEmbedUnimplementedSiteChain() {}
