// Code generated by go-mir. DO NOT EDIT.

package v1

import (
	"net/http"

	macaron "gopkg.in/macaron.v1"
)

type Site interface {
	// Chain provide handlers chain for macaron
	Chain() []macaron.Handler

	Index(*macaron.Context)
	Articles(*macaron.Context)

    mustEmbedUnimplementedSiteServant()
}

// RegisterSiteServant register Site servant to macaron
func RegisterSiteServant(m *macaron.Macaron, s Site) {
	// use chain for router
	middlewares := s.Chain()
	m.Group("v1", func() {
		m.Handle("GET", "/index/", []macaron.Handler{s.Index})
		m.Handle("GET", "/articles/:category/", []macaron.Handler{s.Articles})
	}, middlewares...)
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct {
}

func (UnimplementedSiteServant) Chain() []macaron.Handler {
	return nil
}

func (UnimplementedSiteServant) Index(c *macaron.Context) {
	c.Resp.WriteHeader(http.StatusNotImplemented)
	c.Resp.Write([]byte("method Index not implemented"))
}

func (UnimplementedSiteServant) Articles(c *macaron.Context) {
	c.Resp.WriteHeader(http.StatusNotImplemented)
	c.Resp.Write([]byte("method Articles not implemented"))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}
