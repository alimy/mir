// Code generated by go-mir. DO NOT EDIT.

package v1

import (
	"net/http"

	"github.com/alimy/mir/v2"

	mux "github.com/gorilla/mux"
)

// just use for mir.Any method to register
var httpMethods = mir.HttpMethods

type Site interface {
	// Chain provide middlewares for mux
	Chain() []mux.MiddlewareFunc

	Index(http.ResponseWriter, *http.Request)
	Articles(http.ResponseWriter, *http.Request)

    mustEmbedUnimplementedSiteServant()
}

// RegisterSiteServant register Site servant to mux
func RegisterSiteServant(r *mux.Router, s Site) {
	router := r.PathPrefix("v1").Subrouter()
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	router.HandleFunc("/index/", s.Index).
		Methods("GET")
	router.HandleFunc("/articles/{category}/{id:[0-9]+}", s.Articles).
		Methods("GET").
		Host("{subdomain}.example.com").
		Queries("filter", "{filter}", "foo", "bar", "id", "{id:[0-9]+}")
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct {
}

func (UnimplementedSiteServant) Chain() []mux.MiddlewareFunc {
	return nil
}

func (UnimplementedSiteServant) Index(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method Index not implemented"))
}

func (UnimplementedSiteServant) Articles(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method Articles not implemented"))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}
