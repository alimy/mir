// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/chi_go_mod.tmpl (125B)
// templates/chi_main.tmpl (372B)
// templates/chi_mirc_main.tmpl (543B)
// templates/chi_mirc_routes_site.tmpl (313B)
// templates/chi_mirc_routes_site_v1.tmpl (342B)
// templates/chi_mirc_routes_site_v2.tmpl (351B)
// templates/echo_go_mod.tmpl (119B)
// templates/echo_main.tmpl (344B)
// templates/echo_mirc_main.tmpl (544B)
// templates/echo_mirc_routes_site.tmpl (301B)
// templates/echo_mirc_routes_site_v1.tmpl (330B)
// templates/echo_mirc_routes_site_v2.tmpl (339B)
// templates/fiber_go_mod.tmpl (116B)
// templates/fiber_main.tmpl (351B)
// templates/fiber_mirc_main.tmpl (570B)
// templates/fiber_mirc_routes_site.tmpl (301B)
// templates/fiber_mirc_routes_site_v1.tmpl (330B)
// templates/fiber_mirc_routes_site_v2.tmpl (340B)
// templates/gin_go_mod.tmpl (115B)
// templates/gin_main.tmpl (335B)
// templates/gin_mirc_main.tmpl (543B)
// templates/gin_mirc_routes_site.tmpl (301B)
// templates/gin_mirc_routes_site_v1.tmpl (330B)
// templates/gin_mirc_routes_site_v2.tmpl (340B)
// templates/httprouter_go_mod.tmpl (126B)
// templates/httprouter_main.tmpl (402B)
// templates/httprouter_mirc_main.tmpl (550B)
// templates/httprouter_mirc_routes_site.tmpl (301B)
// templates/httprouter_mirc_routes_site_v1.tmpl (330B)
// templates/httprouter_mirc_routes_site_v2.tmpl (339B)
// templates/iris_go_mod.tmpl (119B)
// templates/iris_main.tmpl (372B)
// templates/iris_mirc_main.tmpl (544B)
// templates/iris_mirc_routes_site.tmpl (308B)
// templates/iris_mirc_routes_site_v1.tmpl (337B)
// templates/iris_mirc_routes_site_v2.tmpl (346B)
// templates/macaron_go_mod.tmpl (110B)
// templates/macaron_main.tmpl (282B)
// templates/macaron_mirc_main.tmpl (547B)
// templates/macaron_mirc_routes_site.tmpl (301B)
// templates/macaron_mirc_routes_site_v1.tmpl (330B)
// templates/macaron_mirc_routes_site_v2.tmpl (339B)
// templates/makefile.tmpl (307B)
// templates/mux_go_mod.tmpl (113B)
// templates/mux_main.tmpl (374B)
// templates/mux_mirc_main.tmpl (543B)
// templates/mux_mirc_routes_site.tmpl (377B)
// templates/mux_mirc_routes_site_v1.tmpl (406B)
// templates/mux_mirc_routes_site_v2.tmpl (415B)
// templates/readme.tmpl (142B)

package cmd

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _chi_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x41\xae\xc2\x20\x10\x06\xe0\xfd\x9c\xe2\x5f\xbe\x17\xe3\x20\xa4\xe7\x30\x5e\x81\x22\x81\x89\x8c\xa3\xa4\x90\x98\xa6\x77\x77\xef\xfe\x53\xbb\x8f\x96\xb1\xef\xe0\xdb\xa3\x5c\xa3\x66\x1c\x07\x51\x31\x78\xf6\x81\xa8\xe7\xf7\x90\x9e\xf1\x47\x00\x50\x64\xab\x63\xe5\x64\xea\x62\x13\xfd\x38\x95\xee\x66\xc0\x0c\xbc\xf0\xe5\x97\x14\x3b\xa7\x2a\x2e\x55\xc1\x5c\xd8\x73\x38\xc9\x33\x99\xbe\xe2\x26\x6b\xcb\xf4\x4f\xdf\x00\x00\x00\xff\xff\x53\xfc\x8b\x71\x7d\x00\x00\x00"

func chi_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_go_modTmpl,
		"chi_go_mod.tmpl",
	)
}

func chi_go_modTmpl() (*asset, error) {
	bytes, err := chi_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_go_mod.tmpl", size: 125, mode: os.FileMode(0644), modTime: time.Unix(1594226524, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x47, 0x1, 0x69, 0xb0, 0xdc, 0x4b, 0xe7, 0xa0, 0xd1, 0x1b, 0x5e, 0x1e, 0xa8, 0xbd, 0x9, 0xab, 0xec, 0x5a, 0x94, 0x89, 0x75, 0xe, 0xb3, 0x87, 0xf, 0xc1, 0x84, 0xc6, 0x1c, 0xfb, 0xb1, 0x34}}
	return a, nil
}

var _chi_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xbd\x4e\xc4\x30\x10\x84\xfb\x7d\x8a\xc5\x95\x23\x41\x7c\xe5\xe9\xd0\x15\x48\x88\x0a\x71\x12\xf0\x02\xc6\xec\x39\x2b\x12\x3b\xda\x6c\xa0\x40\x79\x77\x64\x27\xa7\x2b\x70\xe3\x9f\xd9\x19\xcf\x37\xfa\xf0\xe5\x23\xe1\xe0\x39\x01\xf0\x30\x66\x51\xb4\x80\x88\x68\xfa\x1c\xcd\x7a\x4a\xa4\xae\x53\x1d\x0d\xac\xf7\xc8\xda\xcd\x1f\x6d\xc8\x83\x8b\xf9\x2e\x74\xec\x42\xc7\x06\x1a\x80\xf3\x9c\x42\x0d\xb3\x0d\xfe\xd6\x61\xc1\xc3\x11\x43\xc7\xed\x0b\xfd\xbc\xe6\x59\x49\x6c\xb3\xc6\x38\x87\x42\x91\x27\x25\xc1\x89\xe4\xdb\x27\x9d\x50\x73\x19\x5e\x9d\x9b\xf8\xb6\x69\x56\xae\xc6\x49\xbd\xe8\xc5\x55\x77\x0e\x54\x45\x3e\x23\x49\xfd\xb4\x34\x6e\x9f\x4b\x44\x7a\x48\x9f\x25\x85\xac\x39\xec\x77\xfb\x9d\xb9\x45\x69\xee\xeb\xdc\xcd\x11\x13\xf7\x5b\xd7\xb2\xfa\x1c\xdb\x27\xaf\xbe\xb7\x24\xd2\xd4\xe7\x05\x96\x8d\xec\x7f\xa5\x8a\xb6\x72\x5d\x88\x9d\xc3\xf7\xd3\xe3\xe9\x70\xa5\x93\xa2\x57\x36\x81\x05\xfe\x02\x00\x00\xff\xff\x02\x8d\x70\x72\x74\x01\x00\x00"

func chi_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mainTmpl,
		"chi_main.tmpl",
	)
}

func chi_mainTmpl() (*asset, error) {
	bytes, err := chi_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_main.tmpl", size: 372, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0x7b, 0xbd, 0xf2, 0x7c, 0x50, 0x17, 0xfb, 0x58, 0x6e, 0xc5, 0xb6, 0xca, 0x6f, 0xce, 0x60, 0x21, 0x3f, 0xae, 0xed, 0x88, 0xec, 0xd8, 0x81, 0x7c, 0xe7, 0x19, 0xdd, 0x34, 0xbd, 0xcb, 0xbe}}
	return a, nil
}

var _chi_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xc1\x6a\xf3\x30\x10\x84\xef\x7a\x8a\xfd\x75\x92\xe1\xc7\xa2\x39\xa6\xe4\x54\x68\xe9\xa1\x6d\x68\x1e\xa0\xa8\xce\x46\x5e\x62\xef\x9a\xb5\x1c\x28\xc1\xef\x5e\xa4\x84\x34\xa7\xa6\x3e\x18\xad\xf6\x9b\xd1\xcc\x10\x9a\x7d\x88\x08\x7d\x20\x36\x86\xfa\x41\x34\x81\x33\x00\x00\xb6\x93\x68\x4d\x39\xd6\x60\x23\xa5\x76\xfa\xac\x1b\xe9\x7d\xe8\xa8\xff\xf2\x3d\xa9\x3f\x2c\x7c\x23\x8a\xf6\x16\x84\x1c\x89\xf1\x6c\xf6\x01\xf6\x78\x84\x7a\xbd\x8f\xaf\xa1\x47\x98\xe7\x4c\x35\x5e\x65\x4a\x38\xda\xdb\x88\x3f\xdc\xfd\x89\x5a\x58\x53\x19\xe3\x7d\x94\x65\x44\x46\x0d\x09\x21\x0a\xe8\xc4\xa5\x6d\x1d\xc5\xec\x26\x6e\xca\xe0\x2a\x38\x16\xcf\x4e\x62\xbd\x56\xe2\xd4\xb1\xb3\x17\x59\x23\x5b\x84\x31\x05\x4d\xb6\x2a\x98\x0c\x69\x84\xe5\x0a\xde\x86\x44\xc2\xe3\x49\x9b\xbf\xf7\x89\x5f\x64\x8b\xee\x99\x37\xa8\x14\xba\x3c\x54\xff\x2f\xeb\xa7\x93\xa3\x68\x4e\xec\x2e\xd3\x43\x4b\x57\xd0\x86\x78\xbf\x0e\xa9\x75\xb6\xf6\x11\xd9\x9e\x57\x73\xf9\xd3\x0e\x50\x35\xbf\x7d\x56\xa3\xcb\x61\xaa\xfb\x72\xfd\x6f\x05\x4c\x1d\xfc\xe4\xc9\x7d\x1e\x43\x0a\x9d\x43\xd5\xea\xca\xe7\x97\xa2\x3b\x62\x1a\x5b\x5b\x99\xd9\x7c\x07\x00\x00\xff\xff\x44\x2c\x1c\x89\x1f\x02\x00\x00"

func chi_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mirc_mainTmpl,
		"chi_mirc_main.tmpl",
	)
}

func chi_mirc_mainTmpl() (*asset, error) {
	bytes, err := chi_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_mirc_main.tmpl", size: 543, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0x77, 0x74, 0x5c, 0xfb, 0x7e, 0x98, 0x42, 0x2f, 0x15, 0xd2, 0x73, 0x9, 0x7e, 0xef, 0x4b, 0xf9, 0x91, 0x1b, 0x7d, 0x35, 0x0, 0xf4, 0x7b, 0x24, 0xa2, 0x58, 0x9, 0x4b, 0x1c, 0x32, 0xd2}}
	return a, nil
}

var _chi_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xc1\x4a\xc4\x40\x0c\x86\xef\x79\x8a\x30\xa7\x16\xd9\x8d\x78\x73\x6f\x8b\x88\x78\xf6\x28\xc2\x8e\xd3\xb4\x1b\xdc\x99\x29\x69\xaa\x96\xd2\x77\x97\x59\x06\xc4\x93\x97\xf0\xe5\xff\xfe\x64\xf4\xe1\xc3\x0f\x8c\x9a\x67\xe3\x09\x40\xe2\x98\xd5\xb0\x01\x44\xc4\x3d\xba\x41\xec\x3c\xbf\xef\x43\x8e\xe4\x2f\x12\x17\x8a\xa2\xf4\x79\xe7\xfe\xf1\xc4\x69\x90\xc4\x0e\x5a\x80\x7e\x4e\x01\x25\x89\x35\x2d\xae\xd7\xbb\x63\xd7\x3d\x26\xd3\xa5\x49\xfc\xd5\xbc\x88\x71\xdb\xc2\x06\x40\x84\x65\xc1\xa9\x0c\x49\xc6\xda\xfb\x50\xa8\xcf\x60\xcb\xc8\xd5\x9a\xce\xc1\xea\xa7\x87\xb3\x97\xf4\x0b\xa7\x28\x7a\x70\x3b\x77\xba\xca\xe7\xd4\xf1\x77\x81\x27\x36\xc4\x2a\x49\x4a\x4a\xb5\x72\x54\x93\x70\xe1\xe9\x6f\xc5\xd7\x94\xd6\xe0\x8d\x87\xac\xcb\x46\xab\x74\x87\xd7\xdb\xdd\xfd\xdb\xcd\xe6\x4e\xb0\xc1\x4f\x00\x00\x00\xff\xff\xd9\x33\x77\xc4\x39\x01\x00\x00"

func chi_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mirc_routes_siteTmpl,
		"chi_mirc_routes_site.tmpl",
	)
}

func chi_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := chi_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_mirc_routes_site.tmpl", size: 313, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xc9, 0xf1, 0x5, 0xc4, 0x5f, 0xc5, 0xa, 0xaf, 0xbd, 0xbb, 0x5, 0x98, 0x9e, 0xe5, 0xa7, 0x30, 0x15, 0x23, 0x6, 0xf3, 0xd5, 0x2e, 0x4b, 0xbe, 0x96, 0x5b, 0x2, 0x36, 0x25, 0xc7, 0xbd}}
	return a, nil
}

var _chi_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xc1\x4a\xc4\x40\x0c\x86\xef\x79\x8a\x30\xa7\x16\xd9\x8d\xf5\xe6\xde\x16\x11\xf1\xec\x51\x84\x8e\xd3\xb4\x1b\xdc\xa6\x65\x36\xad\x96\xd2\x77\x97\xd6\x81\xc5\xd3\x5e\xc2\x9f\xff\xfb\x92\xde\x87\x2f\xdf\x30\x8e\x05\x80\xb4\x7d\x17\x0d\x33\x40\x44\xdc\xa3\x6b\xc4\x4e\xc3\xe7\x3e\x74\x2d\xf9\xb3\xb4\x13\xb5\x12\x69\x7c\x70\x37\x38\xb1\x36\xa2\xec\x20\x07\xa8\x07\x0d\x28\x2a\x96\xe5\x38\x6f\x77\xc7\xaa\x7a\x56\x8b\x53\xa6\xfc\x9d\xbd\x89\x71\x9e\xc3\x02\x40\x84\xeb\x82\x97\x75\x8c\x05\x8a\x1a\xc7\xda\x07\x46\xd1\xba\x03\x9b\x7a\x4e\x82\xc5\x21\x58\x7a\xf6\x74\xf2\xa2\xd7\x50\xb6\x12\x0f\x6e\xe7\xca\x0d\xbe\xc4\x6e\xe8\xaf\xe1\x0f\x8e\x45\xa2\xaf\x5a\xf1\xcf\x46\xd9\x10\x13\x25\x59\x5b\x4a\xca\x31\x9a\x84\x33\x5f\xfe\x2b\x3e\xb5\x34\x07\x6f\xdc\x74\x71\x5a\x68\x96\xea\xf0\x7e\xbf\x7b\xfc\xb8\x5b\x5c\x09\x0b\xfc\x06\x00\x00\xff\xff\x5c\x84\x18\x00\x56\x01\x00\x00"

func chi_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mirc_routes_site_v1Tmpl,
		"chi_mirc_routes_site_v1.tmpl",
	)
}

func chi_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := chi_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_mirc_routes_site_v1.tmpl", size: 342, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0x3, 0x8, 0x84, 0x2c, 0xd6, 0x61, 0xe8, 0x65, 0xdd, 0x41, 0xf6, 0xb1, 0xc1, 0xb9, 0x38, 0x35, 0xdd, 0x4d, 0xd0, 0x2d, 0x54, 0x93, 0x1d, 0x5c, 0xc, 0x6, 0x7e, 0xea, 0xd1, 0xcc, 0x60}}
	return a, nil
}

var _chi_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8d\xc1\x4a\xc4\x40\x0c\x86\xef\x79\x8a\x30\xa7\x16\x71\x23\xbd\xb9\xb7\x45\x44\x3c\x7b\x14\x61\xc7\x69\xb6\x06\x77\x66\x4a\x36\xad\x96\xd2\x77\x97\x96\x11\xd9\x93\x97\x61\xf2\x7f\xff\x97\xf4\x3e\x7c\xfa\x8e\x71\x6c\x00\x24\xf6\x59\x0d\x2b\x40\x44\xdc\xa1\xeb\xc4\x3e\x86\xf7\x5d\xc8\x91\xfc\x59\xe2\x44\x51\x94\xc6\xc6\xfd\xc3\x89\x53\x27\x89\x1d\xd4\x00\xa7\x21\x05\x94\x24\x56\xd5\x38\x6f\xde\xa1\x6d\x1f\x93\xe9\x54\x25\xfe\xaa\x5e\xc4\xb8\xae\x61\x01\x20\xc2\x75\xc0\xcb\xfa\x8c\x0d\x4a\x32\xd6\x93\x0f\x8c\x92\x4e\x19\x6c\xea\xb9\x14\x4c\x87\x60\x65\xd9\x93\xe6\xa1\xff\xfb\x1c\xa3\xe8\xde\x8d\x8d\x3b\x6e\xf4\x39\xb5\xfc\xbd\x51\x36\xc4\x42\x49\xd6\x94\x4a\xe5\xa0\x26\xe1\xcc\x97\xeb\x8a\x2f\x29\xcd\xc1\x1b\x77\x59\xa7\x85\x66\x69\xf7\xaf\x77\xb7\xf7\x6f\x37\x4b\x71\x1f\x0a\xbb\x76\x7f\x8d\xf5\xc2\x02\x3f\x01\x00\x00\xff\xff\x2a\x0e\x91\x06\x5f\x01\x00\x00"

func chi_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mirc_routes_site_v2Tmpl,
		"chi_mirc_routes_site_v2.tmpl",
	)
}

func chi_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := chi_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_mirc_routes_site_v2.tmpl", size: 351, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x7b, 0xc5, 0x84, 0x9d, 0xe0, 0xc7, 0x36, 0xfc, 0x66, 0xf3, 0xb1, 0x38, 0x27, 0x9a, 0x9e, 0x13, 0xd7, 0x7f, 0x22, 0x7b, 0xd9, 0x7a, 0xec, 0xb3, 0x49, 0xd2, 0x7, 0xae, 0x64, 0x7, 0x51}}
	return a, nil
}

var _echo_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x41\x0e\xc2\x20\x10\x05\xd0\xfd\x9c\xe2\x2f\x75\x33\x23\x84\x78\x0c\xe3\x15\x28\x4e\x28\x29\x13\x22\x16\x12\xd3\xf4\xee\xee\xdd\x3f\x6b\xaf\x51\x15\xc7\x01\x7e\x6e\xf9\x11\x4d\x71\x9e\x44\xb9\xc1\xb1\xf3\x44\x5d\xdf\xa3\x74\xc5\x85\x00\x20\x97\x7d\x1d\x0b\xa7\x66\x12\x6b\xb1\xaf\x58\xe9\x32\x3d\xa6\xe7\xc0\xb7\x7f\x52\xe3\xf2\xd9\x63\xda\x44\xd3\xda\x64\x06\xcc\xc0\x8e\xdd\x9d\xae\xf4\x0b\x00\x00\xff\xff\xa7\xf4\xa0\xb8\x77\x00\x00\x00"

func echo_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_go_modTmpl,
		"echo_go_mod.tmpl",
	)
}

func echo_go_modTmpl() (*asset, error) {
	bytes, err := echo_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_go_mod.tmpl", size: 119, mode: os.FileMode(0644), modTime: time.Unix(1594226596, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf2, 0x2c, 0x7, 0x68, 0x37, 0x35, 0x8b, 0xe8, 0x2d, 0x3e, 0xc5, 0x53, 0x37, 0x57, 0xd7, 0xe2, 0x95, 0x95, 0x7c, 0x18, 0x2c, 0x4f, 0x69, 0xc9, 0x71, 0xd3, 0x8b, 0x73, 0x34, 0xcb, 0x9c, 0x37}}
	return a, nil
}

var _echo_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xb1\x6e\xc3\x30\x0c\x44\x77\x7e\x05\xeb\x49\xee\x60\x79\xc8\xe4\x22\x5b\xdb\xb1\x19\xd2\x1f\x50\x04\x46\x16\x22\x5b\x01\x45\xa7\x43\xe1\x7f\x2f\x4c\xdb\xc8\x50\x2d\x12\x74\x77\xe4\xbd\xbb\xf3\x37\x17\x08\x07\x17\x47\x80\x38\xdc\x33\x0b\x1a\x40\x44\xac\x52\x0e\x15\xac\xcf\x10\xa5\x9f\x2e\x8d\xcf\x83\x4d\xee\x52\xc4\xf9\x9b\x25\xdf\x67\xfb\x38\x54\x50\x03\x5c\xa7\xd1\xeb\x0c\x53\xe3\xaf\x46\x08\xbb\x23\x2e\x96\xe6\x8b\x7e\x4c\xbd\xce\xb1\x16\x99\x42\x2c\x42\x8c\x85\xf8\xe1\x46\x29\x28\x59\x7d\x6a\xd8\xd5\xf3\x26\x1a\x7a\x26\x8b\x38\x96\x3d\xa6\x77\xf4\xa4\x62\xbc\x22\x31\xeb\xc2\xe6\xbc\xb8\x4c\xd5\x1d\xda\xb6\xad\xea\x37\x15\x5e\x8e\x38\xc6\xb4\x15\x5b\x4e\xca\xa1\xf9\x74\xe2\x92\x21\xe6\x5a\xbf\x67\x98\x37\x8c\xff\x1d\xf0\x55\x41\x3e\x7c\x9f\x77\x3c\x6b\xf1\xfb\xf4\x7e\xea\x9e\x3c\x9c\x27\xa1\x95\x06\x66\xf8\x0b\x00\x00\xff\xff\xde\xad\x0e\xa4\x58\x01\x00\x00"

func echo_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mainTmpl,
		"echo_main.tmpl",
	)
}

func echo_mainTmpl() (*asset, error) {
	bytes, err := echo_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_main.tmpl", size: 344, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0xb1, 0xa2, 0xfb, 0x2b, 0x87, 0x65, 0xbe, 0x59, 0x5b, 0x8e, 0xf5, 0x8a, 0x27, 0xd5, 0x7, 0x4e, 0x9c, 0x67, 0x25, 0x91, 0x78, 0xd5, 0x7a, 0x17, 0x6a, 0xc0, 0x17, 0xc, 0xf6, 0x31, 0xe3}}
	return a, nil
}

var _echo_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xc1\x4e\xf3\x30\x10\x84\xef\x7e\x8a\xfd\x7d\x72\xa4\x5f\xb1\xe8\xb1\xa8\x47\x40\x1c\x80\x8a\x3e\x00\x32\xe9\xd6\x59\x35\xd9\x8d\x36\x4e\x25\x54\xe5\xdd\x91\xdd\xaa\xf4\x44\xc9\x21\xf2\x7a\xbf\x19\xcf\x0c\xa1\xd9\x87\x88\xd0\x07\x62\x63\xa8\x1f\x44\x13\x38\x03\x00\x60\x3b\x89\xd6\x94\x63\x0d\x36\x52\x6a\xa7\xcf\xba\x91\xde\x87\x8e\xfa\x2f\xdf\x93\xfa\xc3\xc2\x37\xa2\x68\x6f\x41\xc8\x91\x18\xcf\x66\x1f\x60\x8f\x47\xa8\xd7\xfb\xf8\x1a\x7a\x84\x79\xce\x54\xe3\x55\xa6\x84\xa3\xbd\x8d\xf8\xc3\xdd\x9f\xa8\x85\x35\x95\x31\xde\x47\x59\x46\x64\xd4\x90\x10\xa2\x80\x4e\x5c\xda\xd6\x51\xcc\x6e\xe2\xa6\x0c\xae\x82\x63\xf1\xec\x24\xd6\x6b\x25\x4e\x1d\x3b\x7b\x91\x35\xb2\x45\x18\x53\xd0\x64\xab\x82\xc9\x90\x46\x58\xae\xe0\x6d\x48\x24\x3c\x9e\xb4\xf9\x7b\x9f\xf8\x45\xb6\xe8\x9e\x79\x83\x4a\xa1\xcb\x43\xf5\xff\xb2\x7e\x3a\x39\x8a\xe6\xc4\xee\x32\x3d\x34\xad\x5c\x51\x1b\xe2\xfd\x3a\xa4\xd6\xd9\xda\x47\x64\x7b\x5e\xcd\xe5\x4f\x3b\x40\xd5\xfc\xf8\x59\x8e\x2e\xa7\xa9\xee\xcb\xf5\xbf\x15\x30\x75\xf0\x13\x28\x17\x7a\x0c\x29\x74\x0e\x55\xab\x2b\x9f\x5f\x9a\xee\x88\x69\x6c\x6d\x65\x66\xf3\x1d\x00\x00\xff\xff\x3a\x89\xd9\x46\x20\x02\x00\x00"

func echo_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mirc_mainTmpl,
		"echo_mirc_main.tmpl",
	)
}

func echo_mirc_mainTmpl() (*asset, error) {
	bytes, err := echo_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_mirc_main.tmpl", size: 544, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xc0, 0x92, 0x7, 0x5, 0x4a, 0x60, 0xfe, 0xac, 0x6, 0x85, 0xd7, 0x38, 0x3c, 0xb8, 0xd4, 0xb8, 0xe3, 0x99, 0xa1, 0x9, 0x61, 0xc0, 0xb5, 0x9b, 0x24, 0x80, 0x92, 0xa6, 0xd, 0xb5, 0x4b}}
	return a, nil
}

var _echo_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xc1\x4a\xc4\x40\x0c\x86\xef\x79\x8a\x30\xa7\xf6\xe0\x06\x3c\xee\x6d\x11\x11\xcf\xbe\xc0\x8e\xd3\xb4\x1b\xdc\xc9\x94\x34\x55\x8b\xec\xbb\xcb\x94\x01\xf1\xb4\x97\xf0\xe7\xff\xbe\x64\x8e\xe9\x23\x4e\x8c\x56\x56\xe7\x05\x40\xf2\x5c\xcc\xb1\x03\x44\xc4\x03\x86\x49\xfc\xb2\xbe\x1f\x52\xc9\x14\xaf\x92\x37\xca\x62\xf4\xf9\x18\xee\x70\x62\x9d\x44\x39\x40\x0f\x30\xae\x9a\x50\x54\xbc\xeb\xf1\x67\xbf\x3b\x0d\xc3\xb3\xba\x6d\x9d\xf2\x57\xf7\x26\xce\x7d\x0f\x37\x00\x22\xac\x0b\x2e\x75\x88\x3a\xdb\x18\x53\x4d\x63\x01\xdf\x66\x6e\xd4\x6d\x4d\xde\x3e\x3d\x5d\xa2\xe8\x5f\x38\x67\xb1\x63\x78\x08\xe7\x1d\xbe\xea\xc0\xdf\x35\xbc\xb0\x23\x36\x48\x52\x5b\x6a\xca\xc9\x5c\xd2\x95\x97\xff\x4a\x6c\x2d\x1d\x53\x74\x9e\x8a\x6d\xd5\xbf\xc1\x6f\x00\x00\x00\xff\xff\xe4\xd6\xb4\xf6\x2d\x01\x00\x00"

func echo_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mirc_routes_siteTmpl,
		"echo_mirc_routes_site.tmpl",
	)
}

func echo_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := echo_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_mirc_routes_site.tmpl", size: 301, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0x4d, 0x6f, 0xcf, 0x5c, 0x2d, 0x51, 0xad, 0x10, 0x46, 0x7, 0x31, 0xc6, 0x1e, 0x46, 0xa, 0xcc, 0xdc, 0xf2, 0x8c, 0x6e, 0x38, 0xeb, 0x8, 0xa3, 0x83, 0x82, 0xa0, 0xa5, 0x35, 0x24, 0x60}}
	return a, nil
}

var _echo_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xb1\x4e\xc3\x40\x0c\x86\x77\x3f\x85\x75\x53\x32\x50\xab\x8c\xdd\x2a\x84\x10\x33\x2f\xd0\xe3\xe2\xa4\x16\x3d\x5f\xe4\x3a\x81\x08\xf5\xdd\x51\xc2\x49\x15\x13\x8b\xf5\xfb\xff\x3e\x7b\x8c\xe9\x23\x0e\x8c\xf3\x1e\x40\xf2\x58\xcc\xb1\x01\x44\xc4\x1d\x86\x41\xfc\x3c\xbd\xef\x52\xc9\x14\x2f\x92\x17\xca\x62\x34\x3f\x86\x7f\x38\xb1\x0e\xa2\x1c\xa0\x05\xe8\x27\x4d\x28\x2a\xde\xb4\xf8\xbd\xdd\x1d\xbb\xee\x59\xdd\x96\x46\xf9\xb3\x79\x13\xe7\xb6\x85\x1b\x00\x11\xae\x0b\x5e\xd7\x31\xef\x51\xd4\xd9\xfa\x98\x18\x45\xfb\x02\xbe\x8c\x5c\x05\xb7\x29\x79\x7d\xf6\x74\x8e\xa2\xf7\x70\xca\x62\x87\xf0\x10\x4e\x1b\x7c\xb1\x32\x8d\xf7\xf0\x0b\xe7\x7d\xa5\xaf\xda\xf1\xd7\x46\xd9\x11\x2b\x25\x59\x5b\xaa\xca\xd1\x5c\xd2\x85\xaf\x7f\x95\x58\x5b\x3a\xa4\xe8\x3c\x14\x5b\x56\xff\x06\x3f\x01\x00\x00\xff\xff\x97\x82\x75\xe1\x4a\x01\x00\x00"

func echo_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mirc_routes_site_v1Tmpl,
		"echo_mirc_routes_site_v1.tmpl",
	)
}

func echo_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := echo_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_mirc_routes_site_v1.tmpl", size: 330, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0xde, 0x5d, 0xb3, 0x96, 0x51, 0x4, 0x23, 0x85, 0x9, 0xe5, 0x4, 0xaf, 0x61, 0xc5, 0x22, 0x14, 0x58, 0xb5, 0xd8, 0xb3, 0x86, 0x4b, 0x2, 0xd1, 0x81, 0x66, 0xc3, 0x6, 0xe6, 0x2c, 0xe0}}
	return a, nil
}

var _echo_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xb1\x4e\xc3\x40\x0c\x86\x77\x3f\x85\x75\x53\xb2\xd4\x52\xc6\x6e\x15\x42\x88\x99\x17\xe8\x71\x71\x82\x45\xcf\x17\xb9\x4e\x20\x42\x7d\x77\x94\xe8\x10\x74\x62\xb1\xfc\xff\xdf\x67\x4f\x31\xbd\xc7\x91\x71\xe9\x00\x24\x4f\xc5\x1c\x1b\x40\x44\x3c\x60\x18\xc5\xdf\xe6\xd7\x43\x2a\x99\xe2\x45\xf2\x4a\x59\x8c\x96\x2e\xfc\xc3\x89\x75\x14\xe5\x00\x2d\xc0\x30\x6b\x42\x51\xf1\xa6\xc5\xaf\xfd\xee\xd4\xf7\x8f\xea\xb6\x36\xca\x1f\xcd\x8b\x38\xb7\x2d\xdc\x00\x88\x70\x0b\x78\xdd\xc6\xd2\xa1\xa8\xb3\x0d\x31\x31\x8a\x0e\x05\x7c\x9d\xb8\x0a\x6e\x73\xf2\xfa\xec\xc9\xca\x3c\xfd\x2e\xe7\x2c\x76\x0c\x4b\x17\xce\x3b\x7d\xd6\x9e\x3f\x77\xca\x8e\x58\x29\xc9\xd6\x52\x55\x4e\xe6\x92\x2e\x7c\xbd\x57\x62\x6d\xe9\x98\xa2\xf3\x58\x6c\xfd\xf1\x1f\x6a\xbe\xf7\xff\x5a\x37\xf8\x0e\x00\x00\xff\xff\x96\xf0\x08\x77\x53\x01\x00\x00"

func echo_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mirc_routes_site_v2Tmpl,
		"echo_mirc_routes_site_v2.tmpl",
	)
}

func echo_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := echo_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_mirc_routes_site_v2.tmpl", size: 339, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x44, 0x80, 0x40, 0x25, 0x4a, 0xcf, 0xf8, 0x16, 0x61, 0x42, 0x46, 0xe6, 0xec, 0x2a, 0x4, 0x4e, 0x8c, 0xd2, 0x88, 0xe3, 0x9, 0x5, 0x5a, 0xa9, 0x87, 0xee, 0x74, 0xc7, 0x1, 0x7c, 0xfb, 0xba}}
	return a, nil
}

var _fiber_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x41\x0a\xc2\x40\x0c\x46\xe1\x7d\x4e\xf1\x2f\x75\x93\xb1\x83\x5e\x43\xbc\x42\xab\x31\x06\x1b\x82\xc1\x19\x90\xd2\xbb\x8b\x2e\xbb\x79\xab\xc7\xe7\x71\x6b\xb3\x60\x59\xc0\x97\xa7\x9e\x47\x17\xac\x2b\x91\x06\x06\x1e\x2a\x51\xca\xab\x59\x0a\x76\x04\x00\x6a\xef\x47\x9b\xf8\x1a\x5e\xc6\xd9\xfc\x53\xdc\xb2\xf4\x8a\x5e\xf9\xc8\x87\xed\xa2\x71\xb7\x49\xb2\xfc\x8b\xfe\x03\xf9\x44\x7b\xfa\x06\x00\x00\xff\xff\xf8\xf5\xd3\x2c\x74\x00\x00\x00"

func fiber_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_fiber_go_modTmpl,
		"fiber_go_mod.tmpl",
	)
}

func fiber_go_modTmpl() (*asset, error) {
	bytes, err := fiber_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fiber_go_mod.tmpl", size: 116, mode: os.FileMode(0644), modTime: time.Unix(1594226646, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0xd0, 0x21, 0xed, 0x75, 0x94, 0x7f, 0x7, 0x89, 0xf8, 0x81, 0xa2, 0xa5, 0x80, 0x60, 0xc8, 0x53, 0x3a, 0xb9, 0x36, 0x5a, 0x0, 0x53, 0x37, 0xbc, 0xa5, 0x74, 0x14, 0xc7, 0xf6, 0x49, 0xe3}}
	return a, nil
}

var _fiber_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x31\x4f\xc4\x30\x0c\x85\x77\xff\x0a\xd3\x29\x65\x68\x2a\xb1\x1d\xba\x01\x09\x31\x21\x6e\x80\x3f\xe0\xab\xdc\x10\xd1\x26\x96\x9b\xc2\x80\xfa\xdf\x51\xdd\x56\xb7\x90\x21\x89\xf2\x9e\x5f\xde\x27\xd4\x7d\x51\x60\x1c\x29\x26\x80\x38\x4a\xd6\x82\x0e\x10\x11\xab\x21\x87\x0a\xb6\x6b\x88\xe5\x73\xbe\x36\x5d\x1e\x7d\xc8\x7d\xbc\xb2\x7a\xdb\x2b\xa8\x01\xfa\x39\x75\x16\xe0\x6a\xfc\x35\x3f\x89\xe0\xe9\x8c\x66\x69\xde\xf8\xc7\xd5\x5b\x8e\xf7\xa8\x1c\xe2\x54\x58\x71\x62\xfd\xa6\x54\x26\x2c\x79\x33\x9a\xe3\x90\xdf\x77\xd5\x91\xc8\x6d\x78\x2a\xa4\xe5\x98\xb4\x33\x76\x6c\x62\xec\x91\x55\xd7\x4f\x49\xa4\x79\x5d\x33\x92\x7b\x68\xdb\xb6\x7e\x34\xe1\xee\x8c\x29\x0e\x7b\xbd\x75\x0d\x39\x34\x2f\x54\x68\x70\xac\x5a\xdb\xf3\x02\xcb\x0e\xf3\x5f\x0b\xbc\xdf\x70\x9e\x44\x0e\x4c\xef\xf1\xe3\xf2\x7c\x39\xdd\xa0\x34\xcf\x85\x0d\x89\x44\x60\x81\xbf\x00\x00\x00\xff\xff\x6a\xdd\xd3\xae\x5f\x01\x00\x00"

func fiber_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_fiber_mainTmpl,
		"fiber_main.tmpl",
	)
}

func fiber_mainTmpl() (*asset, error) {
	bytes, err := fiber_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fiber_main.tmpl", size: 351, mode: os.FileMode(0644), modTime: time.Unix(1585823872, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0x7f, 0x6a, 0x66, 0x97, 0xa7, 0xd1, 0x28, 0xa5, 0xe4, 0xf8, 0x2e, 0x22, 0x1, 0xd7, 0xbd, 0x6f, 0x1c, 0x12, 0x64, 0x65, 0xb9, 0x1e, 0x16, 0xcc, 0xda, 0x8e, 0x9e, 0xb9, 0x2e, 0xf2, 0x15}}
	return a, nil
}

var _fiber_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6f\xe2\x30\x10\x85\xef\xfe\x15\xb3\x3e\x39\xd2\x2a\xd6\x72\x64\xc5\x95\xd5\x1e\x4a\x69\xf9\x01\x95\x09\x83\x19\x91\xcc\x44\x13\x07\x09\xa1\xfc\xf7\xca\x06\x51\x4e\xa5\x39\x44\x7e\x9e\xef\x3d\xbd\x71\x1f\x9a\x63\x88\x08\x5d\x20\x36\x86\xba\x5e\x34\x81\x33\x00\x00\xb6\x95\x68\x4d\x39\xd6\x60\x23\xa5\xc3\xb8\xad\x1b\xe9\x7c\x68\xa9\x3b\xfb\x8e\xd4\x9f\x66\xbe\x11\x45\xfb\x0c\x42\x8e\xc4\x78\x0b\xfb\x00\x7b\xb9\x40\xbd\x3e\xc6\x55\xe8\x10\xa6\x29\x53\x8d\x57\x19\x13\x0e\xf6\x39\xe2\x4f\x7f\x7e\x44\xcd\xac\xa9\x8c\xf1\x3e\xca\x3c\x22\xa3\x86\x84\x10\x05\x74\xe4\xb2\x6d\x1d\xc5\xec\x47\x6e\x8a\x70\x15\x5c\x4a\x66\x2b\xb1\x5e\x2b\x71\x6a\xd9\xd9\xbb\xad\x91\x1d\xc2\x90\x82\x26\x5b\x15\x4c\xfa\x34\xc0\x7c\x01\xaf\x7d\x22\xe1\xe1\xea\xcd\xdf\xfb\xc8\x2f\xb2\x43\xf7\x9f\x37\xa8\x14\xda\x2c\xaa\xdf\xf7\xf1\xbf\x6b\xa2\x68\x6e\xec\xee\x6a\x49\x5b\xd4\x07\x6c\x25\x8c\x6f\x23\xea\xd9\x25\x1d\x1f\xfd\x1b\xe2\xe3\x3a\xa4\x83\xb3\xb5\x8f\xc8\xf6\x36\x9a\xca\x9f\xf6\x80\xaa\xb9\xd6\x2d\x18\x5d\xee\x59\xfd\x2d\xd7\xbf\x16\xc0\xd4\xc2\x57\xd5\xbc\xea\x32\xa4\xd0\x3a\x54\xad\x1e\x72\xbe\x79\x83\x3d\x31\x0d\x07\x5b\x99\xc9\x7c\x06\x00\x00\xff\xff\x38\xd2\x07\x3b\x3a\x02\x00\x00"

func fiber_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_fiber_mirc_mainTmpl,
		"fiber_mirc_main.tmpl",
	)
}

func fiber_mirc_mainTmpl() (*asset, error) {
	bytes, err := fiber_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fiber_mirc_main.tmpl", size: 570, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf4, 0x41, 0xf9, 0xb1, 0x62, 0x17, 0xfd, 0x46, 0x1c, 0x3a, 0x61, 0x9a, 0xf1, 0x6e, 0x3b, 0x9c, 0x97, 0xff, 0xff, 0x8c, 0xef, 0x34, 0xe6, 0xee, 0x4b, 0x26, 0x71, 0x79, 0xc1, 0x5b, 0xe2, 0x1}}
	return a, nil
}

var _fiber_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xc1\x4a\xc4\x40\x0c\x86\xef\x79\x8a\x30\xa7\xf6\xe0\x06\x3c\xee\x6d\x11\x11\xcf\xbe\xc0\x8e\xd3\xb4\x1b\xdc\xc9\x94\x34\x55\x8b\xec\xbb\xcb\x94\x01\xf1\xb4\x97\xf0\xe7\xff\xbe\x64\x8e\xe9\x23\x4e\x8c\x56\x56\xe7\x05\x40\xf2\x5c\xcc\xb1\x03\x44\xc4\x03\x86\x49\xfc\xb2\xbe\x1f\x52\xc9\x14\xaf\x92\x37\xca\x62\xf4\xf9\x18\xee\x70\x62\x9d\x44\x39\x40\x0f\x30\xae\x9a\x50\x54\xbc\xeb\xf1\x67\xbf\x3b\x0d\xc3\xb3\xba\x6d\x9d\xf2\x57\xf7\x26\xce\x7d\x0f\x37\x00\x22\xac\x0b\x2e\x75\x88\x3a\xdb\x18\x53\x4d\x63\x01\xdf\x66\x6e\xd4\x6d\x4d\xde\x3e\x3d\x5d\xa2\xe8\x5f\x38\x67\xb1\x63\x78\x08\xe7\x1d\xbe\xea\xc0\xdf\x35\xbc\xb0\x23\x36\x48\x52\x5b\x6a\xca\xc9\x5c\xd2\x95\x97\xff\x4a\x6c\x2d\x1d\x53\x74\x9e\x8a\x6d\xd5\xbf\xc1\x6f\x00\x00\x00\xff\xff\xe4\xd6\xb4\xf6\x2d\x01\x00\x00"

func fiber_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_fiber_mirc_routes_siteTmpl,
		"fiber_mirc_routes_site.tmpl",
	)
}

func fiber_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := fiber_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fiber_mirc_routes_site.tmpl", size: 301, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0x4d, 0x6f, 0xcf, 0x5c, 0x2d, 0x51, 0xad, 0x10, 0x46, 0x7, 0x31, 0xc6, 0x1e, 0x46, 0xa, 0xcc, 0xdc, 0xf2, 0x8c, 0x6e, 0x38, 0xeb, 0x8, 0xa3, 0x83, 0x82, 0xa0, 0xa5, 0x35, 0x24, 0x60}}
	return a, nil
}

var _fiber_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xb1\x4e\xc3\x40\x0c\x86\x77\x3f\x85\x75\x53\x32\x50\xab\x8c\xdd\x2a\x84\x10\x33\x2f\xd0\xe3\xe2\xa4\x16\x3d\x5f\xe4\x3a\x81\x08\xf5\xdd\x51\xc2\x49\x15\x13\x8b\xf5\xfb\xff\x3e\x7b\x8c\xe9\x23\x0e\x8c\xf3\x1e\x40\xf2\x58\xcc\xb1\x01\x44\xc4\x1d\x86\x41\xfc\x3c\xbd\xef\x52\xc9\x14\x2f\x92\x17\xca\x62\x34\x3f\x86\x7f\x38\xb1\x0e\xa2\x1c\xa0\x05\xe8\x27\x4d\x28\x2a\xde\xb4\xf8\xbd\xdd\x1d\xbb\xee\x59\xdd\x96\x46\xf9\xb3\x79\x13\xe7\xb6\x85\x1b\x00\x11\xae\x0b\x5e\xd7\x31\xef\x51\xd4\xd9\xfa\x98\x18\x45\xfb\x02\xbe\x8c\x5c\x05\xb7\x29\x79\x7d\xf6\x74\x8e\xa2\xf7\x70\xca\x62\x87\xf0\x10\x4e\x1b\x7c\xb1\x32\x8d\xf7\xf0\x0b\xe7\x7d\xa5\xaf\xda\xf1\xd7\x46\xd9\x11\x2b\x25\x59\x5b\xaa\xca\xd1\x5c\xd2\x85\xaf\x7f\x95\x58\x5b\x3a\xa4\xe8\x3c\x14\x5b\x56\xff\x06\x3f\x01\x00\x00\xff\xff\x97\x82\x75\xe1\x4a\x01\x00\x00"

func fiber_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_fiber_mirc_routes_site_v1Tmpl,
		"fiber_mirc_routes_site_v1.tmpl",
	)
}

func fiber_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := fiber_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fiber_mirc_routes_site_v1.tmpl", size: 330, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0xde, 0x5d, 0xb3, 0x96, 0x51, 0x4, 0x23, 0x85, 0x9, 0xe5, 0x4, 0xaf, 0x61, 0xc5, 0x22, 0x14, 0x58, 0xb5, 0xd8, 0xb3, 0x86, 0x4b, 0x2, 0xd1, 0x81, 0x66, 0xc3, 0x6, 0xe6, 0x2c, 0xe0}}
	return a, nil
}

var _fiber_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xc1\x4a\xc4\x40\x0c\x86\xef\x79\x8a\x30\xa7\xf6\xb2\x81\x1e\xf7\x22\x8b\x88\x78\xf6\x05\x76\x9c\xa6\x35\xb8\x93\x29\xd9\xb4\x5a\x64\xdf\x5d\x5a\x46\x64\x4f\x5e\x86\xf9\xff\xef\xcb\x3f\xc5\xf4\x11\x47\xc6\xa5\x03\x90\x3c\x15\x73\x6c\x00\x11\xf1\x80\x61\x14\x7f\x9f\xdf\x0e\xa9\x64\x8a\x17\xc9\x2b\x65\x31\x5a\xba\xf0\x0f\x27\xd6\x51\x94\x03\xb4\x00\xc3\xac\x09\x45\xc5\x9b\x16\xbf\xf7\xbb\x53\xdf\x3f\xa9\xdb\xda\x28\x7f\x36\xaf\xe2\xdc\xb6\x70\x03\x20\xc2\x2d\xe0\x75\x7b\x96\x0e\x45\x9d\x6d\x88\x89\x51\x74\x28\xe0\xeb\xc4\x55\x70\x9b\x93\xd7\xb1\x67\x2b\xf3\xf4\xf7\x39\x67\xb1\x63\x58\xba\x70\xde\xe9\x8b\xf6\xfc\xb5\x53\x76\xc4\x4a\x49\xb6\x96\xaa\x72\x32\x97\x74\xe1\xeb\xbd\x12\x6b\x4b\xc7\x14\x9d\xc7\x62\xeb\x43\xf5\x1f\x6b\xbe\xf7\x7f\xad\x6d\xf5\x06\xf0\x13\x00\x00\xff\xff\x5c\x9b\x00\x12\x54\x01\x00\x00"

func fiber_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_fiber_mirc_routes_site_v2Tmpl,
		"fiber_mirc_routes_site_v2.tmpl",
	)
}

func fiber_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := fiber_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fiber_mirc_routes_site_v2.tmpl", size: 340, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xcf, 0x93, 0xdd, 0xd6, 0xc, 0x25, 0xa5, 0xf8, 0x81, 0x1d, 0x58, 0xc8, 0xe7, 0x9a, 0xfd, 0xad, 0x4e, 0x95, 0x18, 0x73, 0xb, 0x3d, 0xb, 0x6b, 0x6b, 0xf4, 0x40, 0xe3, 0x41, 0xbc, 0xd3}}
	return a, nil
}

var _gin_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x31\x0e\xc2\x30\x0c\x05\xd0\xdd\xa7\xf8\x23\x0c\x38\x24\x20\x8e\x81\xb8\x42\x29\x96\xb1\xa8\x6b\x11\x91\x48\xa8\xea\xdd\x11\x6b\xb7\x37\x3c\x8f\x47\x9b\x04\xcb\x02\xbe\xbd\xf4\x3a\xb8\x60\x5d\x89\x34\x90\x39\x17\xa2\x2a\xef\x66\x55\xb0\x23\x00\x50\xfb\x3c\xdb\x9d\xc7\xf0\x34\x4c\xe6\xdf\xe4\x56\x53\x2f\xe8\x85\xcf\x7c\xdc\x16\xb5\xf9\xa0\x31\xdb\xf8\x17\x7a\xe6\x0b\x9f\x68\x4f\xbf\x00\x00\x00\xff\xff\xb9\xf6\x14\xe5\x73\x00\x00\x00"

func gin_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_go_modTmpl,
		"gin_go_mod.tmpl",
	)
}

func gin_go_modTmpl() (*asset, error) {
	bytes, err := gin_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_go_mod.tmpl", size: 115, mode: os.FileMode(0644), modTime: time.Unix(1594226485, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0xa9, 0xc9, 0x87, 0xfa, 0x0, 0x9d, 0x12, 0xca, 0xfe, 0x55, 0x32, 0x2e, 0xce, 0x62, 0x1f, 0xad, 0x26, 0x2e, 0x2e, 0xc5, 0xa6, 0x46, 0x65, 0x8e, 0x4a, 0xcc, 0x8b, 0xc4, 0x6, 0x8, 0x41}}
	return a, nil
}

var _gin_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xbd\x4e\x03\x31\x0c\x80\x77\x3f\x85\xe9\x94\x43\xe2\xb2\x17\x75\x2b\xac\x95\x80\x17\x08\x91\x2f\x58\xe4\x9c\xca\xe7\xb0\xa0\x7b\x77\x94\xf4\x4e\x1d\xc8\x12\x27\x9f\xff\xbe\x6b\x88\xdf\x21\x11\xce\x81\x05\x80\xe7\x6b\x51\x43\x07\x88\x88\x87\x5c\xd2\x01\x6e\x61\x62\xfb\xaa\x9f\x63\x2c\xb3\x4f\x2c\x4f\xa9\x08\xc7\x16\x1d\x60\x00\x98\xaa\xc4\xde\xc0\x0d\xf8\xdb\xf3\x09\x8f\x27\x4c\x2c\xe3\x99\xa6\x50\xb3\xb9\xe1\xd6\xc7\x7b\x54\x4a\xbc\x18\x29\x2e\xa4\x3f\x41\x6c\x41\x2b\x2d\xb5\xf3\x1d\xbe\x6f\xcc\xd1\xbd\x70\xb1\xa0\xb6\x57\xf5\x9b\x23\x75\xc8\x13\x92\x6a\x1b\x49\xe3\x5b\x15\x37\x3c\xf7\xf7\xc3\x09\x85\xf3\xb6\x51\x3b\xb9\xa4\xf1\x35\x58\xc8\x8e\x54\x87\xfe\xbd\xc2\xba\xed\xff\x7f\x34\x3e\x36\x83\x17\x49\x2c\xb4\x8b\x79\x8f\x1f\x97\xf3\xe5\x78\xd7\xd0\x52\x8d\xba\x04\xc1\x0a\x7f\x01\x00\x00\xff\xff\x6e\x6b\xe2\x81\x4f\x01\x00\x00"

func gin_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mainTmpl,
		"gin_main.tmpl",
	)
}

func gin_mainTmpl() (*asset, error) {
	bytes, err := gin_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_main.tmpl", size: 335, mode: os.FileMode(0644), modTime: time.Unix(1585647812, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0xcd, 0xc5, 0x41, 0x5, 0x2a, 0x93, 0x36, 0x4e, 0xb2, 0xd, 0x29, 0xb6, 0x40, 0xf6, 0x49, 0x33, 0x92, 0xda, 0x9b, 0x89, 0xb8, 0x6c, 0xdc, 0x91, 0xd7, 0xe7, 0x77, 0x49, 0x98, 0x4a, 0x18}}
	return a, nil
}

var _gin_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x6f\xe2\x30\x10\x85\xef\xfe\x15\xb3\x3e\x39\xd2\x2a\xd6\x72\x64\xc5\x75\xd1\x1e\xda\xa2\xf2\x03\x2a\x37\x0c\x66\x84\x33\x13\x4d\x1c\xa4\x0a\xe5\xbf\x57\x36\x88\x72\x2a\xcd\x21\xf2\x78\xbe\xf7\xfc\xde\x10\xba\x63\x88\x08\x7d\x20\x36\x86\xfa\x41\x34\x83\x33\x00\x00\x36\x49\xb4\xa6\x1e\x5b\xb0\x91\xf2\x61\x7a\x6f\x3b\xe9\x7d\x48\xd4\x7f\xf8\x9e\xd4\x9f\x16\xbe\x13\x45\xfb\x08\x42\x8e\xc4\x78\x35\x7b\x03\x7b\x3e\x43\xbb\x39\xc6\xe7\xd0\x23\xcc\x73\xa1\x3a\xaf\x32\x65\x1c\xed\x63\xc4\x9f\xfe\xfc\x88\x5a\x58\xd3\x18\xe3\x7d\x94\x65\x44\x46\x0d\x19\x21\x0a\xe8\xc4\xb5\x6d\x1b\xc5\xec\x27\xee\xea\xe0\x1a\x38\x57\xcf\x24\xb1\xdd\x28\x71\x4e\xec\xec\x4d\xd6\xc9\x0e\x61\xcc\x41\xb3\x6d\x2a\x26\x43\x1e\x61\xb9\x82\x97\x21\x93\xf0\x78\xd1\x96\xef\x75\xe2\x27\xd9\xa1\xfb\xcf\x5b\x54\x0a\xa9\x0c\xcd\xef\xdb\x7a\x7d\x71\x14\x2d\x89\xdd\x6d\x5a\x13\xdf\x41\x5b\xe2\xe3\x26\xe4\x83\xb3\xad\x8f\xc8\xf6\xba\x9a\xeb\x9f\xf6\x80\xaa\xe5\xed\xab\x1a\x5d\x09\xd3\xfc\xad\xd7\xbf\x56\xc0\x94\xe0\x2b\x4f\xe9\xf3\x2f\xe4\x90\x1c\xaa\x36\x77\x3e\xdf\x14\xdd\x13\xd3\x78\xb0\x8d\x99\xcd\x67\x00\x00\x00\xff\xff\xa5\x88\xe9\xfc\x1f\x02\x00\x00"

func gin_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_mainTmpl,
		"gin_mirc_main.tmpl",
	)
}

func gin_mirc_mainTmpl() (*asset, error) {
	bytes, err := gin_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_main.tmpl", size: 543, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc4, 0xf4, 0x11, 0x2, 0x1e, 0x8d, 0x13, 0x64, 0x1, 0x8, 0xf8, 0x99, 0x75, 0xb2, 0x97, 0x7d, 0xf3, 0xc2, 0x2a, 0x3b, 0x84, 0xe9, 0x36, 0x3c, 0xb7, 0xe, 0xd7, 0xcc, 0xcb, 0x1b, 0x2f, 0x8}}
	return a, nil
}

var _gin_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xc1\x4a\xc4\x40\x0c\x86\xef\x79\x8a\x30\xa7\xf6\xe0\x06\x3c\xee\x6d\x11\x11\xcf\xbe\xc0\x8e\xd3\xb4\x1b\xdc\xc9\x94\x34\x55\x8b\xec\xbb\xcb\x94\x01\xf1\xb4\x97\xf0\xe7\xff\xbe\x64\x8e\xe9\x23\x4e\x8c\x56\x56\xe7\x05\x40\xf2\x5c\xcc\xb1\x03\x44\xc4\x03\x86\x49\xfc\xb2\xbe\x1f\x52\xc9\x14\xaf\x92\x37\xca\x62\xf4\xf9\x18\xee\x70\x62\x9d\x44\x39\x40\x0f\x30\xae\x9a\x50\x54\xbc\xeb\xf1\x67\xbf\x3b\x0d\xc3\xb3\xba\x6d\x9d\xf2\x57\xf7\x26\xce\x7d\x0f\x37\x00\x22\xac\x0b\x2e\x75\x88\x3a\xdb\x18\x53\x4d\x63\x01\xdf\x66\x6e\xd4\x6d\x4d\xde\x3e\x3d\x5d\xa2\xe8\x5f\x38\x67\xb1\x63\x78\x08\xe7\x1d\xbe\xea\xc0\xdf\x35\xbc\xb0\x23\x36\x48\x52\x5b\x6a\xca\xc9\x5c\xd2\x95\x97\xff\x4a\x6c\x2d\x1d\x53\x74\x9e\x8a\x6d\xd5\xbf\xc1\x6f\x00\x00\x00\xff\xff\xe4\xd6\xb4\xf6\x2d\x01\x00\x00"

func gin_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_siteTmpl,
		"gin_mirc_routes_site.tmpl",
	)
}

func gin_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site.tmpl", size: 301, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0x4d, 0x6f, 0xcf, 0x5c, 0x2d, 0x51, 0xad, 0x10, 0x46, 0x7, 0x31, 0xc6, 0x1e, 0x46, 0xa, 0xcc, 0xdc, 0xf2, 0x8c, 0x6e, 0x38, 0xeb, 0x8, 0xa3, 0x83, 0x82, 0xa0, 0xa5, 0x35, 0x24, 0x60}}
	return a, nil
}

var _gin_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xb1\x4e\xc3\x40\x0c\x86\x77\x3f\x85\x75\x53\x32\x50\xab\x8c\xdd\x2a\x84\x10\x33\x2f\xd0\xe3\xe2\xa4\x16\x3d\x5f\xe4\x3a\x81\x08\xf5\xdd\x51\xc2\x49\x15\x13\x8b\xf5\xfb\xff\x3e\x7b\x8c\xe9\x23\x0e\x8c\xf3\x1e\x40\xf2\x58\xcc\xb1\x01\x44\xc4\x1d\x86\x41\xfc\x3c\xbd\xef\x52\xc9\x14\x2f\x92\x17\xca\x62\x34\x3f\x86\x7f\x38\xb1\x0e\xa2\x1c\xa0\x05\xe8\x27\x4d\x28\x2a\xde\xb4\xf8\xbd\xdd\x1d\xbb\xee\x59\xdd\x96\x46\xf9\xb3\x79\x13\xe7\xb6\x85\x1b\x00\x11\xae\x0b\x5e\xd7\x31\xef\x51\xd4\xd9\xfa\x98\x18\x45\xfb\x02\xbe\x8c\x5c\x05\xb7\x29\x79\x7d\xf6\x74\x8e\xa2\xf7\x70\xca\x62\x87\xf0\x10\x4e\x1b\x7c\xb1\x32\x8d\xf7\xf0\x0b\xe7\x7d\xa5\xaf\xda\xf1\xd7\x46\xd9\x11\x2b\x25\x59\x5b\xaa\xca\xd1\x5c\xd2\x85\xaf\x7f\x95\x58\x5b\x3a\xa4\xe8\x3c\x14\x5b\x56\xff\x06\x3f\x01\x00\x00\xff\xff\x97\x82\x75\xe1\x4a\x01\x00\x00"

func gin_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_site_v1Tmpl,
		"gin_mirc_routes_site_v1.tmpl",
	)
}

func gin_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site_v1.tmpl", size: 330, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0xde, 0x5d, 0xb3, 0x96, 0x51, 0x4, 0x23, 0x85, 0x9, 0xe5, 0x4, 0xaf, 0x61, 0xc5, 0x22, 0x14, 0x58, 0xb5, 0xd8, 0xb3, 0x86, 0x4b, 0x2, 0xd1, 0x81, 0x66, 0xc3, 0x6, 0xe6, 0x2c, 0xe0}}
	return a, nil
}

var _gin_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xb1\x4e\xc3\x40\x0c\x86\x77\x3f\x85\x75\x53\xb2\xd4\x52\xc6\x6e\x15\x42\x88\x99\x17\xe8\x71\x71\x82\x45\xcf\x17\xb9\x4e\x20\x42\x7d\x77\x94\xe8\x10\x74\x62\xb1\xfc\xff\xdf\x67\x4f\x31\xbd\xc7\x91\x71\xe9\x00\x24\x4f\xc5\x1c\x1b\x40\x44\x3c\x60\x18\xc5\xdf\xe6\xd7\x43\x2a\x99\xe2\x45\xf2\x4a\x59\x8c\x96\x2e\xfc\xc3\x89\x75\x14\xe5\x00\x2d\xc0\x30\x6b\x42\x51\xf1\xa6\xc5\xaf\xfd\xee\xd4\xf7\x8f\xea\xb6\x36\xca\x1f\xcd\x8b\x38\xb7\x2d\xdc\x00\x88\x70\x0b\x78\xdd\xc6\xd2\xa1\xa8\xb3\x0d\x31\x31\x8a\x0e\x05\x7c\x9d\xb8\x0a\x6e\x73\xf2\xfa\xec\xc9\xca\x3c\xfd\x2e\xe7\x2c\x76\x0c\x4b\x17\xce\x3b\x7d\xd6\x9e\x3f\x77\xca\x8e\x58\x29\xc9\xd6\x52\x55\x4e\xe6\x92\x2e\x7c\xbd\x57\x62\x6d\xe9\x98\xa2\xf3\x58\x6c\xfd\xf1\x1f\x6a\xbe\xf7\xff\x5a\x37\x80\xef\x00\x00\x00\xff\xff\x12\x38\xcc\x2b\x54\x01\x00\x00"

func gin_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_site_v2Tmpl,
		"gin_mirc_routes_site_v2.tmpl",
	)
}

func gin_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site_v2.tmpl", size: 340, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0x99, 0xa3, 0xc6, 0x6b, 0x6d, 0xc, 0x1d, 0xb1, 0x7d, 0x2e, 0xbb, 0x6d, 0x44, 0xec, 0x12, 0xfc, 0xb1, 0x7a, 0xbe, 0x90, 0x4e, 0xac, 0x14, 0xb1, 0x7e, 0x89, 0x20, 0x34, 0x46, 0xc6, 0xc0}}
	return a, nil
}

var _httprouter_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x41\x0e\xc2\x20\x10\x05\xd0\xfd\x9c\xe2\x2f\x75\x33\x14\xf4\x1c\xc6\x2b\xd4\x76\x02\xa3\x8c\x28\x02\x89\x69\x7a\x77\xf7\xee\x9f\x95\xb5\x67\xc1\xb6\x81\xaf\x8f\x78\x99\x4d\xb0\xef\x44\xb1\xc0\xb3\x0f\x44\x55\xde\x5d\xab\xe0\x40\x00\x10\xb5\xa5\x7e\xe3\xa5\x98\x9b\xb3\xda\xd7\x99\x56\x37\x02\x46\xe0\x33\x4f\xff\xe4\xde\xb3\xca\xf3\xb3\x24\xd3\xb5\xb9\xd4\xda\xab\x96\xde\xa4\x62\x78\x3e\xf1\x44\x47\xfa\x05\x00\x00\xff\xff\x95\xe5\x7b\xb2\x7e\x00\x00\x00"

func httprouter_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_go_modTmpl,
		"httprouter_go_mod.tmpl",
	)
}

func httprouter_go_modTmpl() (*asset, error) {
	bytes, err := httprouter_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_go_mod.tmpl", size: 126, mode: os.FileMode(0644), modTime: time.Unix(1585823872, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0x8d, 0x59, 0x0, 0xbb, 0x21, 0x64, 0x4e, 0xf8, 0x60, 0xb6, 0xa2, 0x44, 0xfb, 0xc5, 0x2, 0xdf, 0x3c, 0xee, 0xf8, 0x26, 0xf9, 0x6d, 0x3c, 0xc4, 0xc4, 0x4c, 0xb9, 0x31, 0x9d, 0x55, 0x80}}
	return a, nil
}

var _httprouter_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcd\x4e\xeb\x30\x10\x85\xf7\xf3\x14\x73\xbd\x72\xae\x50\xdc\x65\x15\xd4\x05\x12\x62\x85\xa8\x04\xbc\x80\x49\xa7\x89\xc1\xb1\xa3\xf1\x04\x16\x28\xef\x8e\x62\xa7\xa4\x12\xde\x8c\x7f\xbe\x73\x3c\x67\x46\xdb\x7e\xd8\x8e\x70\xb0\x2e\x00\xb8\x61\x8c\x2c\xa8\x01\x11\x51\xf9\xd8\xa9\xb2\x0b\x24\xa6\x17\x19\x15\x94\x73\xe7\xa4\x9f\xde\xea\x36\x0e\xe6\x7d\xf2\x8e\x42\x6a\xfb\xc1\x9d\x0a\xc4\x71\x12\x62\x05\x15\xc0\x79\x0a\x6d\xb6\xd6\x15\x7e\x67\x29\x63\x73\xc0\x8d\xaa\x9f\xe8\x4b\x57\xc5\xd5\x18\x64\xea\x5c\x12\x62\x4c\xc4\x9f\x36\x48\x42\x89\x57\x74\x71\x58\x99\x97\x15\xd1\xbc\xe9\x93\x58\x96\x8b\x38\x57\xd7\x52\x7e\x74\x67\x24\xfe\xfd\xbc\x7e\x5c\x2c\xc2\x5d\x38\x2d\x2e\xa4\x55\xb3\xdf\xed\x77\xea\x06\xb9\xba\xcd\xdc\xbf\x03\x06\xe7\xd7\x9e\x97\xe5\x63\x57\x3f\x58\xb1\x5e\x13\x73\x95\xaf\x67\x98\xd7\x84\x7f\x5b\xc2\xff\x57\x19\x9f\x73\xb9\x4c\xc0\x18\x7c\x3d\xde\x1f\x9b\x2d\x6c\xc6\x72\x54\x86\x19\x7e\x02\x00\x00\xff\xff\x26\x3a\xe1\x3f\x92\x01\x00\x00"

func httprouter_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mainTmpl,
		"httprouter_main.tmpl",
	)
}

func httprouter_mainTmpl() (*asset, error) {
	bytes, err := httprouter_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_main.tmpl", size: 402, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x80, 0x74, 0x9e, 0x62, 0xae, 0xa4, 0xe4, 0xb, 0x71, 0x1b, 0x20, 0x53, 0x3f, 0xd1, 0x88, 0xf6, 0xf9, 0xd4, 0xc3, 0x36, 0x4c, 0xdc, 0x9c, 0x5, 0x28, 0x41, 0xfc, 0xcb, 0xfd, 0xe0, 0x15}}
	return a, nil
}

var _httprouter_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xcd\x6e\xc2\x30\x10\x84\xef\x7e\x8a\xad\x4f\x8e\x54\xc5\x2a\x47\x2a\xae\xfd\x39\xb4\x45\xf0\x00\x95\x1b\x16\xb3\x22\xd9\x8d\x36\x0e\x52\x85\xf2\xee\x95\x0d\xa2\x9c\x4a\x7d\xb0\x3c\xde\x6f\x47\x33\x7d\x68\xf6\x21\x22\x74\x81\xd8\x18\xea\x7a\xd1\x04\xce\x00\x00\xd8\x56\xa2\x35\xe5\x59\x83\x8d\x94\x76\xe3\x57\xdd\x48\xe7\x43\x4b\xdd\xb7\xef\x48\xfd\x61\xe6\x1b\x51\xb4\xb7\x20\xe4\x48\x8c\x67\xb3\x4f\xb0\xc7\x23\xd4\xcb\x7d\x7c\x0f\x1d\xc2\x34\x65\xaa\xf1\x2a\x63\xc2\xc1\xde\x46\xfc\xe1\xe1\x5f\xd4\xcc\x9a\xca\x18\xef\xa3\xcc\x23\x32\x6a\x48\x08\x51\x40\x47\x2e\x6d\xeb\x28\x66\x3b\x72\x53\x84\xab\xe0\x58\x3c\x5b\x89\xf5\x52\x89\x53\xcb\xce\x5e\xd6\x1a\xd9\x20\x0c\x29\x68\xb2\x55\xc1\xa4\x4f\x03\xcc\x17\xf0\xd1\x27\x12\x1e\x4e\xbb\xf9\xac\x46\x7e\x93\x0d\xba\x57\x5e\xa3\x52\x68\xb3\xa8\xee\x2f\xe3\xe7\x93\xa3\x68\x4e\xec\x2e\xea\x25\xa5\x7e\x95\x63\xeb\x15\xbb\x26\xde\x2f\x43\xda\x39\x5b\xfb\x88\x6c\xcf\xa3\xa9\xdc\xb4\x05\x54\xcd\x11\xce\x26\xe8\x72\xa6\xea\xb1\x7c\xdf\x2d\x80\xa9\x85\xdf\x58\xb9\xd6\x53\x48\xa1\x75\xa8\x5a\x5d\xf9\xfc\xd1\x77\x4b\x4c\xc3\xce\x56\x66\x32\x3f\x01\x00\x00\xff\xff\x9e\xad\xaa\x4b\x26\x02\x00\x00"

func httprouter_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mirc_mainTmpl,
		"httprouter_mirc_main.tmpl",
	)
}

func httprouter_mirc_mainTmpl() (*asset, error) {
	bytes, err := httprouter_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_mirc_main.tmpl", size: 550, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0x5f, 0xc3, 0x4d, 0xec, 0x21, 0xbd, 0xbf, 0xb8, 0x9f, 0x1b, 0xea, 0x12, 0x1b, 0xb0, 0xe1, 0xf0, 0x25, 0x7d, 0x94, 0xd9, 0x74, 0x1f, 0xbf, 0xe3, 0x8f, 0xc7, 0x22, 0xd8, 0xaf, 0xe6, 0x7d}}
	return a, nil
}

var _httprouter_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xc1\x4a\xc4\x40\x0c\x86\xef\x79\x8a\x30\xa7\xf6\xe0\x06\x3c\xee\x6d\x11\x11\xcf\xbe\xc0\x8e\xd3\xb4\x1b\xdc\xc9\x94\x34\x55\x8b\xec\xbb\xcb\x94\x01\xf1\xb4\x97\xf0\xe7\xff\xbe\x64\x8e\xe9\x23\x4e\x8c\x56\x56\xe7\x05\x40\xf2\x5c\xcc\xb1\x03\x44\xc4\x03\x86\x49\xfc\xb2\xbe\x1f\x52\xc9\x14\xaf\x92\x37\xca\x62\xf4\xf9\x18\xee\x70\x62\x9d\x44\x39\x40\x0f\x30\xae\x9a\x50\x54\xbc\xeb\xf1\x67\xbf\x3b\x0d\xc3\xb3\xba\x6d\x9d\xf2\x57\xf7\x26\xce\x7d\x0f\x37\x00\x22\xac\x0b\x2e\x75\x88\x3a\xdb\x18\x53\x4d\x63\x01\xdf\x66\x6e\xd4\x6d\x4d\xde\x3e\x3d\x5d\xa2\xe8\x5f\x38\x67\xb1\x63\x78\x08\xe7\x1d\xbe\xea\xc0\xdf\x35\xbc\xb0\x23\x36\x48\x52\x5b\x6a\xca\xc9\x5c\xd2\x95\x97\xff\x4a\x6c\x2d\x1d\x53\x74\x9e\x8a\x6d\xd5\xbf\xc1\x6f\x00\x00\x00\xff\xff\xe4\xd6\xb4\xf6\x2d\x01\x00\x00"

func httprouter_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mirc_routes_siteTmpl,
		"httprouter_mirc_routes_site.tmpl",
	)
}

func httprouter_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := httprouter_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_mirc_routes_site.tmpl", size: 301, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0x4d, 0x6f, 0xcf, 0x5c, 0x2d, 0x51, 0xad, 0x10, 0x46, 0x7, 0x31, 0xc6, 0x1e, 0x46, 0xa, 0xcc, 0xdc, 0xf2, 0x8c, 0x6e, 0x38, 0xeb, 0x8, 0xa3, 0x83, 0x82, 0xa0, 0xa5, 0x35, 0x24, 0x60}}
	return a, nil
}

var _httprouter_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xb1\x4e\xc3\x40\x0c\x86\x77\x3f\x85\x75\x53\x32\x50\xab\x8c\xdd\x2a\x84\x10\x33\x2f\xd0\xe3\xe2\xa4\x16\x3d\x5f\xe4\x3a\x81\x08\xf5\xdd\x51\xc2\x49\x15\x13\x8b\xf5\xfb\xff\x3e\x7b\x8c\xe9\x23\x0e\x8c\xf3\x1e\x40\xf2\x58\xcc\xb1\x01\x44\xc4\x1d\x86\x41\xfc\x3c\xbd\xef\x52\xc9\x14\x2f\x92\x17\xca\x62\x34\x3f\x86\x7f\x38\xb1\x0e\xa2\x1c\xa0\x05\xe8\x27\x4d\x28\x2a\xde\xb4\xf8\xbd\xdd\x1d\xbb\xee\x59\xdd\x96\x46\xf9\xb3\x79\x13\xe7\xb6\x85\x1b\x00\x11\xae\x0b\x5e\xd7\x31\xef\x51\xd4\xd9\xfa\x98\x18\x45\xfb\x02\xbe\x8c\x5c\x05\xb7\x29\x79\x7d\xf6\x74\x8e\xa2\xf7\x70\xca\x62\x87\xf0\x10\x4e\x1b\x7c\xb1\x32\x8d\xf7\xf0\x0b\xe7\x7d\xa5\xaf\xda\xf1\xd7\x46\xd9\x11\x2b\x25\x59\x5b\xaa\xca\xd1\x5c\xd2\x85\xaf\x7f\x95\x58\x5b\x3a\xa4\xe8\x3c\x14\x5b\x56\xff\x06\x3f\x01\x00\x00\xff\xff\x97\x82\x75\xe1\x4a\x01\x00\x00"

func httprouter_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mirc_routes_site_v1Tmpl,
		"httprouter_mirc_routes_site_v1.tmpl",
	)
}

func httprouter_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := httprouter_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_mirc_routes_site_v1.tmpl", size: 330, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0xde, 0x5d, 0xb3, 0x96, 0x51, 0x4, 0x23, 0x85, 0x9, 0xe5, 0x4, 0xaf, 0x61, 0xc5, 0x22, 0x14, 0x58, 0xb5, 0xd8, 0xb3, 0x86, 0x4b, 0x2, 0xd1, 0x81, 0x66, 0xc3, 0x6, 0xe6, 0x2c, 0xe0}}
	return a, nil
}

var _httprouter_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xb1\x4e\xc3\x40\x0c\x86\x77\x3f\x85\x75\x53\xb2\xd4\x52\xc6\x6e\x15\x42\x88\x99\x17\xe8\x71\x71\x82\x45\xcf\x17\xb9\x4e\x20\x42\x7d\x77\x94\xe8\x10\x74\x62\xb1\xfc\xff\xdf\x67\x4f\x31\xbd\xc7\x91\x71\xe9\x00\x24\x4f\xc5\x1c\x1b\x40\x44\x3c\x60\x18\xc5\xdf\xe6\xd7\x43\x2a\x99\xe2\x45\xf2\x4a\x59\x8c\x96\x2e\xfc\xc3\x89\x75\x14\xe5\x00\x2d\xc0\x30\x6b\x42\x51\xf1\xa6\xc5\xaf\xfd\xee\xd4\xf7\x8f\xea\xb6\x36\xca\x1f\xcd\x8b\x38\xb7\x2d\xdc\x00\x88\x70\x0b\x78\xdd\xc6\xd2\xa1\xa8\xb3\x0d\x31\x31\x8a\x0e\x05\x7c\x9d\xb8\x0a\x6e\x73\xf2\xfa\xec\xc9\xca\x3c\xfd\x2e\xe7\x2c\x76\x0c\x4b\x17\xce\x3b\x7d\xd6\x9e\x3f\x77\xca\x8e\x58\x29\xc9\xd6\x52\x55\x4e\xe6\x92\x2e\x7c\xbd\x57\x62\x6d\xe9\x98\xa2\xf3\x58\x6c\xfd\xf1\x1f\x6a\xbe\xf7\xff\x5a\x37\xf8\x0e\x00\x00\xff\xff\x96\xf0\x08\x77\x53\x01\x00\x00"

func httprouter_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mirc_routes_site_v2Tmpl,
		"httprouter_mirc_routes_site_v2.tmpl",
	)
}

func httprouter_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := httprouter_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_mirc_routes_site_v2.tmpl", size: 339, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x44, 0x80, 0x40, 0x25, 0x4a, 0xcf, 0xf8, 0x16, 0x61, 0x42, 0x46, 0xe6, 0xec, 0x2a, 0x4, 0x4e, 0x8c, 0xd2, 0x88, 0xe3, 0x9, 0x5, 0x5a, 0xa9, 0x87, 0xee, 0x74, 0xc7, 0x1, 0x7c, 0xfb, 0xba}}
	return a, nil
}

var _iris_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x31\x0e\xc2\x30\x0c\x05\xd0\xdd\xa7\xf8\x23\x2c\x0e\xb1\x18\x38\x05\xe2\x0a\x06\xa2\x60\xb5\x56\x84\xdb\x44\x42\x55\xef\xce\xde\xfd\x79\x7b\xf7\xb9\x60\xdb\xc0\x8f\xa9\xde\xd5\x0b\xf6\x9d\xa8\x36\x64\xce\x42\x14\xe5\xdb\x2d\x0a\x4e\x04\x00\xd5\xd6\x4f\x7f\xf2\xab\x79\xd2\xd9\xfc\x97\xdc\x22\x0d\xc1\x10\xbe\xf2\xe5\x48\x26\x5d\x35\x74\x49\x16\xb6\xa4\x91\x05\x23\x0b\x67\xbe\xd1\x99\xfe\x01\x00\x00\xff\xff\xae\x2d\xc4\xdf\x77\x00\x00\x00"

func iris_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_go_modTmpl,
		"iris_go_mod.tmpl",
	)
}

func iris_go_modTmpl() (*asset, error) {
	bytes, err := iris_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_go_mod.tmpl", size: 119, mode: os.FileMode(0644), modTime: time.Unix(1585823872, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0xc8, 0x96, 0xdd, 0x25, 0xd5, 0xf2, 0xa9, 0x1a, 0xb0, 0x6e, 0x7e, 0x87, 0x5f, 0xb1, 0x14, 0xb, 0x77, 0xd2, 0x2e, 0x39, 0x8f, 0x83, 0x36, 0x41, 0x2a, 0x64, 0xd5, 0x19, 0x4f, 0xd8, 0x21}}
	return a, nil
}

var _iris_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x4f\xbd\x4e\xc3\x30\x10\xde\xfd\x14\x47\x26\x9b\x21\xa6\xb0\xa0\xa2\x0e\x48\x88\x91\x4a\xc0\x0b\x1c\xa9\x6b\x4e\x75\x6c\xeb\x7c\x29\x03\xca\xbb\xa3\x38\x89\xb2\xe0\xc5\x96\xbf\xff\x8c\xdd\x05\xbd\x83\x1e\x29\x2a\x45\x7d\x4e\x2c\xa0\x15\x00\x40\x13\x92\x6f\xd4\xfc\xf4\x24\xdf\xc3\x57\xdb\xa5\xde\x5e\x50\x90\xb1\x58\x62\x2a\xf6\xba\xbb\x6f\x94\x51\xea\x3c\xc4\xae\x7a\x68\x03\xbf\x55\x82\x39\xc3\xfe\x00\x13\xab\x7d\x73\x3f\xda\xcc\x4e\xd6\x02\x3b\x4f\x45\x1c\x43\x71\x7c\xc5\x28\x05\x24\x55\x5e\x25\xac\xe8\xc7\x02\x6a\xcc\x79\xd3\x16\x41\x96\x55\x58\x6f\xea\x5c\x05\xe9\x0c\x8e\x79\x8a\x9c\xa2\xdb\xf7\x21\xea\x9a\xfd\x7c\x3a\xb1\x6e\xf6\x8f\x77\xbb\x87\xc6\x98\xa7\x4a\xba\x39\x40\xa4\xb0\x14\x9d\x4e\x48\xbe\x7d\x45\xc1\xa0\x1d\xb3\xa9\xdf\xa3\x1a\x97\x59\xff\x35\x82\xdb\xd9\x3c\xe7\x40\x1d\x0a\xa5\xb8\xee\xb6\x16\x3e\x8f\x2f\xc7\xfd\x36\x93\xd3\x20\x6e\x1b\x39\xaa\xbf\x00\x00\x00\xff\xff\x7e\xb0\xed\xb8\x74\x01\x00\x00"

func iris_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mainTmpl,
		"iris_main.tmpl",
	)
}

func iris_mainTmpl() (*asset, error) {
	bytes, err := iris_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_main.tmpl", size: 372, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0x62, 0x83, 0x9, 0x2d, 0xd8, 0xa6, 0x8f, 0xb7, 0x1d, 0xe9, 0xb1, 0x28, 0x19, 0xd6, 0x36, 0x76, 0x8f, 0xe4, 0xfa, 0x99, 0x75, 0xab, 0x10, 0xf2, 0x5f, 0x73, 0x71, 0x70, 0x48, 0x87, 0x14}}
	return a, nil
}

var _iris_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x6f\xe2\x30\x10\x85\xef\xfe\x15\xb3\x3e\x39\xd2\x2a\xd6\x72\x64\xc5\x75\x57\x1c\xda\xa2\xf2\x03\x2a\x37\x0c\x66\x84\x33\x13\x4d\x1c\xa4\x0a\xe5\xbf\x57\x36\x88\x72\x2a\xcd\x21\xf2\x78\xbe\xf7\xfc\xde\x10\xba\x63\x88\x08\x7d\x20\x36\x86\xfa\x41\x34\x83\x33\x00\x00\x36\x49\xb4\xa6\x1e\x5b\xb0\x91\xf2\x61\x7a\x6f\x3b\xe9\x7d\x48\xd4\x7f\xf8\x9e\xd4\x9f\x16\xbe\x13\x45\xfb\x08\x42\x8e\xc4\x78\x35\x7b\x03\x7b\x3e\x43\xbb\x39\xc6\xe7\xd0\x23\xcc\x73\xa1\x3a\xaf\x32\x65\x1c\xed\x63\xc4\x9f\xfe\xfc\x88\x5a\x58\xd3\x18\xe3\x7d\x94\x65\x44\x46\x0d\x19\x21\x0a\xe8\xc4\xb5\x6d\x1b\xc5\xec\x27\xee\xea\xe0\x1a\x38\x57\xcf\x24\xb1\xdd\x28\x71\x4e\xec\xec\x4d\xd6\xc9\x0e\x61\xcc\x41\xb3\x6d\x2a\x26\x43\x1e\x61\xb9\x82\x97\x21\x93\xf0\x78\xd1\x96\xef\x75\xe2\x27\xd9\xa1\x5b\xf3\x16\x95\x42\x2a\x43\xf3\xfb\xb6\xfe\x7f\x71\x14\x2d\x89\xdd\x6d\x5a\x2b\x8d\x77\xd4\x96\xf8\xb8\x09\xf9\xe0\x6c\xeb\x23\xb2\xbd\xae\xe6\xfa\xa7\x3d\xa0\x6a\x79\xfc\x2a\x47\x57\xd2\x34\x7f\xeb\xf5\xaf\x15\x30\x25\xf8\x0a\x54\x0a\xfd\x0b\x39\x24\x87\xaa\xcd\x9d\xcf\x37\x4d\xf7\xc4\x34\x1e\x6c\x63\x66\xf3\x19\x00\x00\xff\xff\xb6\xda\x03\x3d\x20\x02\x00\x00"

func iris_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mirc_mainTmpl,
		"iris_mirc_main.tmpl",
	)
}

func iris_mirc_mainTmpl() (*asset, error) {
	bytes, err := iris_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_mirc_main.tmpl", size: 544, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x8c, 0x5a, 0xaa, 0xf4, 0xf1, 0x19, 0x23, 0x8b, 0xe7, 0x54, 0xe2, 0x37, 0x0, 0x90, 0xba, 0x11, 0xa, 0xad, 0x2a, 0x3c, 0x29, 0x86, 0x21, 0xdb, 0x5c, 0xec, 0xcb, 0x56, 0xa8, 0xb2, 0x67}}
	return a, nil
}

var _iris_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xb1\x6a\xc4\x30\x0c\x86\x77\x3d\x85\xf0\x94\x0c\x3d\x43\xc7\xdb\x8e\x52\x4a\xe7\xbe\x40\x5c\x47\xf1\x89\x9e\xe5\xa0\x28\x6d\xc3\x91\x77\x2f\x0e\x86\xd2\xa9\x8b\xf8\xf4\x7f\xbf\x34\x87\xf8\x11\x12\xa1\x96\xd5\x68\x01\xe0\x3c\x17\x35\xec\x00\x11\xf1\x84\x2e\xb1\x5d\xd7\xf7\x53\x2c\xd9\x87\x1b\xe7\xcd\x67\x56\xff\xf9\xe8\xfe\xf1\x9e\x24\xb1\x90\x83\x1e\x60\x5a\x25\x22\x0b\x5b\xd7\xe3\xfd\xb8\xbb\x8c\xe3\xb3\x98\x6e\x9d\xd0\x57\xf7\xc6\x46\x7d\x0f\x3b\x80\xf7\x58\x17\x5c\xea\x60\x31\xd2\x29\xc4\x4a\x53\x01\xdb\x66\x6a\xd6\x74\x8d\xd6\x3e\x3d\x5d\x03\xcb\x2f\x0c\x99\xf5\xec\x1e\xdc\x70\xc8\x57\x19\xe9\xbb\xc2\x0b\x19\x62\x93\x9e\x6b\xea\x5b\xe5\xa2\xc6\xf1\x46\xcb\xdf\x4a\x68\xa9\xbf\xc7\x60\x94\x8a\x6e\xe7\xc5\x94\x25\xed\x6e\x80\x1d\x7e\x02\x00\x00\xff\xff\x33\x42\x5b\x6b\x34\x01\x00\x00"

func iris_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mirc_routes_siteTmpl,
		"iris_mirc_routes_site.tmpl",
	)
}

func iris_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := iris_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_mirc_routes_site.tmpl", size: 308, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0x33, 0xb5, 0x12, 0x94, 0x83, 0x4, 0xb9, 0x1e, 0x46, 0xaa, 0x54, 0x99, 0xdb, 0x25, 0xe3, 0x9, 0xde, 0x1a, 0xd, 0xb9, 0x76, 0xd2, 0x76, 0xf3, 0x6a, 0x3e, 0x84, 0x16, 0x4e, 0xc4, 0x8b}}
	return a, nil
}

var _iris_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xb1\x6e\xac\x40\x0c\x45\x7b\x7f\x85\x35\x15\x14\x6f\x47\xbc\x72\xbb\x55\x14\x45\xa9\xf3\x03\x4c\x06\xc3\x5a\xd9\xf1\x20\x63\x48\xd0\x8a\x7f\x8f\x20\x23\xad\x52\xa5\xb1\xae\xef\x39\xf6\x18\xe2\x47\x18\x08\x97\x06\x80\xd3\x98\xd5\xb0\x02\x44\xc4\x13\xba\x81\xed\x3a\xbf\x9f\x62\x4e\x3e\xdc\x38\xad\x3e\xb1\xfa\xe5\xbf\xfb\x83\x7b\x92\x81\x85\x1c\xd4\x00\xfd\x2c\x11\x59\xd8\xaa\x1a\xef\xc7\xdd\xa5\xeb\x9e\xc5\x74\xad\x84\x3e\xab\x37\x36\xaa\x6b\xd8\x00\xbc\xc7\x7d\xc1\x69\x1f\x4b\x83\x2c\x46\xda\x87\x48\xc8\xd2\x67\xb0\x75\xa4\x22\x98\xce\xd1\xca\xb3\xa7\x6b\x60\x79\x84\x36\xb1\x9e\xdd\x3f\xd7\x1e\xf0\x45\xf3\x3c\x3e\xc2\x0f\x5c\x9a\x42\x5f\xa5\xa3\xaf\x83\x92\x21\x16\xea\x79\x6f\x7d\x51\x2e\x6a\x1c\x6f\x34\xfd\x56\x42\x69\xfd\x3d\x06\xa3\x21\xeb\x7a\x9e\x4c\x59\x86\xcd\xb5\xb0\xc1\x77\x00\x00\x00\xff\xff\x29\x6c\x7f\x38\x51\x01\x00\x00"

func iris_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mirc_routes_site_v1Tmpl,
		"iris_mirc_routes_site_v1.tmpl",
	)
}

func iris_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := iris_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_mirc_routes_site_v1.tmpl", size: 337, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc4, 0xa2, 0x13, 0x34, 0x2e, 0xa9, 0xa8, 0x9b, 0xc1, 0xfb, 0x29, 0xcf, 0x39, 0xc1, 0x58, 0xfa, 0xc0, 0xe2, 0x30, 0xbd, 0xcc, 0xfd, 0x33, 0x57, 0x26, 0xaa, 0x7e, 0xc7, 0x6d, 0xc6, 0x6c, 0x48}}
	return a, nil
}

var _iris_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xb1\x6a\xc4\x30\x0c\x86\x77\x3d\x85\xf0\x94\x2c\x67\xc8\x78\xdb\x51\x4a\xe9\xdc\x17\x38\xd7\x51\x5c\xd1\xb3\x1c\x14\x25\x6d\x38\xf2\xee\x25\xc1\xa5\xdc\xd4\xc5\x58\xff\xf7\xfd\xff\x18\xe2\x67\x48\x84\x4b\x07\xc0\x79\x2c\x6a\xd8\x00\x22\xe2\x09\x5d\x62\xfb\x98\xdf\x4f\xb1\x64\x1f\x6e\x9c\x57\x9f\x59\xfd\xd2\xb9\x7f\xb8\x27\x49\x2c\xe4\xa0\x05\x18\x66\x89\xc8\xc2\xd6\xb4\x78\x3f\x7a\x97\xbe\x7f\x16\xd3\xb5\x11\xfa\x6a\xde\xd8\xa8\x6d\x61\x03\xf0\x1e\xf7\x03\xa7\xfd\x59\x3a\x64\x31\xd2\x21\x44\x42\x96\xa1\x80\xad\x23\x55\xc1\x74\x8e\x56\xc7\x5e\xb4\xcc\xe3\xdf\xe7\x9a\x59\xcf\x6e\xe9\xdc\xf5\xa0\xaf\xd2\xd3\xf7\x41\xc9\x10\x2b\xf5\xbc\xa7\xbe\x2a\x17\x35\x8e\x37\x9a\x1e\x95\x50\x53\x7f\x8f\xc1\x28\x15\x5d\xcf\x93\x29\x4b\xda\x6a\xed\xa9\xc6\x8f\xb5\x5f\x79\x1f\xdf\xe0\x27\x00\x00\xff\xff\x0d\xb7\x7d\xc3\x5a\x01\x00\x00"

func iris_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mirc_routes_site_v2Tmpl,
		"iris_mirc_routes_site_v2.tmpl",
	)
}

func iris_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := iris_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_mirc_routes_site_v2.tmpl", size: 346, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x94, 0x4e, 0x70, 0xfa, 0xac, 0xc4, 0x4b, 0xcf, 0xe7, 0x3b, 0x6e, 0x4f, 0xad, 0x14, 0xea, 0x65, 0x41, 0x3b, 0xa1, 0x57, 0xbc, 0xf6, 0xbf, 0xb8, 0x3c, 0xd5, 0x33, 0x62, 0x5f, 0x10, 0x31, 0xa7}}
	return a, nil
}

var _macaron_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x31\x8e\xc2\x30\x10\x05\xd0\x7e\x4e\xf1\xcb\xdd\xe6\x1b\x1b\x1a\x2e\x81\xb8\x82\x09\x96\x19\x25\x93\x01\x0b\x5b\x42\x51\xee\x4e\x41\xff\xcc\xef\x7d\x29\xd8\x36\xf0\x3a\xd7\x4b\xb6\x82\x7d\x17\xa9\x8e\xc8\x98\x44\x5a\x79\x75\x6d\x05\x7f\x02\x00\x55\xdf\x8f\x7e\xe3\xe4\x16\xf2\xa2\xf6\x09\xa6\x2d\x8c\x84\x91\x78\xe2\xe1\x47\xfc\x39\x57\xea\x1a\x2c\x4f\xb9\xf9\xca\x11\x31\x22\x8f\x3c\xcb\xbf\x7c\x03\x00\x00\xff\xff\xab\xc7\xf6\x50\x6e\x00\x00\x00"

func macaron_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_go_modTmpl,
		"macaron_go_mod.tmpl",
	)
}

func macaron_go_modTmpl() (*asset, error) {
	bytes, err := macaron_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_go_mod.tmpl", size: 110, mode: os.FileMode(0644), modTime: time.Unix(1594226669, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x6f, 0x5d, 0xe5, 0xa2, 0x2a, 0xc5, 0xa6, 0x2e, 0x93, 0x5f, 0xab, 0x7f, 0x11, 0xe1, 0x6b, 0xd6, 0xd4, 0xa4, 0x55, 0xf5, 0x54, 0xf2, 0xff, 0x6d, 0x3f, 0x70, 0x82, 0x79, 0xe4, 0xd2, 0xf}}
	return a, nil
}

var _macaron_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\xca\xc3\x20\x14\x85\xf7\xfb\x14\x87\x4c\xfa\x0f\x31\x3f\x74\x0a\x74\xeb\xda\x06\xda\xbe\x80\x88\x15\x09\x6a\x50\x93\x0e\x25\xef\x5e\x30\x91\x0c\x9d\x0e\xdc\xfb\x9d\x7b\xbf\x49\xaa\x51\x1a\x0d\x27\xad\x27\xb2\x6e\x0a\x31\x83\x11\x00\x34\x26\x4c\xa3\x69\xad\x17\x4e\x2a\x19\x83\x6f\x97\xff\x86\x38\xd1\x6b\xf6\xaa\x14\x18\xc7\xa7\xa0\x0e\xfd\x19\x95\xba\xe9\x37\xe3\x54\xe6\x42\x20\x6a\x63\x53\xd6\x11\x49\xc7\x45\xfa\x9c\x90\x43\x45\x0b\x53\x81\xc7\xbe\x67\xee\x28\xa7\x2c\x63\xae\xcd\x92\x56\x69\xd6\x9f\xba\xae\xe3\xdb\xe3\xf6\x3e\x7b\xc6\x69\xdd\xad\x7e\x8f\xe1\xaf\x7a\x5d\xb7\xac\xce\x42\xe0\x39\x5c\x86\xfe\x30\x8c\x61\xce\x7a\xf3\xa3\x95\xbe\x01\x00\x00\xff\xff\xee\xe4\x75\x48\x1a\x01\x00\x00"

func macaron_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mainTmpl,
		"macaron_main.tmpl",
	)
}

func macaron_mainTmpl() (*asset, error) {
	bytes, err := macaron_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_main.tmpl", size: 282, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0x55, 0x52, 0x74, 0x55, 0x0, 0xda, 0xbb, 0x5d, 0xb2, 0xbc, 0x3b, 0xf7, 0x5a, 0xec, 0x82, 0x27, 0xe4, 0x77, 0xee, 0x87, 0x17, 0xe9, 0x46, 0xeb, 0xe8, 0x4a, 0x83, 0xd, 0xe4, 0xf2, 0x8a}}
	return a, nil
}

var _macaron_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x6f\xe2\x30\x10\x85\xef\xfe\x15\xb3\x3e\x39\xd2\x2a\xd6\x72\x64\xc5\x75\x57\x3d\xd0\xa2\xf2\x03\x2a\x37\x0c\x66\x84\x33\x13\x4d\x1c\xa4\x0a\xe5\xbf\x57\x36\x88\x72\x2a\xcd\x21\xf2\xf3\x7c\xf3\xfc\xde\x10\xba\x63\x88\x08\x7d\x20\x36\x86\xfa\x41\x34\x83\x33\x00\x00\x36\x49\xb4\xa6\x1e\x5b\xb0\x91\xf2\x61\x7a\x6f\x3b\xe9\x7d\x48\xd4\x7f\xf8\x9e\xd4\x9f\x16\xbe\x13\x45\xfb\x08\x42\x8e\xc4\x78\x35\x7b\x03\x7b\x3e\x43\xbb\x39\xc6\xe7\xd0\x23\xcc\x73\xa1\x3a\xaf\x32\x65\x1c\xed\x63\xc4\x9f\xfe\xfc\x88\x5a\x58\xd3\x18\xe3\x7d\x94\x65\x44\x46\x0d\x19\x21\x0a\xe8\xc4\xb5\x6d\x1b\xc5\xec\x27\xee\xaa\x70\x0d\x9c\xab\x67\x92\xd8\x6e\x94\x38\x27\x76\xf6\xb6\xd6\xc9\x0e\x61\xcc\x41\xb3\x6d\x2a\x26\x43\x1e\x61\xb9\x82\x97\x21\x93\xf0\x78\xd9\x2d\xdf\xeb\xc4\x6b\xd9\xa1\x7b\xe2\x2d\x2a\x85\x54\x44\xf3\xfb\x36\xfe\x7f\x71\x14\x2d\x89\xdd\x4d\xad\x43\x17\x54\xf8\x0e\xdc\x12\x1f\x37\x21\x1f\x9c\x6d\x7d\x44\xb6\xd7\xd1\x5c\xff\xb4\x07\x54\x2d\xef\x5f\x1d\xd0\x95\x40\xcd\xdf\x7a\xfd\x6b\x05\x4c\x09\xbe\x32\x95\x4e\xff\x42\x0e\xc9\xa1\x6a\x73\xe7\xf3\x4d\xd9\x3d\x31\x8d\x07\xdb\x98\xd9\x7c\x06\x00\x00\xff\xff\x17\x74\xa8\x56\x23\x02\x00\x00"

func macaron_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mirc_mainTmpl,
		"macaron_mirc_main.tmpl",
	)
}

func macaron_mirc_mainTmpl() (*asset, error) {
	bytes, err := macaron_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_mirc_main.tmpl", size: 547, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0x2c, 0x56, 0xc5, 0xac, 0x62, 0x8e, 0x16, 0x8e, 0xc8, 0xa2, 0x7a, 0x76, 0xd6, 0x54, 0x5b, 0x16, 0xdb, 0x64, 0x9b, 0xb4, 0x26, 0xcf, 0xf9, 0xdd, 0x1, 0x92, 0x14, 0xd2, 0x88, 0x19, 0x67}}
	return a, nil
}

var _macaron_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xc1\x4a\xc4\x40\x0c\x86\xef\x79\x8a\x30\xa7\xf6\xe0\x06\x3c\xee\x6d\x11\x11\xcf\xbe\xc0\x8e\xd3\xb4\x1b\xdc\xc9\x94\x34\x55\x8b\xec\xbb\xcb\x94\x01\xf1\xb4\x97\xf0\xe7\xff\xbe\x64\x8e\xe9\x23\x4e\x8c\x56\x56\xe7\x05\x40\xf2\x5c\xcc\xb1\x03\x44\xc4\x03\x86\x49\xfc\xb2\xbe\x1f\x52\xc9\x14\xaf\x92\x37\xca\x62\xf4\xf9\x18\xee\x70\x62\x9d\x44\x39\x40\x0f\x30\xae\x9a\x50\x54\xbc\xeb\xf1\x67\xbf\x3b\x0d\xc3\xb3\xba\x6d\x9d\xf2\x57\xf7\x26\xce\x7d\x0f\x37\x00\x22\xac\x0b\x2e\x75\x88\x3a\xdb\x18\x53\x4d\x63\x01\xdf\x66\x6e\xd4\x6d\x4d\xde\x3e\x3d\x5d\xa2\xe8\x5f\x38\x67\xb1\x63\x78\x08\xe7\x1d\xbe\xea\xc0\xdf\x35\xbc\xb0\x23\x36\x48\x52\x5b\x6a\xca\xc9\x5c\xd2\x95\x97\xff\x4a\x6c\x2d\x1d\x53\x74\x9e\x8a\x6d\xd5\xbf\xc1\x6f\x00\x00\x00\xff\xff\xe4\xd6\xb4\xf6\x2d\x01\x00\x00"

func macaron_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mirc_routes_siteTmpl,
		"macaron_mirc_routes_site.tmpl",
	)
}

func macaron_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := macaron_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_mirc_routes_site.tmpl", size: 301, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0x4d, 0x6f, 0xcf, 0x5c, 0x2d, 0x51, 0xad, 0x10, 0x46, 0x7, 0x31, 0xc6, 0x1e, 0x46, 0xa, 0xcc, 0xdc, 0xf2, 0x8c, 0x6e, 0x38, 0xeb, 0x8, 0xa3, 0x83, 0x82, 0xa0, 0xa5, 0x35, 0x24, 0x60}}
	return a, nil
}

var _macaron_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xb1\x4e\xc3\x40\x0c\x86\x77\x3f\x85\x75\x53\x32\x50\xab\x8c\xdd\x2a\x84\x10\x33\x2f\xd0\xe3\xe2\xa4\x16\x3d\x5f\xe4\x3a\x81\x08\xf5\xdd\x51\xc2\x49\x15\x13\x8b\xf5\xfb\xff\x3e\x7b\x8c\xe9\x23\x0e\x8c\xf3\x1e\x40\xf2\x58\xcc\xb1\x01\x44\xc4\x1d\x86\x41\xfc\x3c\xbd\xef\x52\xc9\x14\x2f\x92\x17\xca\x62\x34\x3f\x86\x7f\x38\xb1\x0e\xa2\x1c\xa0\x05\xe8\x27\x4d\x28\x2a\xde\xb4\xf8\xbd\xdd\x1d\xbb\xee\x59\xdd\x96\x46\xf9\xb3\x79\x13\xe7\xb6\x85\x1b\x00\x11\xae\x0b\x5e\xd7\x31\xef\x51\xd4\xd9\xfa\x98\x18\x45\xfb\x02\xbe\x8c\x5c\x05\xb7\x29\x79\x7d\xf6\x74\x8e\xa2\xf7\x70\xca\x62\x87\xf0\x10\x4e\x1b\x7c\xb1\x32\x8d\xf7\xf0\x0b\xe7\x7d\xa5\xaf\xda\xf1\xd7\x46\xd9\x11\x2b\x25\x59\x5b\xaa\xca\xd1\x5c\xd2\x85\xaf\x7f\x95\x58\x5b\x3a\xa4\xe8\x3c\x14\x5b\x56\xff\x06\x3f\x01\x00\x00\xff\xff\x97\x82\x75\xe1\x4a\x01\x00\x00"

func macaron_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mirc_routes_site_v1Tmpl,
		"macaron_mirc_routes_site_v1.tmpl",
	)
}

func macaron_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := macaron_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_mirc_routes_site_v1.tmpl", size: 330, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0xde, 0x5d, 0xb3, 0x96, 0x51, 0x4, 0x23, 0x85, 0x9, 0xe5, 0x4, 0xaf, 0x61, 0xc5, 0x22, 0x14, 0x58, 0xb5, 0xd8, 0xb3, 0x86, 0x4b, 0x2, 0xd1, 0x81, 0x66, 0xc3, 0x6, 0xe6, 0x2c, 0xe0}}
	return a, nil
}

var _macaron_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\xb1\x4e\xc3\x40\x0c\x86\x77\x3f\x85\x75\x53\xb2\xd4\x52\xc6\x6e\x15\x42\x88\x99\x17\xe8\x71\x71\x82\x45\xcf\x17\xb9\x4e\x20\x42\x7d\x77\x94\xe8\x10\x74\x62\xb1\xfc\xff\xdf\x67\x4f\x31\xbd\xc7\x91\x71\xe9\x00\x24\x4f\xc5\x1c\x1b\x40\x44\x3c\x60\x18\xc5\xdf\xe6\xd7\x43\x2a\x99\xe2\x45\xf2\x4a\x59\x8c\x96\x2e\xfc\xc3\x89\x75\x14\xe5\x00\x2d\xc0\x30\x6b\x42\x51\xf1\xa6\xc5\xaf\xfd\xee\xd4\xf7\x8f\xea\xb6\x36\xca\x1f\xcd\x8b\x38\xb7\x2d\xdc\x00\x88\x70\x0b\x78\xdd\xc6\xd2\xa1\xa8\xb3\x0d\x31\x31\x8a\x0e\x05\x7c\x9d\xb8\x0a\x6e\x73\xf2\xfa\xec\xc9\xca\x3c\xfd\x2e\xe7\x2c\x76\x0c\x4b\x17\xce\x3b\x7d\xd6\x9e\x3f\x77\xca\x8e\x58\x29\xc9\xd6\x52\x55\x4e\xe6\x92\x2e\x7c\xbd\x57\x62\x6d\xe9\x98\xa2\xf3\x58\x6c\xfd\xf1\x1f\x6a\xbe\xf7\xff\x5a\x37\xf8\x0e\x00\x00\xff\xff\x96\xf0\x08\x77\x53\x01\x00\x00"

func macaron_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mirc_routes_site_v2Tmpl,
		"macaron_mirc_routes_site_v2.tmpl",
	)
}

func macaron_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := macaron_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_mirc_routes_site_v2.tmpl", size: 339, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x44, 0x80, 0x40, 0x25, 0x4a, 0xcf, 0xf8, 0x16, 0x61, 0x42, 0x46, 0xe6, 0xec, 0x2a, 0x4, 0x4e, 0x8c, 0xd2, 0x88, 0xe3, 0x9, 0x5, 0x5a, 0xa9, 0x87, 0xee, 0x74, 0xc7, 0x1, 0x7c, 0xfb, 0xba}}
	return a, nil
}

var _makefileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\x4d\x4b\x03\x31\x14\x3c\xef\xfb\x15\x43\xe9\xa1\x2b\x24\xbd\x07\x8a\xbd\xd8\x2a\xa8\x2b\xe8\xc5\x63\x74\x5f\x62\x20\x1f\x25\x9b\xa0\xfe\x7b\xd9\xd5\xee\x82\xbd\xbc\x37\xcc\xbc\x79\x03\x73\xec\x0e\x0f\x2f\xb8\xde\xc1\x26\x13\x0a\xc4\x00\xf1\x49\xc7\xee\x70\x77\x7f\xf3\x0c\xb5\xc3\x7a\x33\x7c\xb0\xf7\x30\x2e\xf6\x90\x10\x51\x07\xc6\xea\x4a\xda\xb4\x82\x28\xdf\x27\x86\x69\x89\xe4\xd3\x6d\xf7\xf8\xaa\xd0\xb3\xd1\xd5\x17\xfa\xdb\x0a\xb9\xc6\x45\x7d\xab\xce\xf7\x34\x4d\x05\x13\x0a\x35\x36\xfd\x92\x10\x09\xc1\x65\xc1\x5f\x3a\x9c\x3c\x0f\x08\xda\x45\x69\xd3\x7f\x6f\xae\x71\x71\xe6\x1a\x2f\xef\x2c\x47\xce\xba\x30\x9d\x81\xa2\x66\x6f\xd3\xcc\x8f\x31\xef\xdb\xb3\xad\xd9\xaf\x37\x53\x03\x2d\xe4\x76\x79\x32\x26\x98\x50\x14\x35\xb3\x3c\x81\xb1\x94\x96\x7e\x02\x00\x00\xff\xff\x40\x00\x19\xaf\x33\x01\x00\x00"

func makefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_makefileTmpl,
		"makefile.tmpl",
	)
}

func makefileTmpl() (*asset, error) {
	bytes, err := makefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "makefile.tmpl", size: 307, mode: os.FileMode(0644), modTime: time.Unix(1585411956, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x53, 0xbf, 0x38, 0x4f, 0x3f, 0x7c, 0x3a, 0xa2, 0x9f, 0xf6, 0xd2, 0x4e, 0x6b, 0x47, 0x5, 0xef, 0x81, 0x8a, 0xd4, 0xee, 0xfa, 0xf6, 0xcc, 0x67, 0xb5, 0x5a, 0xda, 0x86, 0xba, 0x9e, 0x49}}
	return a, nil
}

var _mux_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4e\xf1\x97\xba\x49\x6d\x19\xf0\x16\xe2\x15\xaa\x96\x1a\x6c\x08\x06\x53\x94\x61\xee\xee\x7e\xf6\x4f\xed\x11\xa3\x61\x5d\xc1\xd7\x57\xbf\x54\x6d\xd8\x36\xa2\x6e\xc8\x9c\x0b\x91\xb7\x77\x88\x37\x1c\x08\x00\xba\x7c\x9e\x71\xe3\xbb\x69\xaa\x43\xf4\x97\x54\x3c\xcd\x82\x59\x78\xe1\xd3\x9e\x74\x73\x19\xa3\x26\x8d\x2f\x66\xe6\x33\x2f\x74\xa4\x7f\x00\x00\x00\xff\xff\x53\x2b\x77\xcc\x71\x00\x00\x00"

func mux_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_go_modTmpl,
		"mux_go_mod.tmpl",
	)
}

func mux_go_modTmpl() (*asset, error) {
	bytes, err := mux_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_go_mod.tmpl", size: 113, mode: os.FileMode(0644), modTime: time.Unix(1585823872, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa4, 0xc7, 0x2e, 0x2d, 0x41, 0xe5, 0xf7, 0x4e, 0x3a, 0x2f, 0x4f, 0xd0, 0x8d, 0x48, 0x99, 0xa9, 0xfc, 0x97, 0x3, 0xbd, 0xcd, 0x60, 0x7b, 0x22, 0xa, 0xc4, 0x2e, 0xeb, 0x47, 0x7e, 0x19, 0xfb}}
	return a, nil
}

var _mux_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x4f\x4b\xc4\x30\x10\xc5\xef\xf3\x29\xc6\x9c\x52\x91\x66\x8f\x4b\x65\x0f\x82\x78\x12\x17\xd4\x2f\x10\xeb\x6c\x1a\x4c\x93\x32\x9d\xea\x82\xf4\xbb\x4b\x92\x2e\x7b\x30\x97\xfc\x79\xf3\x5e\xde\x6f\xb2\xfd\x97\x75\x84\xa3\xf5\x11\xc0\x8f\x53\x62\x41\x0d\x88\x88\x2a\x24\xa7\xea\x29\x92\x98\x41\x64\x52\x50\xef\xce\xcb\xb0\x7c\xb4\x7d\x1a\x8d\x4b\xec\x43\xb0\x66\x5c\xce\x0a\x1a\x80\xd3\x12\xfb\x92\xa6\x1b\xfc\x2d\xd3\x8c\xdd\x01\xc7\xe5\xdc\xbe\xd0\xcf\x6b\x5a\x84\x58\x37\x35\xc7\x18\x64\x72\x7e\x16\x62\x9c\x89\xbf\x6d\x94\x19\x25\x61\x3f\xf8\xea\xdc\xc4\xb7\x4d\xd3\x7c\x35\xce\x62\x59\x2e\xae\xb2\xfb\x9e\x8a\xe8\x4f\x48\x5c\x3e\xcd\x95\xdb\xe7\x1c\x11\x1f\xe2\x67\x4e\x21\xad\xba\xfd\x6e\xbf\x53\x77\xc8\xcd\x7d\x99\xbb\x39\x60\xf4\x61\xeb\x9a\x57\x48\xae\x7d\xb2\x62\x83\x26\xe6\xa6\x3c\xaf\xb0\x6e\x64\xff\x2b\xe1\x6d\x66\xab\x60\x17\x64\x63\xf0\xfd\xf8\x78\xec\xae\x78\x9c\xf5\x02\xc7\xb0\xc2\x5f\x00\x00\x00\xff\xff\x86\x20\x9d\xee\x76\x01\x00\x00"

func mux_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mainTmpl,
		"mux_main.tmpl",
	)
}

func mux_mainTmpl() (*asset, error) {
	bytes, err := mux_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_main.tmpl", size: 374, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0xd5, 0xc2, 0x39, 0x38, 0x8f, 0xff, 0x34, 0x50, 0xc7, 0x47, 0xe9, 0x2b, 0x50, 0xc, 0x56, 0x51, 0x70, 0x8f, 0x5b, 0xd5, 0x59, 0x38, 0xf6, 0xaf, 0xd9, 0xaa, 0xc2, 0x21, 0x92, 0x53, 0x8f}}
	return a, nil
}

var _mux_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x4f\xc3\x30\x0c\x85\xef\xf9\x15\x26\xa7\x54\x42\x8d\xd8\x71\x68\x57\x10\x87\xc1\xc4\x7e\x00\x0a\x9d\x97\x59\x6b\xed\xca\x4d\x27\xd0\xd4\xff\x8e\x92\x4d\x63\x27\x46\x0f\x55\x1c\x7f\xef\xe5\xbd\x3e\x34\xfb\x10\x11\xba\x40\x6c\x0c\x75\xbd\x68\x02\x67\x00\x00\x6c\x2b\xd1\x9a\x72\xac\xc1\x46\x4a\xbb\xf1\xb3\x6e\xa4\xf3\xa1\xa5\xee\xdb\x77\xa4\xfe\x30\xf3\x8d\x28\xda\x5b\x10\x72\x24\xc6\xb3\xd9\x07\xd8\xe3\x11\xea\xd5\x3e\xbe\x86\x0e\x61\x9a\x32\xd5\x78\x95\x31\xe1\x60\x6f\x23\xfe\xf0\xf0\x2f\x6a\x66\x4d\x65\x8c\xf7\x51\xe6\x11\x19\x35\x24\x84\x28\xa0\x23\x97\xb6\x75\x14\xb3\x1d\xb9\x29\x83\xab\xe0\x58\x3c\x5b\x89\xf5\x4a\x89\x53\xcb\xce\x5e\x64\x8d\x6c\x10\x86\x14\x34\xd9\xaa\x60\xd2\xa7\x01\xe6\x0b\x78\xeb\x13\x09\x0f\x27\x6d\xfe\xde\x47\x5e\xca\x06\xdd\x0b\xaf\x51\x29\xb4\x79\xa8\xee\x2f\xeb\xe7\x93\xa3\x68\x4e\xec\x2e\xd3\x72\xfc\xba\x82\xd6\xc4\xfb\x55\x48\x3b\x67\x6b\x1f\x91\xed\x79\x35\x95\x3f\x6d\x01\x55\xf3\xdb\x67\x35\xba\x1c\xa6\x7a\x2c\xd7\x77\x0b\x60\x6a\xe1\x37\x4f\xee\xf3\x14\x52\x68\x1d\xaa\x56\x57\x3e\x7f\x14\xdd\x12\xd3\xb0\xb3\x95\x99\xcc\x4f\x00\x00\x00\xff\xff\x8c\x8b\x32\xb2\x1f\x02\x00\x00"

func mux_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mirc_mainTmpl,
		"mux_mirc_main.tmpl",
	)
}

func mux_mirc_mainTmpl() (*asset, error) {
	bytes, err := mux_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_mirc_main.tmpl", size: 543, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0x5d, 0x5, 0x35, 0xe3, 0x2e, 0x7d, 0xc2, 0x38, 0xaf, 0xad, 0xc0, 0x62, 0x1, 0x12, 0x9b, 0x7a, 0xb7, 0x8c, 0xe8, 0x6c, 0x1d, 0x3c, 0xed, 0x40, 0xb3, 0x2, 0x96, 0x2c, 0x7a, 0x7d, 0xd9}}
	return a, nil
}

var _mux_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xc1\x4a\xc4\x30\x10\x86\xef\xf3\x14\x43\x0e\x4b\x8b\xec\x46\xbc\xb9\xb0\xc8\x22\x22\x9e\x3d\x8a\xd0\x34\x99\x76\x07\x9b\xa4\xa4\x53\xdd\x52\xf2\xee\xd2\xdd\x82\x7a\xf2\x92\xfc\x33\xdf\x37\x03\xd3\x1b\xfb\x61\x5a\xc2\x14\x47\xa1\x01\x80\x7d\x1f\x93\x60\x01\x88\x88\x3b\x54\x2d\xcb\x69\xac\x77\x36\x7a\x6d\x3a\xf6\x93\xf6\x9c\xf4\xe7\x9d\xfa\x87\x6b\x0a\x2d\x07\x52\x50\x02\x34\x63\xb0\xc8\x81\xa5\x28\x71\xbe\xcc\x1d\x9d\x7b\x0a\x92\xa6\x22\xd0\x57\xf1\xca\x42\x65\x09\x19\x40\x6b\x5c\x0a\x1c\x96\x87\x83\x50\x6a\x8c\x5d\x52\x13\x41\xa6\x9e\x56\x2a\x69\xb4\xb2\x6e\x7a\x3c\x19\x0e\x3f\xa1\xf2\x9c\xf6\x6a\xab\xaa\x0b\x7c\x09\x8e\xce\x4b\x78\x26\x41\x5c\xa1\xe6\xa5\xab\x57\xe5\x98\x84\x6d\x47\xc3\x5f\x45\xcf\xc3\x58\xbb\xe8\x0d\x87\xbc\xa3\xb3\xf1\x7d\x47\xd7\x13\x57\x5d\xcf\xd6\x08\xb5\x31\x4d\x59\xcf\xec\xf6\x6f\xb7\xdb\xfb\xf7\x9b\xfc\xd0\x70\x27\x94\x0e\xf3\xf5\xcf\x9b\x26\xc6\x43\x6d\xd2\x86\xdd\xe1\x97\xa6\x2a\xc8\xf0\x1d\x00\x00\xff\xff\x25\x33\xca\xf4\x79\x01\x00\x00"

func mux_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mirc_routes_siteTmpl,
		"mux_mirc_routes_site.tmpl",
	)
}

func mux_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := mux_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_mirc_routes_site.tmpl", size: 377, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0x4f, 0xed, 0xfb, 0x7d, 0x64, 0x64, 0xea, 0x19, 0xdc, 0x0, 0x92, 0x5, 0x67, 0xd0, 0x2d, 0x68, 0x96, 0x78, 0x8e, 0x5e, 0x89, 0xfd, 0xa4, 0xff, 0x6e, 0xa7, 0x6a, 0xef, 0x78, 0x41, 0x6b}}
	return a, nil
}

var _mux_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x7a\x0a\x91\x43\x49\x18\xad\xd7\xdd\x56\x28\xa3\x8c\x31\x76\xde\x71\x0c\xea\xda\x4a\x2a\x16\xdb\xc1\x55\xb2\x86\xe0\x77\x1f\x6d\x0c\xdd\x4e\xbb\xd8\xbf\xf4\x7d\xd2\x41\x9d\x36\x5f\xba\x21\x1c\xd6\x00\xec\xba\x10\x05\x4b\x40\x44\x5c\x61\xd1\xb0\x1c\xfb\xc3\xca\x04\xa7\x74\xcb\x6e\x54\x8e\xa3\x1a\x1e\x8a\x7f\xb8\x22\xdf\xb0\xa7\x02\x2a\x80\xba\xf7\x06\xd9\xb3\x94\x15\x4e\xd7\xb9\x9d\xb5\x2f\x5e\xe2\x58\x7a\xfa\x2e\xdf\x59\xa8\xaa\x20\x01\x28\x85\x97\x02\x4f\x97\x67\x58\x23\x7b\xa1\x58\x6b\x43\xc8\xbe\x0e\x20\x63\x47\x59\x90\xd8\x1b\xc9\xcb\x9e\x8f\x9a\xfd\x2d\xec\x1d\xc7\x4d\xb1\x2c\xf6\x57\xf8\x1a\x43\xdf\xdd\xc2\x0c\x87\x75\xa6\x6f\xde\xd2\xf9\x4a\x49\x10\x33\x55\x7c\xe9\xaa\xac\xec\xa2\xb0\x69\xe9\xf4\x57\x51\xd3\xa9\x3f\xd8\xe0\x34\xfb\xb4\xa2\xb3\x76\x5d\x4b\xf3\x0d\xb2\xae\x26\xa3\x85\x9a\x10\xc7\xa4\x26\xb6\x9b\x8f\xfb\xe5\xe3\xe7\x5d\x7a\xaa\xb9\x15\x8a\xdb\x69\xfe\xd3\xa2\x0e\x61\x7b\xd0\x71\xc1\x76\xfb\x4b\x2b\xf6\x90\xe0\x27\x00\x00\xff\xff\x51\x07\xef\x0e\x96\x01\x00\x00"

func mux_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mirc_routes_site_v1Tmpl,
		"mux_mirc_routes_site_v1.tmpl",
	)
}

func mux_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := mux_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_mirc_routes_site_v1.tmpl", size: 406, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0x8c, 0xe6, 0xa3, 0x9d, 0xb, 0x8d, 0xcb, 0xba, 0x45, 0x49, 0xc3, 0xf0, 0x5d, 0x9c, 0xb, 0x2e, 0x25, 0xd8, 0x46, 0x17, 0xce, 0x6c, 0xee, 0x3a, 0xfa, 0x2, 0xf, 0xa6, 0x66, 0x97, 0x86}}
	return a, nil
}

var _mux_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x4d\x4b\xc4\x30\x10\x86\xef\xf9\x15\x43\x0f\x4b\x8b\xb8\x91\xde\x5c\x28\xb2\x88\x88\x67\x8f\x22\x6c\x9a\x4c\xeb\x60\x93\x94\x74\x5a\xb7\x94\xfc\x77\x69\x37\xa2\x7b\xf2\x92\xaf\xe7\xc9\xfb\x26\xbd\xd2\x9f\xaa\x45\x98\x4a\x21\xc8\xf6\x3e\x30\xe4\x02\x00\x60\x0f\x59\x4b\xfc\x31\xd6\x7b\xed\xad\x54\x1d\xd9\x59\x5a\x0a\x72\x2a\xb3\x7f\xb8\x44\xd7\x92\xc3\x4c\x14\x42\x34\xa3\xd3\x40\x8e\x38\x2f\x60\xd9\xee\x1d\x8d\x79\x72\x1c\xe6\xdc\xe1\x57\xfe\x4a\x8c\x45\x21\xa2\x10\x52\xc2\xba\x81\x61\x1d\xa6\x12\xc8\x31\x86\x46\x69\x04\x72\x8d\x17\x3c\xf7\x98\x04\x0e\xa3\xe6\x14\xf6\x1c\xfc\xd8\xff\x2e\x4e\x96\xc2\x21\x9b\xca\xec\xb4\xd1\x17\x67\xf0\xbc\x51\x64\x80\x44\x25\xad\xa7\x32\x29\xc7\xc0\xa4\x3b\x1c\xae\x15\xb9\x0c\x63\x6d\xbc\x55\xe4\xe2\x1e\xcf\xca\xf6\x1d\x5e\xbe\x99\x74\xb9\x68\xc5\xd8\xfa\x30\x47\xb9\x90\x39\xbc\xdd\xdd\xde\xbf\xdf\xc4\x87\x86\x3a\xc6\x50\x2d\x97\x39\xee\x1a\xef\xab\x5a\x85\x1d\x99\xea\x8f\x96\xba\x1f\x53\xc4\x75\xf7\x4f\xf0\xfa\xc2\x28\xbe\x03\x00\x00\xff\xff\x01\xbb\x64\xe4\x9f\x01\x00\x00"

func mux_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mirc_routes_site_v2Tmpl,
		"mux_mirc_routes_site_v2.tmpl",
	)
}

func mux_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := mux_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_mirc_routes_site_v2.tmpl", size: 415, mode: os.FileMode(0644), modTime: time.Unix(1585973991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0x52, 0xc2, 0x2, 0x5d, 0xf2, 0x30, 0x85, 0xba, 0x6a, 0x16, 0xe6, 0xa4, 0xae, 0xb6, 0x2, 0xa5, 0xe2, 0x8f, 0x6, 0x50, 0xf0, 0xf5, 0x1a, 0xf8, 0xf3, 0xa8, 0xc, 0x50, 0xdf, 0x73, 0x9e}}
	return a, nil
}

var _readmeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\x4b\xae\xc2\x30\x0c\x46\xe1\xb9\x57\xf1\x4b\xd6\xd5\x1d\xc1\x6e\x98\xc7\x05\xd3\xa6\xe4\x25\x3b\x11\x65\xf7\x28\x48\x1d\x1e\x9d\x8f\x19\x39\xda\x45\x0f\xc9\x2d\xa9\xd3\x3e\xbc\x43\xe0\x71\xe6\x5c\xff\x8e\x73\xe2\x59\x0d\x7a\xb4\x24\xb1\x60\xab\x6f\xf4\x8a\xe1\x3f\x85\x58\xf0\xa9\xc3\xd0\xac\xee\x7a\xef\x57\x22\x66\x66\xdc\x5c\x56\xa5\x10\xc2\x22\xbe\xd1\x1f\xb2\xbc\x14\xab\x16\x35\xe9\x7a\xf6\x32\x62\x7a\x4c\x44\xdf\x00\x00\x00\xff\xff\x07\x15\x44\x7b\x8e\x00\x00\x00"

func readmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_readmeTmpl,
		"readme.tmpl",
	)
}

func readmeTmpl() (*asset, error) {
	bytes, err := readmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme.tmpl", size: 142, mode: os.FileMode(0644), modTime: time.Unix(1583485705, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0x93, 0xd9, 0x49, 0x63, 0xdd, 0x1, 0xbf, 0xc2, 0x90, 0x6c, 0xd6, 0x94, 0x31, 0xcd, 0xa0, 0xe2, 0x63, 0x53, 0xef, 0xb5, 0x96, 0x41, 0xce, 0x42, 0x53, 0x68, 0x9, 0xd7, 0x7f, 0x2b, 0x25}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"chi_go_mod.tmpl":                     chi_go_modTmpl,
	"chi_main.tmpl":                       chi_mainTmpl,
	"chi_mirc_main.tmpl":                  chi_mirc_mainTmpl,
	"chi_mirc_routes_site.tmpl":           chi_mirc_routes_siteTmpl,
	"chi_mirc_routes_site_v1.tmpl":        chi_mirc_routes_site_v1Tmpl,
	"chi_mirc_routes_site_v2.tmpl":        chi_mirc_routes_site_v2Tmpl,
	"echo_go_mod.tmpl":                    echo_go_modTmpl,
	"echo_main.tmpl":                      echo_mainTmpl,
	"echo_mirc_main.tmpl":                 echo_mirc_mainTmpl,
	"echo_mirc_routes_site.tmpl":          echo_mirc_routes_siteTmpl,
	"echo_mirc_routes_site_v1.tmpl":       echo_mirc_routes_site_v1Tmpl,
	"echo_mirc_routes_site_v2.tmpl":       echo_mirc_routes_site_v2Tmpl,
	"fiber_go_mod.tmpl":                   fiber_go_modTmpl,
	"fiber_main.tmpl":                     fiber_mainTmpl,
	"fiber_mirc_main.tmpl":                fiber_mirc_mainTmpl,
	"fiber_mirc_routes_site.tmpl":         fiber_mirc_routes_siteTmpl,
	"fiber_mirc_routes_site_v1.tmpl":      fiber_mirc_routes_site_v1Tmpl,
	"fiber_mirc_routes_site_v2.tmpl":      fiber_mirc_routes_site_v2Tmpl,
	"gin_go_mod.tmpl":                     gin_go_modTmpl,
	"gin_main.tmpl":                       gin_mainTmpl,
	"gin_mirc_main.tmpl":                  gin_mirc_mainTmpl,
	"gin_mirc_routes_site.tmpl":           gin_mirc_routes_siteTmpl,
	"gin_mirc_routes_site_v1.tmpl":        gin_mirc_routes_site_v1Tmpl,
	"gin_mirc_routes_site_v2.tmpl":        gin_mirc_routes_site_v2Tmpl,
	"httprouter_go_mod.tmpl":              httprouter_go_modTmpl,
	"httprouter_main.tmpl":                httprouter_mainTmpl,
	"httprouter_mirc_main.tmpl":           httprouter_mirc_mainTmpl,
	"httprouter_mirc_routes_site.tmpl":    httprouter_mirc_routes_siteTmpl,
	"httprouter_mirc_routes_site_v1.tmpl": httprouter_mirc_routes_site_v1Tmpl,
	"httprouter_mirc_routes_site_v2.tmpl": httprouter_mirc_routes_site_v2Tmpl,
	"iris_go_mod.tmpl":                    iris_go_modTmpl,
	"iris_main.tmpl":                      iris_mainTmpl,
	"iris_mirc_main.tmpl":                 iris_mirc_mainTmpl,
	"iris_mirc_routes_site.tmpl":          iris_mirc_routes_siteTmpl,
	"iris_mirc_routes_site_v1.tmpl":       iris_mirc_routes_site_v1Tmpl,
	"iris_mirc_routes_site_v2.tmpl":       iris_mirc_routes_site_v2Tmpl,
	"macaron_go_mod.tmpl":                 macaron_go_modTmpl,
	"macaron_main.tmpl":                   macaron_mainTmpl,
	"macaron_mirc_main.tmpl":              macaron_mirc_mainTmpl,
	"macaron_mirc_routes_site.tmpl":       macaron_mirc_routes_siteTmpl,
	"macaron_mirc_routes_site_v1.tmpl":    macaron_mirc_routes_site_v1Tmpl,
	"macaron_mirc_routes_site_v2.tmpl":    macaron_mirc_routes_site_v2Tmpl,
	"makefile.tmpl":                       makefileTmpl,
	"mux_go_mod.tmpl":                     mux_go_modTmpl,
	"mux_main.tmpl":                       mux_mainTmpl,
	"mux_mirc_main.tmpl":                  mux_mirc_mainTmpl,
	"mux_mirc_routes_site.tmpl":           mux_mirc_routes_siteTmpl,
	"mux_mirc_routes_site_v1.tmpl":        mux_mirc_routes_site_v1Tmpl,
	"mux_mirc_routes_site_v2.tmpl":        mux_mirc_routes_site_v2Tmpl,
	"readme.tmpl":                         readmeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"chi_go_mod.tmpl":                     {chi_go_modTmpl, map[string]*bintree{}},
	"chi_main.tmpl":                       {chi_mainTmpl, map[string]*bintree{}},
	"chi_mirc_main.tmpl":                  {chi_mirc_mainTmpl, map[string]*bintree{}},
	"chi_mirc_routes_site.tmpl":           {chi_mirc_routes_siteTmpl, map[string]*bintree{}},
	"chi_mirc_routes_site_v1.tmpl":        {chi_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"chi_mirc_routes_site_v2.tmpl":        {chi_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"echo_go_mod.tmpl":                    {echo_go_modTmpl, map[string]*bintree{}},
	"echo_main.tmpl":                      {echo_mainTmpl, map[string]*bintree{}},
	"echo_mirc_main.tmpl":                 {echo_mirc_mainTmpl, map[string]*bintree{}},
	"echo_mirc_routes_site.tmpl":          {echo_mirc_routes_siteTmpl, map[string]*bintree{}},
	"echo_mirc_routes_site_v1.tmpl":       {echo_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"echo_mirc_routes_site_v2.tmpl":       {echo_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"fiber_go_mod.tmpl":                   {fiber_go_modTmpl, map[string]*bintree{}},
	"fiber_main.tmpl":                     {fiber_mainTmpl, map[string]*bintree{}},
	"fiber_mirc_main.tmpl":                {fiber_mirc_mainTmpl, map[string]*bintree{}},
	"fiber_mirc_routes_site.tmpl":         {fiber_mirc_routes_siteTmpl, map[string]*bintree{}},
	"fiber_mirc_routes_site_v1.tmpl":      {fiber_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"fiber_mirc_routes_site_v2.tmpl":      {fiber_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"gin_go_mod.tmpl":                     {gin_go_modTmpl, map[string]*bintree{}},
	"gin_main.tmpl":                       {gin_mainTmpl, map[string]*bintree{}},
	"gin_mirc_main.tmpl":                  {gin_mirc_mainTmpl, map[string]*bintree{}},
	"gin_mirc_routes_site.tmpl":           {gin_mirc_routes_siteTmpl, map[string]*bintree{}},
	"gin_mirc_routes_site_v1.tmpl":        {gin_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"gin_mirc_routes_site_v2.tmpl":        {gin_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"httprouter_go_mod.tmpl":              {httprouter_go_modTmpl, map[string]*bintree{}},
	"httprouter_main.tmpl":                {httprouter_mainTmpl, map[string]*bintree{}},
	"httprouter_mirc_main.tmpl":           {httprouter_mirc_mainTmpl, map[string]*bintree{}},
	"httprouter_mirc_routes_site.tmpl":    {httprouter_mirc_routes_siteTmpl, map[string]*bintree{}},
	"httprouter_mirc_routes_site_v1.tmpl": {httprouter_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"httprouter_mirc_routes_site_v2.tmpl": {httprouter_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"iris_go_mod.tmpl":                    {iris_go_modTmpl, map[string]*bintree{}},
	"iris_main.tmpl":                      {iris_mainTmpl, map[string]*bintree{}},
	"iris_mirc_main.tmpl":                 {iris_mirc_mainTmpl, map[string]*bintree{}},
	"iris_mirc_routes_site.tmpl":          {iris_mirc_routes_siteTmpl, map[string]*bintree{}},
	"iris_mirc_routes_site_v1.tmpl":       {iris_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"iris_mirc_routes_site_v2.tmpl":       {iris_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"macaron_go_mod.tmpl":                 {macaron_go_modTmpl, map[string]*bintree{}},
	"macaron_main.tmpl":                   {macaron_mainTmpl, map[string]*bintree{}},
	"macaron_mirc_main.tmpl":              {macaron_mirc_mainTmpl, map[string]*bintree{}},
	"macaron_mirc_routes_site.tmpl":       {macaron_mirc_routes_siteTmpl, map[string]*bintree{}},
	"macaron_mirc_routes_site_v1.tmpl":    {macaron_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"macaron_mirc_routes_site_v2.tmpl":    {macaron_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"makefile.tmpl":                       {makefileTmpl, map[string]*bintree{}},
	"mux_go_mod.tmpl":                     {mux_go_modTmpl, map[string]*bintree{}},
	"mux_main.tmpl":                       {mux_mainTmpl, map[string]*bintree{}},
	"mux_mirc_main.tmpl":                  {mux_mirc_mainTmpl, map[string]*bintree{}},
	"mux_mirc_routes_site.tmpl":           {mux_mirc_routes_siteTmpl, map[string]*bintree{}},
	"mux_mirc_routes_site_v1.tmpl":        {mux_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"mux_mirc_routes_site_v2.tmpl":        {mux_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"readme.tmpl":                         {readmeTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
