// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/gin_go_mod.tmpl (122B)
// templates/gin_main.tmpl (344B)
// templates/gin_mirc_main.tmpl (770B)
// templates/gin_mirc_routes_site.tmpl (239B)
// templates/gin_mirc_routes_site_v1.tmpl (269B)
// templates/gin_mirc_routes_site_v2.tmpl (279B)
// templates/makefile.tmpl (269B)
// templates/readme.tmpl (142B)

package cmd

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gin_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x31\x0e\xc2\x30\x0c\x05\xd0\xdd\xa7\xf8\x23\x0c\x75\x93\x88\x85\x4b\x20\xae\x90\x16\xcb\x58\xd4\x8d\x88\x9a\x48\xa8\xea\xdd\x11\x2b\xdb\x1b\x9e\x97\x47\x5b\x04\xfb\x0e\xbe\xbf\xf4\x96\x5d\x70\x1c\x44\x5a\x10\x39\x26\xa2\x2a\xef\x66\x55\x70\x22\x00\x50\xdb\x9e\x6d\xe2\xb9\xf8\x98\x17\xf3\xcf\xe8\x56\xc7\x9e\xd0\x13\x07\x0e\xc3\x24\x5b\xe6\xeb\xff\x54\x5b\x07\x2d\xab\xcd\x3f\xa1\x47\xbe\x70\xa0\x33\x7d\x03\x00\x00\xff\xff\x84\xfb\xed\x9a\x7a\x00\x00\x00"

func gin_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_go_modTmpl,
		"gin_go_mod.tmpl",
	)
}

func gin_go_modTmpl() (*asset, error) {
	bytes, err := gin_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_go_mod.tmpl", size: 122, mode: os.FileMode(0644), modTime: time.Unix(1583524781, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4d, 0x88, 0xd4, 0xf1, 0x65, 0x5e, 0xd6, 0x22, 0x96, 0xd8, 0x5c, 0x4f, 0xaa, 0xf1, 0xf, 0xe6, 0x9d, 0xde, 0xee, 0x61, 0x90, 0x31, 0x1b, 0x6b, 0x83, 0x4, 0x43, 0xa6, 0xb8, 0x31, 0x38, 0x1c}}
	return a, nil
}

var _gin_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xb1\x4e\xc4\x30\x0c\x86\x77\x3f\x85\xe9\x94\x22\xd1\xec\x87\x6e\x03\x46\x4e\x02\x5e\x20\x44\x3e\x63\xd1\x3a\x27\xd7\x85\x01\xf5\xdd\x51\xd3\x56\x87\x44\x96\x38\xf1\xff\xdb\xff\x77\x49\xf9\x33\x31\xe1\x90\x44\x01\x64\xb8\x14\x73\x0c\x80\x88\xd8\xf4\x85\x1b\x58\x4b\x16\xff\x98\xde\xbb\x5c\x86\xc8\xa2\x77\x5c\x54\xf2\x52\x35\xd0\x02\x9c\x27\xcd\x75\x40\x68\xf1\xa7\xea\x09\x0f\x47\x64\xd1\xee\x99\xbe\x43\xbb\xce\x88\x11\x8d\x58\x46\x27\xc3\x91\xec\x2b\xa9\x8f\xe8\x05\x49\x59\x94\xaa\x64\xef\xbf\x6e\xed\x40\x57\xef\xe8\xc9\x7c\x37\xd6\x5b\xf2\xea\x92\x33\x92\xd9\xb2\x91\xba\x97\x49\x43\x7b\x5f\xdf\x37\x47\x54\xe9\xb7\x40\xcb\xe9\x0b\x77\x4f\xc9\x53\x1f\xc8\xac\xad\xdf\x33\xcc\x5b\xfc\xff\xab\xf1\x76\x01\x78\xac\xe9\x76\xae\x18\xf1\xed\xf4\x70\x3a\x5c\x49\xac\x4c\x4e\x95\xe3\x8f\x1c\x66\xf8\x0d\x00\x00\xff\xff\x2c\xf7\x9a\x5e\x58\x01\x00\x00"

func gin_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mainTmpl,
		"gin_main.tmpl",
	)
}

func gin_mainTmpl() (*asset, error) {
	bytes, err := gin_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_main.tmpl", size: 344, mode: os.FileMode(0644), modTime: time.Unix(1583399002, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0xa2, 0x5f, 0xb1, 0x8f, 0xb7, 0x70, 0x61, 0x1a, 0x91, 0x9c, 0xa2, 0x85, 0x88, 0x47, 0x36, 0xc9, 0x8e, 0x12, 0x67, 0x17, 0x8e, 0x92, 0x8e, 0xac, 0xb9, 0x1f, 0x54, 0x1c, 0xa2, 0xc2, 0x4b}}
	return a, nil
}

var _gin_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\xab\xdb\x30\x0c\xc7\xef\xfe\x14\x9a\x0f\x23\x81\x12\xd3\x1e\x3b\xde\x71\x7b\xec\xb2\x57\x78\xc7\xb1\x83\x97\xa9\xae\x68\x22\x07\x45\xe9\x18\x25\xdf\x7d\xd8\xce\x7b\x6d\xd9\x88\x0f\xc1\x92\x7e\xf9\x4b\xfa\x7b\xf0\xed\xd9\x07\x84\xde\x13\x1b\x43\xfd\x10\x45\xa1\x32\x00\x00\xb6\x8b\xc1\x9a\x72\x0d\xa4\xa7\xe9\x67\xd3\xc6\xde\xf9\x8e\xfa\x3f\xae\x27\x71\x97\x9d\x6b\xa3\xa0\x5d\x47\x90\x03\x31\x2e\x42\x12\x27\xc5\x11\xec\xf5\x0a\xcd\xe1\x1c\xbe\xf9\x1e\x61\x9e\x13\xda\xba\x52\x2b\x6a\x97\xed\x1a\xe3\x2e\xdb\x05\xdb\xad\x63\x3b\x6b\x6a\x63\x9c\x0b\x71\x1f\x90\x51\xbc\x22\x84\x08\x32\x71\x5e\xb8\x09\xd1\x1c\x27\x6e\x73\x50\xd5\x70\xcd\xa2\x5d\x0c\xcd\x41\x88\xb5\xe3\xca\xbe\xff\xd6\xc6\x5f\x08\xa3\x7a\x51\x5b\x67\x0c\x59\x85\x70\x84\xfd\x13\xf4\x24\x9f\x4b\x54\x95\x5a\x1c\x34\x17\x3e\x26\x7f\x9a\x97\x41\x29\xf2\x58\xd4\xd3\x79\x2e\xa2\x51\xd2\xd0\x7b\xc8\xd0\x7b\xee\x99\x78\xf3\x2f\xf9\x32\xe8\xb8\x90\x5f\x99\x34\x85\x37\xbd\x74\xde\x3a\xbd\x12\x9f\x0f\x5e\x4f\x7b\xb0\x8d\x0b\xc8\xf6\x26\x36\x97\xeb\x9c\xbf\x74\x04\x14\x49\x43\x96\x07\x7a\x1b\x00\xab\x65\xb1\x4d\xde\xa2\xfe\x94\xb1\x0f\x4f\xc0\xd4\xc1\xad\x65\x32\xe9\x8b\x57\xdf\x55\x28\x52\xdf\xe9\xae\xb8\x77\x24\xa6\xf1\x64\x6b\x33\x9b\xc5\xf6\x3b\xdf\xe0\xfb\x0f\x62\x45\x39\xfa\x16\xaf\xf3\xd2\x49\x50\x27\xe1\xc7\xd2\x6d\x06\xc6\xdf\x55\x79\xe9\xe6\x95\x14\xeb\xcd\x43\xe5\xb2\xfd\x6f\x76\x77\x9f\x9d\xcd\x6c\xfe\x06\x00\x00\xff\xff\xe7\xa0\xd5\xb9\x02\x03\x00\x00"

func gin_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_mainTmpl,
		"gin_mirc_main.tmpl",
	)
}

func gin_mirc_mainTmpl() (*asset, error) {
	bytes, err := gin_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_main.tmpl", size: 770, mode: os.FileMode(0644), modTime: time.Unix(1583515508, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0x82, 0x70, 0x4c, 0x83, 0x91, 0xc5, 0x3f, 0xd5, 0xcc, 0xba, 0x0, 0x38, 0x3a, 0x9f, 0x4e, 0x4d, 0x5d, 0xa4, 0x44, 0x2b, 0x7, 0x77, 0x61, 0xb0, 0xc0, 0x8a, 0xbe, 0x10, 0x66, 0x48, 0xdb}}
	return a, nil
}

var _gin_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x6e\x83\x40\x0c\x80\xe1\xdd\x4f\x61\xdd\xd2\x76\x28\x96\x3a\xb2\x55\x1d\xaa\xce\x7d\x01\xae\x87\x7b\x58\xe1\x38\xe4\x33\x51\x50\x94\x77\x8f\x80\xcb\x94\xd1\xfa\x3f\xdb\xb3\x0f\x27\x1f\x19\x35\x2f\xc6\x05\x40\xd2\x9c\xd5\xf0\x15\x10\x11\x93\x28\xba\x28\x36\x2c\x7f\x4d\xc8\x89\xfc\x28\x69\xa5\x24\x4a\xe7\x0f\x07\x6f\x00\x44\xf8\x2b\xc6\x1b\x7c\x29\x58\x4c\x97\x60\x68\x3e\x62\xcf\xff\x32\x31\xd8\x3a\xf3\x21\x6a\xbb\xee\x77\xbf\x06\x2f\x53\x7d\xd0\x1c\x43\x97\x44\x5b\xf7\xee\xba\x1d\xfc\x4c\x3d\x5f\x1e\xe0\x9b\x0d\xb1\x02\x92\xad\x50\x65\x9f\x6a\x12\x46\x2e\xcf\xcc\xd7\x42\x6d\xf0\xc6\x31\xeb\xba\xed\xdc\xe0\x1e\x00\x00\xff\xff\xca\xe2\x40\x62\xef\x00\x00\x00"

func gin_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_siteTmpl,
		"gin_mirc_routes_site.tmpl",
	)
}

func gin_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site.tmpl", size: 239, mode: os.FileMode(0644), modTime: time.Unix(1583485705, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0xe9, 0x4, 0x35, 0x12, 0xd2, 0x42, 0x96, 0xd, 0xb7, 0xe0, 0x68, 0x3d, 0x20, 0x1c, 0x1d, 0xd, 0xfb, 0xea, 0xd, 0xff, 0x23, 0x7e, 0x64, 0xde, 0x9e, 0xb4, 0x93, 0xd0, 0x87, 0x44, 0xb7}}
	return a, nil
}

var _gin_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\x31\x4e\xc5\x30\x0c\xc6\xf1\xdd\xa7\xb0\xb2\x00\x03\xcf\x7a\x8c\xdd\x10\x03\x62\xe6\x02\x0d\xa9\x49\x2d\x9a\x26\x72\xdd\x8a\x0a\x71\x77\xd4\x26\xb0\x30\x7e\xfa\xff\x12\x17\x1f\x3e\x7c\x64\xdc\xae\x00\x92\x4a\x56\xc3\x5b\x40\x44\x4c\xa2\xe8\xa2\xd8\xb8\xbe\x5d\x42\x4e\xe4\x27\x49\x3b\x25\x51\xda\x1e\x1c\xdc\x01\x10\xe1\xab\x18\x1f\xf0\x66\xc1\xc5\x74\x0d\x86\xe6\x23\x0e\xfc\x2e\x33\x83\xed\x85\xab\x68\xed\xeb\xfc\xf7\x69\xf4\x32\xb7\x03\x97\x3a\xfa\x24\xda\xb9\x7b\xd7\x9f\xe0\x59\xf3\x5a\x7e\x41\x1d\x15\x6c\xd7\x26\x5e\xe6\x81\x3f\xff\x04\x1b\x62\x13\x24\x47\xa1\xc6\x1e\xd5\x24\x4c\xbc\xfc\x67\xbe\x15\xea\x82\x37\x8e\x59\xf7\xe3\xcd\x37\xfc\x04\x00\x00\xff\xff\x39\xab\x49\x7b\x0d\x01\x00\x00"

func gin_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_site_v1Tmpl,
		"gin_mirc_routes_site_v1.tmpl",
	)
}

func gin_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site_v1.tmpl", size: 269, mode: os.FileMode(0644), modTime: time.Unix(1583485705, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0x20, 0x8f, 0xce, 0x2f, 0x5e, 0xf8, 0x16, 0x90, 0xf7, 0x12, 0x1, 0x19, 0xe, 0x90, 0xad, 0xd7, 0x87, 0xec, 0x17, 0xcb, 0x23, 0x85, 0xf2, 0xce, 0x9f, 0x9a, 0xce, 0x14, 0x92, 0xe8, 0x68}}
	return a, nil
}

var _gin_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\x31\x4e\xc6\x30\x0c\x05\xe0\xdd\xa7\xb0\xb2\x00\x4b\x2d\x75\xec\x86\x18\x10\x33\x17\x68\x48\x4d\xb0\x68\x9a\xc8\x75\x2b\x2a\xc4\xdd\x51\xdb\x80\x7e\xa9\xe3\xd3\xfb\x9e\x5d\x7c\xf8\xf4\x91\x71\x6d\x01\x24\x95\xac\x86\xf7\x80\x88\x98\x44\xd1\x45\xb1\x8f\xe5\xad\x09\x39\x91\x1f\x25\x6d\x94\x44\x69\x6d\x1d\x3c\x00\x10\xe1\xab\x18\xef\xf0\x6e\xc6\xd9\x74\x09\x86\xe6\x23\x0e\xfc\x2e\x13\x83\x6d\x85\x4f\x51\xbb\xef\xe3\xee\xb3\xe6\xa5\xd4\x07\xcd\x19\xfa\x24\xda\xb9\xb5\x75\xfd\x21\x5e\xa6\x81\xbf\xfe\x05\x1b\x62\x15\x24\x7b\x43\x95\x3d\xaa\x49\x18\x79\xbe\x32\x5f\x1b\xea\x82\x37\x8e\x59\xb7\xbf\xcd\x53\xcd\xd7\xcd\xad\xfc\x01\xf8\x0d\x00\x00\xff\xff\x02\xa2\x06\x08\x17\x01\x00\x00"

func gin_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_site_v2Tmpl,
		"gin_mirc_routes_site_v2.tmpl",
	)
}

func gin_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site_v2.tmpl", size: 279, mode: os.FileMode(0644), modTime: time.Unix(1583485705, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc3, 0x1c, 0x25, 0x5, 0x78, 0xde, 0x2e, 0x46, 0x64, 0xbb, 0xdd, 0xe3, 0x0, 0x0, 0x2b, 0x86, 0x38, 0x6d, 0x85, 0x2b, 0xf3, 0x41, 0x22, 0xc4, 0xf8, 0x7a, 0x13, 0x1d, 0xa7, 0xc1, 0x30, 0x4d}}
	return a, nil
}

var _makefileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x41\x4b\x03\x31\x10\x85\xcf\x99\x5f\xf1\x28\x3d\x74\x85\x49\xef\x81\xe2\x5e\x6c\x15\xd4\x15\xf4\xe2\x71\xed\x4e\xe2\xc2\xce\xa6\x64\x23\xea\xbf\x97\x44\xda\x5e\x86\xc7\xcc\xfb\x66\xe6\x1d\xba\xfd\xd3\x1b\x6e\x77\x08\xd1\x6b\x06\x2f\xe0\x6f\x3a\x74\xfb\x87\xc7\xbb\x57\xb8\x1d\xd6\x9b\xe5\x53\xa6\x09\x7e\x9c\x07\x58\xf0\xdc\xab\x60\x75\x63\x43\x5c\x81\xf3\xef\x49\xe0\x1b\x22\xfb\x72\xdf\x3d\xbf\x3b\x7c\x7c\x8d\xd3\x40\xb5\x3a\x78\xcd\x64\x42\xfc\x6f\x82\x23\x74\x4c\x2c\x3f\xbd\x9e\x26\x59\xa0\xfd\x38\xdb\x10\xaf\x6c\x90\x59\x52\x9f\x85\xce\xc2\x91\x69\x8f\x43\xa1\x8e\x64\x5a\x4e\x0a\x4e\xbe\xd8\xc8\xb4\x21\x5e\xfc\xd5\xb0\x3d\xaf\xab\x88\xb5\x64\xda\xf5\xa6\x66\x6b\x60\xb7\xd7\x23\xe5\x27\xaf\xd9\x91\xb9\x8c\xab\x28\x71\x1b\xfa\x0b\x00\x00\xff\xff\x95\xb2\xa3\x1d\x0d\x01\x00\x00"

func makefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_makefileTmpl,
		"makefile.tmpl",
	)
}

func makefileTmpl() (*asset, error) {
	bytes, err := makefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "makefile.tmpl", size: 269, mode: os.FileMode(0644), modTime: time.Unix(1583522066, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8b, 0x13, 0xd, 0x9c, 0x85, 0xec, 0xc2, 0xa2, 0xd9, 0xb9, 0xd9, 0x78, 0x1d, 0x15, 0xc, 0xdf, 0x7d, 0xc3, 0x9, 0xd0, 0x25, 0x67, 0x81, 0x8d, 0xb7, 0xe7, 0xc6, 0x9d, 0xbc, 0xeb, 0xe4, 0xe9}}
	return a, nil
}

var _readmeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\x4b\xae\xc2\x30\x0c\x46\xe1\xb9\x57\xf1\x4b\xd6\xd5\x1d\xc1\x6e\x98\xc7\x05\xd3\xa6\xe4\x25\x3b\x11\x65\xf7\x28\x48\x1d\x1e\x9d\x8f\x19\x39\xda\x45\x0f\xc9\x2d\xa9\xd3\x3e\xbc\x43\xe0\x71\xe6\x5c\xff\x8e\x73\xe2\x59\x0d\x7a\xb4\x24\xb1\x60\xab\x6f\xf4\x8a\xe1\x3f\x85\x58\xf0\xa9\xc3\xd0\xac\xee\x7a\xef\x57\x22\x66\x66\xdc\x5c\x56\xa5\x10\xc2\x22\xbe\xd1\x1f\xb2\xbc\x14\xab\x16\x35\xe9\x7a\xf6\x32\x62\x7a\x4c\x44\xdf\x00\x00\x00\xff\xff\x07\x15\x44\x7b\x8e\x00\x00\x00"

func readmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_readmeTmpl,
		"readme.tmpl",
	)
}

func readmeTmpl() (*asset, error) {
	bytes, err := readmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme.tmpl", size: 142, mode: os.FileMode(0644), modTime: time.Unix(1583485705, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0x93, 0xd9, 0x49, 0x63, 0xdd, 0x1, 0xbf, 0xc2, 0x90, 0x6c, 0xd6, 0x94, 0x31, 0xcd, 0xa0, 0xe2, 0x63, 0x53, 0xef, 0xb5, 0x96, 0x41, 0xce, 0x42, 0x53, 0x68, 0x9, 0xd7, 0x7f, 0x2b, 0x25}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gin_go_mod.tmpl":              gin_go_modTmpl,
	"gin_main.tmpl":                gin_mainTmpl,
	"gin_mirc_main.tmpl":           gin_mirc_mainTmpl,
	"gin_mirc_routes_site.tmpl":    gin_mirc_routes_siteTmpl,
	"gin_mirc_routes_site_v1.tmpl": gin_mirc_routes_site_v1Tmpl,
	"gin_mirc_routes_site_v2.tmpl": gin_mirc_routes_site_v2Tmpl,
	"makefile.tmpl":                makefileTmpl,
	"readme.tmpl":                  readmeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"gin_go_mod.tmpl":              {gin_go_modTmpl, map[string]*bintree{}},
	"gin_main.tmpl":                {gin_mainTmpl, map[string]*bintree{}},
	"gin_mirc_main.tmpl":           {gin_mirc_mainTmpl, map[string]*bintree{}},
	"gin_mirc_routes_site.tmpl":    {gin_mirc_routes_siteTmpl, map[string]*bintree{}},
	"gin_mirc_routes_site_v1.tmpl": {gin_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"gin_mirc_routes_site_v2.tmpl": {gin_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"makefile.tmpl":                {makefileTmpl, map[string]*bintree{}},
	"readme.tmpl":                  {readmeTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
