// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/gin_go_mod.tmpl (122B)
// templates/gin_main.tmpl (343B)
// templates/gin_mirc_main.tmpl (638B)
// templates/gin_mirc_routes_site.tmpl (238B)
// templates/gin_mirc_routes_site_v1.tmpl (268B)
// templates/gin_mirc_routes_site_v2.tmpl (278B)
// templates/makefile.tmpl (218B)
// templates/readme.tmpl (141B)

package cmd

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gin_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x3d\x0e\xc2\x30\x0c\x06\xd0\xdd\xa7\xf8\x46\x18\xea\xfc\x88\x73\x20\xae\x10\x4a\xe4\x5a\xc4\x0d\x44\x24\x12\xaa\x7a\x77\xc4\xda\xed\x0d\xcf\xea\xa3\x97\x8c\x6d\x03\xdf\x9e\x72\x4d\x96\xb1\xef\x44\x52\x11\x38\x44\xa2\x96\xdf\x5d\x5b\xc6\x89\x00\x40\xf4\xb3\xf4\x3b\xcf\xd5\x5c\x2a\x6a\x5f\x67\xda\xdc\x88\x18\x91\x3d\xfb\x29\x95\xd7\x92\x38\x1c\xab\xe8\x3a\x49\x5d\x75\xfe\x0b\x23\xf0\x85\x3d\x9d\x7f\x01\x00\x00\xff\xff\x87\x68\x2f\xa7\x7a\x00\x00\x00"

func gin_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_go_modTmpl,
		"gin_go_mod.tmpl",
	)
}

func gin_go_modTmpl() (*asset, error) {
	bytes, err := gin_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_go_mod.tmpl", size: 122, mode: os.FileMode(0644), modTime: time.Unix(1583134248, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0x1d, 0xd1, 0x72, 0x94, 0x72, 0xdd, 0x1e, 0xde, 0xca, 0x17, 0x70, 0xd7, 0x6c, 0x69, 0x1f, 0x4f, 0x32, 0xc4, 0xd2, 0x57, 0x44, 0xc6, 0x4c, 0x35, 0xfe, 0x96, 0xce, 0xa, 0xe, 0xbe, 0xe4}}
	return a, nil
}

var _gin_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xb1\x4e\xc4\x30\x0c\x86\x77\x3f\x85\xe9\x94\x22\xd1\xec\x87\x6e\x03\x46\x4e\x02\x5e\x20\x44\x3e\x63\xd1\x3a\x27\xd7\x85\x01\xf5\xdd\x51\xd3\x56\x87\x44\x96\x38\xf1\xff\xdb\xff\x77\x49\xf9\x33\x31\xe1\x90\x44\x01\x64\xb8\x14\x73\x0c\x80\x88\xd8\xf4\x85\x1b\x58\x4b\x16\xff\x98\xde\xbb\x5c\x86\xc8\xa2\x77\x5c\x54\xf2\x52\x35\xd0\x02\x9c\x27\xcd\x75\x40\x68\xf1\xa7\xea\x09\x0f\x47\x64\xd1\xee\x99\xbe\x43\xbb\xce\x88\x11\x8d\x58\x46\x27\xc3\x91\xec\x2b\xa9\x8f\xe8\x05\x49\x59\x94\xaa\x64\xef\xbf\x6e\xed\x40\x57\xef\xe8\xc9\x7c\x37\xd6\x5b\xf2\xea\x92\x33\x92\xd9\xb2\x91\xba\x97\x49\x43\x7b\x5f\xdf\x37\x47\x54\xe9\xb7\x40\xcb\xe9\x0b\x77\x4f\xc9\x53\x1f\xc8\xac\xad\xdf\x33\xcc\x5b\xfc\xff\xab\xf1\x76\x01\x78\xac\xe9\x76\xae\x18\xf1\xed\xf4\x70\x3a\x5c\x49\xac\x4c\x4e\x95\xe3\x8f\x1c\xe6\xdf\x00\x00\x00\xff\xff\x54\x52\x64\x4b\x57\x01\x00\x00"

func gin_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mainTmpl,
		"gin_main.tmpl",
	)
}

func gin_mainTmpl() (*asset, error) {
	bytes, err := gin_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_main.tmpl", size: 343, mode: os.FileMode(0644), modTime: time.Unix(1583134248, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0xe4, 0xfe, 0x28, 0xe6, 0xcd, 0x24, 0xa2, 0xe1, 0x2b, 0xc2, 0xa6, 0x94, 0xbc, 0x45, 0x5b, 0x3, 0xda, 0xe7, 0x7d, 0x91, 0x33, 0x70, 0xfb, 0xfe, 0xe2, 0x2a, 0xd9, 0xff, 0x2b, 0xd4, 0x28}}
	return a, nil
}

var _gin_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x6b\xc3\x30\x0c\x85\xef\xfe\x15\xc2\x87\x91\x40\x17\xd3\x1c\x03\x3d\x96\xde\xd6\xc2\x8e\x63\x0c\xcf\x53\x5d\xd1\x44\x2e\x8e\x92\x31\x42\xfe\xfb\x48\x1c\x46\x0b\xa5\xf3\xc9\x7a\xef\xd3\x43\xd2\xc5\xba\xb3\xf5\x08\x8d\x25\x56\x8a\x9a\x4b\x88\x02\x99\x02\x00\xd0\x75\xf0\x5a\xa5\xaf\x27\x39\x75\x9f\x85\x0b\x8d\xf1\xc4\xcf\x3e\x30\xb9\xe9\x77\xc7\xb7\x35\x35\x3f\xa6\xa1\x68\xfa\xd2\xb8\x10\x51\x3f\x46\x90\x3d\x31\x2e\x41\x31\x74\x82\x2d\xe8\x61\x80\xe2\x70\xf6\x2f\xb6\x41\x18\xc7\x09\x75\x26\x79\x29\xad\x5f\x3f\x62\x4c\xbf\x5e\xb0\xf2\x31\x56\x6a\x95\x2b\x65\x8c\x0f\x95\x47\xc6\x68\x05\xc1\x07\x88\x1d\xcf\x07\x29\x7c\x50\xc7\x8e\xdd\x5c\x64\x39\x0c\x73\x68\x1d\x7c\x71\x88\xc4\x52\x73\xa6\xff\xda\x5c\xf8\x42\x68\xc5\x46\xd1\xf9\x8c\x21\x4b\x24\x6c\xa1\xda\x40\x43\x71\x9b\xaa\x2c\x79\x1f\xb0\x81\xb4\x77\xb1\x5b\x02\xb2\x85\x5f\xc1\xd3\x74\xb4\x49\xdf\x5f\xa4\x1d\xa6\xb9\x2b\x98\xa5\xed\xdc\xb1\x23\x5e\xc1\xbe\x93\x83\x95\x53\x05\xba\x30\x1e\x59\x8f\xf9\x7f\xa3\x1d\x89\xa9\x3d\xe9\x5c\x8d\x6a\xd9\xe9\x6a\x28\x78\x7b\x27\x16\x8c\x47\xeb\x70\x18\x97\x3d\x23\x4a\x17\xf9\xd6\x4a\xce\xf4\x18\xbf\xb3\x74\xc6\xe2\x95\x04\xf3\xd5\x8d\xd3\xaf\xef\xaa\xe5\xb5\x3a\xaa\xf1\x37\x00\x00\xff\xff\x9c\xc4\x38\x18\x7e\x02\x00\x00"

func gin_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_mainTmpl,
		"gin_mirc_main.tmpl",
	)
}

func gin_mirc_mainTmpl() (*asset, error) {
	bytes, err := gin_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_main.tmpl", size: 638, mode: os.FileMode(0644), modTime: time.Unix(1583163128, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0x78, 0x9d, 0x8f, 0x64, 0x45, 0x84, 0x4b, 0xb9, 0xb7, 0x6c, 0x2d, 0x6d, 0x5, 0xe, 0x80, 0xc0, 0x77, 0xbd, 0xc1, 0x5a, 0xe9, 0x7d, 0xfa, 0x62, 0xff, 0xfa, 0x10, 0xa5, 0x2f, 0x9a, 0xfd}}
	return a, nil
}

var _gin_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x8e\xc2\x30\x0c\x80\xe1\x3d\x4f\x61\x65\xb9\xbb\xe1\x6a\x89\xb1\x1b\x62\x40\xcc\xbc\x40\x43\x6a\x52\x8b\xa6\xa9\x1c\x17\x51\x21\xde\x1d\xb5\x0d\x13\xa3\xf5\x7f\xb6\x47\xe7\x6f\x2e\x10\x48\x9a\x94\xb2\x31\x1c\xc7\x24\x0a\xbf\x06\x00\x20\xb2\x80\x0d\xac\xdd\x74\xa9\x7c\x8a\xe8\x7a\x8e\x33\x46\x16\xbc\xef\xac\xf9\x33\x06\x11\xce\xac\xb4\xc0\x9f\x0c\x59\x65\xf2\x0a\xea\x02\xb4\x74\xe5\x81\x8c\xce\x23\x6d\xa2\xb4\xe7\x7a\xf7\xd0\x39\x1e\xca\x83\x6a\x1b\x9a\xc8\x52\xdb\x7f\xdb\xac\xe0\x34\xb4\xf4\xf8\x80\x23\x29\x40\x01\xc8\x4b\xc1\xc2\xf6\xa2\xec\x7b\xca\xdf\xcc\x95\x82\xb5\x77\x4a\x21\xc9\xbc\xec\xbc\xde\x01\x00\x00\xff\xff\x70\x65\x95\x92\xee\x00\x00\x00"

func gin_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_siteTmpl,
		"gin_mirc_routes_site.tmpl",
	)
}

func gin_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site.tmpl", size: 238, mode: os.FileMode(0644), modTime: time.Unix(1583125664, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0x78, 0xd2, 0x66, 0x82, 0xef, 0x79, 0x34, 0xf6, 0xcc, 0x4b, 0xa0, 0x17, 0x1c, 0x2c, 0x2c, 0x1b, 0x64, 0x8a, 0x3c, 0x92, 0x3e, 0x8f, 0x8c, 0x30, 0x93, 0x3b, 0x72, 0xc5, 0x91, 0x81, 0x6b}}
	return a, nil
}

var _gin_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x4e\xc4\x30\x0c\xc6\xf1\x3d\x4f\x61\x65\x01\x06\x6a\x95\xb1\x1b\x62\x40\xcc\xbc\x40\x43\x6a\x52\x8b\xa6\x89\x5c\xb7\xa2\x42\xbc\xfb\xa9\x4d\xee\x96\x1b\x3f\xfd\x7f\x89\xb3\xf3\x3f\x2e\x10\x6c\xad\x31\x1c\x73\x12\x85\x47\x03\x00\x10\x59\xc0\x06\xd6\x71\xfd\x6a\x7c\x8a\xe8\x26\x8e\x3b\x46\x16\xdc\x5e\xac\x79\x32\x06\x11\x3e\x59\xe9\x80\x0f\x0b\x2c\x2a\xab\x57\x50\x17\x60\xa0\x6f\x9e\xc9\xe8\x9e\xa9\x88\xda\xfe\xce\x7f\xdf\x46\xc7\x73\x3d\xd0\x94\xd1\x47\x96\xce\x3e\xdb\xfe\x04\xef\x92\xd6\x7c\x05\x65\x14\xb0\xb5\x55\x7c\xcc\x03\xfd\xde\x04\x29\x40\x15\xc8\x47\xc1\xca\x5e\x45\xd9\x4f\xb4\xdc\x33\x57\x0b\x76\xde\x29\x85\x24\xfb\xf1\xe6\xff\x12\x00\x00\xff\xff\xe6\xe7\xea\xf7\x0c\x01\x00\x00"

func gin_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_site_v1Tmpl,
		"gin_mirc_routes_site_v1.tmpl",
	)
}

func gin_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site_v1.tmpl", size: 268, mode: os.FileMode(0644), modTime: time.Unix(1583125664, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0xb8, 0x80, 0x3f, 0x7d, 0x23, 0xdc, 0x3a, 0x6e, 0x88, 0x33, 0x44, 0x5, 0xb4, 0x81, 0x92, 0x5d, 0x1d, 0x4d, 0xc2, 0xb0, 0x8d, 0x2, 0xb6, 0xe6, 0xff, 0x2a, 0x6c, 0xc8, 0x7b, 0x5b, 0x94}}
	return a, nil
}

var _gin_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\x31\x4e\xc6\x30\x0c\x05\xe0\xdd\xa7\xb0\xb2\x00\x4b\x2d\x75\xec\x86\x18\x10\x33\x17\x68\x48\x4d\xb0\x68\x9a\xc8\x75\x2b\x2a\xc4\xdd\x51\xdb\x80\x7e\xa9\xe3\xd3\xfb\x9e\x5d\x7c\xf8\xf4\x91\x71\x6d\x01\x24\x95\xac\x86\xf7\x80\x88\x98\x44\xd1\x45\xb1\x8f\xe5\xad\x09\x39\x91\x1f\x25\x6d\x94\x44\x69\x6d\x1d\x3c\x00\x10\xe1\xab\x18\xef\xf0\x6e\xc6\xd9\x74\x09\x86\xe6\x23\x0e\xfc\x2e\x13\x83\x6d\x85\x4f\x51\xbb\xef\xe3\xee\xb3\xe6\xa5\xd4\x07\xcd\x19\xfa\x24\xda\xb9\xb5\x75\xfd\x21\x5e\xa6\x81\xbf\xfe\x05\x1b\x62\x15\x24\x7b\x43\x95\x3d\xaa\x49\x18\x79\xbe\x32\x5f\x1b\xea\x82\x37\x8e\x59\xb7\xbf\xcd\x53\xcd\xd7\xcd\xad\xfc\x81\xdf\x00\x00\x00\xff\xff\x61\x5f\xf5\x64\x16\x01\x00\x00"

func gin_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_site_v2Tmpl,
		"gin_mirc_routes_site_v2.tmpl",
	)
}

func gin_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site_v2.tmpl", size: 278, mode: os.FileMode(0644), modTime: time.Unix(1583163587, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0x22, 0x80, 0x98, 0xda, 0xaf, 0xcb, 0xe6, 0x49, 0x2d, 0x20, 0xe9, 0x39, 0x9, 0x19, 0x6b, 0xa5, 0x6b, 0x41, 0xa3, 0x66, 0x80, 0x4b, 0xb3, 0x2f, 0xd6, 0x63, 0x97, 0x13, 0x4c, 0x99, 0x2e}}
	return a, nil
}

var _makefileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xcd\x8a\x83\x30\x14\x46\xd7\xde\xa7\xf8\x10\x17\x3a\x90\xcc\x3e\x20\xb3\x1a\x9d\x81\xb6\x16\xda\x4d\x97\xb6\x26\x69\xc0\x24\x25\xa6\x94\xbe\x7d\x31\x22\x6e\x2e\x87\x73\xff\xdb\xae\xd9\x9f\xf1\x53\x43\x7b\x65\x23\xd8\x04\xf6\xa2\xb6\x6b\xfe\x77\xbf\x27\x88\x1a\x45\x39\xdd\xe5\x38\x42\x19\x37\x80\x83\xb9\xde\x4a\xe4\x5f\x5c\xfb\x1c\x2c\xbe\x1f\x12\xaa\x22\xe2\xc7\xbf\xee\x70\x11\xb8\x3e\xcd\x38\x50\x8a\x02\xca\x46\xca\xb4\x5f\x24\xf8\x56\xa5\xa5\x93\xa1\x8f\x92\x56\x10\x94\xb1\x60\xc1\x82\x82\x35\xe1\xf6\xad\xa5\x4b\x9d\x6b\x7e\xb1\xb6\x37\x8e\x6b\xbf\xcd\x99\x17\x28\x1b\x05\x65\x45\x99\xfe\xa8\x90\x60\xbe\xbd\xa2\x4f\x00\x00\x00\xff\xff\xbf\x2a\x49\x7b\xda\x00\x00\x00"

func makefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_makefileTmpl,
		"makefile.tmpl",
	)
}

func makefileTmpl() (*asset, error) {
	bytes, err := makefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "makefile.tmpl", size: 218, mode: os.FileMode(0644), modTime: time.Unix(1583125664, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0x28, 0xd7, 0x24, 0x95, 0x27, 0x95, 0x47, 0xd, 0x62, 0x93, 0x69, 0xa2, 0x9c, 0x6c, 0x96, 0x6a, 0x20, 0x13, 0xde, 0x26, 0x3c, 0x83, 0x22, 0x64, 0x88, 0x18, 0xaa, 0x84, 0x24, 0xae, 0xa2}}
	return a, nil
}

var _readmeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\x41\x8e\xc2\x30\x0c\x46\xe1\x7d\x4e\xf1\x4b\xd6\x68\x56\x70\x1b\xf6\x71\xc1\xb4\x29\x49\x1c\xd9\x89\x28\xb7\x47\x41\xea\xf2\xe9\x7d\x44\x28\xc9\x2e\x72\x70\x69\x59\x3c\xec\xc3\x3b\x18\x9e\x66\xce\xf5\xef\x38\x27\x9e\x6a\x90\xa3\x65\x4e\x15\x9b\xbe\xd1\x15\xc3\x7f\x0a\xa9\xe2\xa3\xc3\xd0\x4c\x77\xb9\xf7\x6b\x08\x44\x44\xb8\x39\xaf\x12\x62\x8c\x0b\xfb\x16\xfe\x50\xf8\x25\x58\xa5\x8a\x71\x97\xb3\x97\x91\xf2\x63\xa2\x6f\x00\x00\x00\xff\xff\xe6\xd9\x54\xfa\x8d\x00\x00\x00"

func readmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_readmeTmpl,
		"readme.tmpl",
	)
}

func readmeTmpl() (*asset, error) {
	bytes, err := readmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme.tmpl", size: 141, mode: os.FileMode(0644), modTime: time.Unix(1583125664, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0x7a, 0x6, 0x3f, 0x8d, 0x29, 0x52, 0xb7, 0x7, 0x87, 0xae, 0x68, 0x3f, 0x5f, 0xa, 0xda, 0x30, 0x80, 0x59, 0x33, 0xe6, 0xb9, 0xea, 0xc8, 0xdc, 0xef, 0x8, 0x50, 0x4b, 0x4e, 0xb5, 0xcf}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gin_go_mod.tmpl":              gin_go_modTmpl,
	"gin_main.tmpl":                gin_mainTmpl,
	"gin_mirc_main.tmpl":           gin_mirc_mainTmpl,
	"gin_mirc_routes_site.tmpl":    gin_mirc_routes_siteTmpl,
	"gin_mirc_routes_site_v1.tmpl": gin_mirc_routes_site_v1Tmpl,
	"gin_mirc_routes_site_v2.tmpl": gin_mirc_routes_site_v2Tmpl,
	"makefile.tmpl":                makefileTmpl,
	"readme.tmpl":                  readmeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"gin_go_mod.tmpl":              &bintree{gin_go_modTmpl, map[string]*bintree{}},
	"gin_main.tmpl":                &bintree{gin_mainTmpl, map[string]*bintree{}},
	"gin_mirc_main.tmpl":           &bintree{gin_mirc_mainTmpl, map[string]*bintree{}},
	"gin_mirc_routes_site.tmpl":    &bintree{gin_mirc_routes_siteTmpl, map[string]*bintree{}},
	"gin_mirc_routes_site_v1.tmpl": &bintree{gin_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"gin_mirc_routes_site_v2.tmpl": &bintree{gin_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"makefile.tmpl":                &bintree{makefileTmpl, map[string]*bintree{}},
	"readme.tmpl":                  &bintree{readmeTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
