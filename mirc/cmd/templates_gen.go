// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/chi_go_mod.tmpl (125B)
// templates/chi_main.tmpl (372B)
// templates/chi_mirc_main.tmpl (812B)
// templates/chi_mirc_routes_site.tmpl (247B)
// templates/chi_mirc_routes_site_v1.tmpl (280B)
// templates/chi_mirc_routes_site_v2.tmpl (290B)
// templates/echo_go_mod.tmpl (119B)
// templates/echo_main.tmpl (344B)
// templates/echo_mirc_main.tmpl (813B)
// templates/echo_mirc_routes_site.tmpl (235B)
// templates/echo_mirc_routes_site_v1.tmpl (268B)
// templates/echo_mirc_routes_site_v2.tmpl (278B)
// templates/gin_go_mod.tmpl (115B)
// templates/gin_main.tmpl (331B)
// templates/gin_mirc_main.tmpl (812B)
// templates/gin_mirc_routes_site.tmpl (235B)
// templates/gin_mirc_routes_site_v1.tmpl (268B)
// templates/gin_mirc_routes_site_v2.tmpl (278B)
// templates/httprouter_go_mod.tmpl (126B)
// templates/httprouter_main.tmpl (402B)
// templates/httprouter_mirc_main.tmpl (819B)
// templates/httprouter_mirc_routes_site.tmpl (235B)
// templates/httprouter_mirc_routes_site_v1.tmpl (268B)
// templates/httprouter_mirc_routes_site_v2.tmpl (278B)
// templates/iris_go_mod.tmpl (119B)
// templates/iris_main.tmpl (372B)
// templates/iris_mirc_main.tmpl (813B)
// templates/iris_mirc_routes_site.tmpl (242B)
// templates/iris_mirc_routes_site_v1.tmpl (275B)
// templates/iris_mirc_routes_site_v2.tmpl (285B)
// templates/macaron_go_mod.tmpl (110B)
// templates/macaron_main.tmpl (282B)
// templates/macaron_mirc_main.tmpl (816B)
// templates/macaron_mirc_routes_site.tmpl (235B)
// templates/macaron_mirc_routes_site_v1.tmpl (268B)
// templates/macaron_mirc_routes_site_v2.tmpl (278B)
// templates/makefile.tmpl (339B)
// templates/mux_go_mod.tmpl (113B)
// templates/mux_main.tmpl (374B)
// templates/mux_mirc_main.tmpl (812B)
// templates/mux_mirc_routes_site.tmpl (311B)
// templates/mux_mirc_routes_site_v1.tmpl (344B)
// templates/mux_mirc_routes_site_v2.tmpl (354B)
// templates/readme.tmpl (142B)

package cmd

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _chi_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x41\x0e\xc2\x20\x10\x05\xd0\xfd\x9c\xe2\x2f\x35\xc6\xa1\x45\xcf\x61\xbc\x02\x45\x02\x13\x19\x47\x49\x21\x31\x4d\xef\xee\xde\xfd\x53\x7b\xf4\x9a\xb0\x6d\xe0\xfb\x33\xdf\x82\x26\xec\x3b\x51\x36\xcc\x3c\x7b\xa2\x96\x3e\x5d\x5a\xc2\x81\x00\x20\xcb\x5a\xfa\xc2\xd1\xd4\x85\x2a\xfa\x75\x2a\xcd\x0d\x8f\xe1\x79\xe6\xe9\x9f\x64\x3b\xc7\x22\x2e\x16\xc1\xb8\xf2\xc4\x97\x93\xbc\xa2\xe9\x3b\xac\xb2\xd4\x44\x47\xfa\x05\x00\x00\xff\xff\x30\xbd\x41\x34\x7d\x00\x00\x00"

func chi_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_go_modTmpl,
		"chi_go_mod.tmpl",
	)
}

func chi_go_modTmpl() (*asset, error) {
	bytes, err := chi_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_go_mod.tmpl", size: 125, mode: os.FileMode(0644), modTime: time.Unix(1584548470, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x77, 0xb3, 0xbd, 0x54, 0x3b, 0x3c, 0x47, 0x99, 0xea, 0x74, 0xf, 0xb8, 0x6, 0x1c, 0xf4, 0x5d, 0x90, 0x7c, 0x9d, 0x71, 0xbd, 0xda, 0x3c, 0x5e, 0xdf, 0x2c, 0xe1, 0x9c, 0x90, 0x31, 0xb, 0x66}}
	return a, nil
}

var _chi_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xbd\x4e\xc4\x30\x10\x84\xfb\x7d\x8a\xc5\x95\x23\x41\x7c\xe5\xe9\xd0\x15\x48\x88\x0a\x71\x12\xf0\x02\xc6\xec\x39\x2b\x12\x3b\xda\x6c\xa0\x40\x79\x77\x64\x27\xa7\x2b\x70\xe3\x9f\xd9\x19\xcf\x37\xfa\xf0\xe5\x23\xe1\xe0\x39\x01\xf0\x30\x66\x51\xb4\x80\x88\x68\xfa\x1c\xcd\x7a\x4a\xa4\xae\x53\x1d\x0d\xac\xf7\xc8\xda\xcd\x1f\x6d\xc8\x83\x8b\xf9\x2e\x74\xec\x42\xc7\x06\x1a\x80\xf3\x9c\x42\x0d\xb3\x0d\xfe\xd6\x61\xc1\xc3\x11\x43\xc7\xed\x0b\xfd\xbc\xe6\x59\x49\x6c\xb3\xc6\x38\x87\x42\x91\x27\x25\xc1\x89\xe4\xdb\x27\x9d\x50\x73\x19\x5e\x9d\x9b\xf8\xb6\x69\x56\xae\xc6\x49\xbd\xe8\xc5\x55\x77\x0e\x54\x45\x3e\x23\x49\xfd\xb4\x34\x6e\x9f\x4b\x44\x7a\x48\x9f\x25\x85\xac\x39\xec\x77\xfb\x9d\xb9\x45\x69\xee\xeb\xdc\xcd\x11\x13\xf7\x5b\xd7\xb2\xfa\x1c\xdb\x27\xaf\xbe\xb7\x24\xd2\xd4\xe7\x05\x96\x8d\xec\x7f\xa5\x8a\xb6\x72\x5d\x88\x9d\xc3\xf7\xd3\xe3\xe9\x70\xa5\x93\xa2\x57\x36\x81\x05\xfe\x02\x00\x00\xff\xff\x02\x8d\x70\x72\x74\x01\x00\x00"

func chi_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mainTmpl,
		"chi_main.tmpl",
	)
}

func chi_mainTmpl() (*asset, error) {
	bytes, err := chi_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_main.tmpl", size: 372, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0x7b, 0xbd, 0xf2, 0x7c, 0x50, 0x17, 0xfb, 0x58, 0x6e, 0xc5, 0xb6, 0xca, 0x6f, 0xce, 0x60, 0x21, 0x3f, 0xae, 0xed, 0x88, 0xec, 0xd8, 0x81, 0x7c, 0xe7, 0x19, 0xdd, 0x34, 0xbd, 0xcb, 0xbe}}
	return a, nil
}

var _chi_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x8b\xdb\x30\x10\x85\xef\xfa\x15\x53\x1d\x8a\x0d\xc1\x22\x39\xba\xec\xa9\xb4\xa5\x87\x36\xa1\x39\x96\x1e\x54\xef\x44\x19\x62\x8f\xcc\x78\x9c\x52\x82\xff\xfb\x62\xc9\x9b\x64\x61\x89\x0f\x46\xa3\xf7\xf9\x8d\xe6\xc9\xbd\x6f\x4e\x3e\x20\x74\x9e\xd8\x18\xea\xfa\x28\x0a\x85\x01\x00\xb0\x6d\x0c\xd6\xe4\x65\x20\x3d\x8e\x7f\xab\x26\x76\xce\xb7\xd4\xfd\x77\x1d\x89\x3b\x6f\x5c\x13\x05\xed\x63\x04\x39\x10\xe3\x62\x24\x71\x54\x1c\xc0\x5e\x2e\x50\xed\x4e\xe1\xa7\xef\x10\xa6\x69\x46\x1b\x97\xb5\xec\x76\x5e\x3f\x62\xdc\x79\xbd\x60\x9b\xc7\xd8\xc6\x9a\xd2\x18\xe7\x42\xac\x03\x32\x8a\x57\x84\x10\x41\x46\x4e\x03\x57\x21\x9a\xc3\xc8\x4d\x2a\x8a\x12\x2e\xc9\xb4\x8d\xa1\xda\x09\xb1\xb6\x5c\xd8\xeb\x67\x4d\x7c\x46\x18\xd4\x8b\xda\x32\x61\xc8\x2a\x84\x03\xd4\x4f\xd0\x91\x7c\xc9\x55\x91\xb5\xd8\x6b\x12\x3e\xce\xf9\x54\xdb\x5e\x29\xf2\x90\xdd\xe7\xe7\xd7\xc8\x3f\xe2\x33\xd6\x4b\x99\xa0\xef\xbc\x47\x21\xdf\xce\xc2\xea\x4a\x7e\xcb\xed\xa3\xcc\xe3\xd5\x99\xbc\xee\x7d\x3e\xd2\x3b\xe4\xb6\xd7\xa1\x7e\xf5\x24\x9d\xcb\x5b\xe7\x6b\xbb\x6d\xaf\x7b\xe2\xd3\xce\xeb\xb1\x06\x5b\xb9\x80\x6c\x6f\x66\x53\x5e\x4e\xe9\x4d\x07\x40\x91\x79\x9c\x7c\x95\xaf\x07\xc0\x62\x89\x60\x95\xe6\x2d\x3f\x25\xec\xc3\x13\x30\xb5\x70\x6b\x39\xc7\xf9\xd5\xab\x6f\x0b\x14\x29\xef\x7c\x1f\xe4\x7c\x20\xa6\xe1\x68\x4b\x33\x99\xe5\x82\xee\x12\x86\xdf\x7f\x88\x15\xe5\xe0\x1b\xbc\x4c\x4b\x27\x41\x1d\x85\xdf\x4a\xb7\x33\x30\xfe\x2b\xf2\x3f\x51\xed\x49\xb1\x5c\xbd\x51\xce\xeb\x77\x77\x37\xf7\xbb\x93\x99\xcc\x4b\x00\x00\x00\xff\xff\xbf\xca\xaa\xd0\x2c\x03\x00\x00"

func chi_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mirc_mainTmpl,
		"chi_mirc_main.tmpl",
	)
}

func chi_mirc_mainTmpl() (*asset, error) {
	bytes, err := chi_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_mirc_main.tmpl", size: 812, mode: os.FileMode(0644), modTime: time.Unix(1584606341, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0x13, 0x89, 0x2a, 0x8c, 0xd5, 0x56, 0xde, 0x50, 0x8d, 0x89, 0x88, 0x8c, 0x12, 0x6d, 0x87, 0x8f, 0x6c, 0xf1, 0xe3, 0x37, 0x5b, 0x6a, 0x75, 0x1d, 0xbd, 0x2b, 0x36, 0xa0, 0xf4, 0xa7, 0xbd}}
	return a, nil
}

var _chi_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xc1\x4b\x85\x40\x10\xc7\xf1\xfb\xfc\x15\xc3\x9e\x8a\xd0\x89\x6e\x79\x8b\x0e\xd1\xb9\x63\x04\x6e\xeb\xa8\x43\xae\x2b\xe3\x18\x89\xf8\xbf\x87\xbe\x7d\xa7\x77\x59\x76\xf8\x7e\xf8\x4d\x3e\xfc\xf8\x8e\x51\xd3\x62\x3c\x03\x48\x9c\x92\x1a\xde\x01\x22\x62\x14\x45\xd7\x89\xf5\xcb\x77\x19\x52\x24\x3f\x48\x5c\x29\x8a\xd2\xef\x93\x83\x7b\x00\x22\xfc\x10\x63\x9c\x8f\x47\x46\x63\x6d\x7d\x38\x7e\x6d\x02\x5b\x27\xce\xd5\x74\x09\x86\xdb\xb9\xf9\xda\x7b\x19\xf3\x78\x79\x39\xea\x28\x5a\xb9\xc2\xd5\x27\x78\x1f\x1b\xfe\xbb\x82\x37\x36\xc4\x0c\x48\x8e\x42\x99\xbd\xa8\x49\x18\x78\xbe\x65\x3e\x17\xda\x82\x37\xee\x92\xae\x3b\x6d\xd2\x54\x9f\x8f\xc5\xf3\xd7\xc3\xee\x6a\xd8\xe1\x3f\x00\x00\xff\xff\xe0\x9a\x84\x83\xf7\x00\x00\x00"

func chi_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mirc_routes_siteTmpl,
		"chi_mirc_routes_site.tmpl",
	)
}

func chi_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := chi_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_mirc_routes_site.tmpl", size: 247, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1a, 0xd6, 0x44, 0xd0, 0xd2, 0x3b, 0xf8, 0x4b, 0x15, 0xfd, 0x19, 0xea, 0x6c, 0xc6, 0x24, 0x6b, 0x5b, 0x1e, 0x4, 0x2e, 0x7, 0x96, 0x20, 0x12, 0x80, 0x57, 0x18, 0x8f, 0xa7, 0x5a, 0x96, 0x8e}}
	return a, nil
}

var _chi_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\x3f\x4b\x03\x41\x10\x05\xf0\x7e\x3e\xc5\xb0\x95\x22\xc9\x78\x76\xa6\x13\x0b\xb1\xb6\x14\xe1\xd6\xcd\xe4\x32\x98\xfd\xc3\x64\x6e\xf1\x38\xee\xbb\x4b\x72\xab\x8d\xcd\x83\xc7\xfb\xf1\x8a\x0f\x5f\x7e\x60\xac\x1d\x80\xc4\x92\xd5\xf0\x06\x10\x11\xa3\x28\xba\x41\xec\x38\x7e\x6e\x43\x8e\xe4\x4f\x12\x27\x8a\xa2\x54\x1f\x1c\xdc\x02\x10\xe1\x9b\x18\xe3\xf9\x12\xb5\x43\x49\xc6\x7a\xf0\x81\x51\xd2\x21\x83\x4d\x85\x1b\x30\x1d\x83\xe1\x7c\xbd\x7d\x3e\x7a\x49\xed\x7f\xbb\x96\x3e\x8a\xee\xdc\xc6\xf5\x57\xf0\xa2\x79\x2c\xbf\x60\x2d\x2b\xa8\x5d\x13\xaf\x69\xcf\xdf\x7f\x82\x0d\xb1\x09\x92\xcb\x42\x8d\x3d\xa9\x49\x38\xf1\xf9\x3f\xf3\x6d\xa1\x39\x78\xe3\x21\xeb\xb4\xd0\x2c\xfb\xdd\xfb\xfd\xe6\xf1\xe3\x6e\x71\x3d\x2c\xf0\x13\x00\x00\xff\xff\x86\x90\xe8\xf6\x18\x01\x00\x00"

func chi_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mirc_routes_site_v1Tmpl,
		"chi_mirc_routes_site_v1.tmpl",
	)
}

func chi_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := chi_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_mirc_routes_site_v1.tmpl", size: 280, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe5, 0xeb, 0x61, 0xa3, 0x53, 0x21, 0x89, 0xe3, 0x72, 0xac, 0x83, 0x73, 0x3e, 0x38, 0x29, 0xd2, 0x56, 0xe4, 0x9d, 0xa0, 0x1b, 0x85, 0x5d, 0xd5, 0xb7, 0xb2, 0x15, 0xa0, 0x2b, 0x70, 0xc6, 0xeb}}
	return a, nil
}

var _chi_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\x31\x4b\x04\x31\x10\x05\xe0\x7e\x7e\xc5\x90\x4a\x11\x6f\x24\x9d\xd7\x89\x85\x58\x5b\x8a\x70\x31\x37\xb7\x0e\x5e\x36\x61\x6e\x36\xb8\x2c\xfb\xdf\x65\xd7\x78\xcd\x36\x81\xf0\xbe\xf7\xa6\x84\xf8\x1d\x3a\xc6\xea\x01\x24\x95\xac\x86\x37\x80\x88\x98\x44\xd1\x75\x62\x5f\xc3\xe7\x2e\xe6\x44\xe1\x2c\x69\xa4\x24\x4a\xd5\x3b\xb8\x05\x20\xc2\x37\x31\xc6\xcb\xf2\x54\x8f\xd2\x1b\xeb\x29\x44\x46\xe9\x4f\x19\x6c\x2c\xdc\x80\xe9\x10\x0d\xa7\x75\xf6\x45\xf3\x50\xda\xfe\xee\xef\x73\x48\xa2\x7b\x57\xbd\x3b\xac\xe2\xb5\x3f\xf2\xcf\x55\xb0\x21\x36\x41\xb2\x24\xd4\xd8\x93\x9a\xc4\x33\x5f\xb6\x2c\xb4\x84\xa6\x18\x8c\xbb\xac\xe3\x4c\x93\x1c\xf7\xef\x0f\xf7\x8f\x1f\x77\x73\xeb\x3f\xb7\x6c\xdb\xff\x6f\x2d\x97\x66\x80\xdf\x00\x00\x00\xff\xff\x5f\x81\x36\x20\x22\x01\x00\x00"

func chi_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mirc_routes_site_v2Tmpl,
		"chi_mirc_routes_site_v2.tmpl",
	)
}

func chi_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := chi_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_mirc_routes_site_v2.tmpl", size: 290, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x3b, 0xfc, 0xfa, 0x6b, 0x77, 0x8b, 0xef, 0x6f, 0x3c, 0xac, 0xb1, 0xdc, 0x2d, 0xe8, 0xda, 0xd9, 0x6, 0xc6, 0x7c, 0xcc, 0x4b, 0x15, 0xbf, 0xca, 0x17, 0xda, 0xcd, 0x64, 0x14, 0xa2, 0xf0}}
	return a, nil
}

var _echo_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x31\x0e\xc2\x30\x0c\x05\xd0\xdd\xa7\xf8\x23\x2c\x36\xae\xca\x35\x10\x57\x48\x83\x95\x46\x8d\x15\x11\x9a\x48\xa8\xea\xdd\xd9\xd9\x9f\xd7\x57\x2f\x86\xe3\x00\x3f\xb7\xf4\x08\x6e\x38\x4f\xa2\x54\xa1\xac\x13\x51\xb3\x77\xcf\xcd\x70\x21\x00\x48\x79\x5f\xfb\xc2\xb1\xba\x84\x92\xfd\x2b\x9e\x9b\x8c\x09\x63\x62\xe5\xdb\x3f\x29\x61\xf9\xec\x21\x6e\x62\x71\xad\x32\x66\x8c\x99\x95\xf5\x4e\x57\xfa\x05\x00\x00\xff\xff\xd7\xa8\x8b\xf1\x77\x00\x00\x00"

func echo_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_go_modTmpl,
		"echo_go_mod.tmpl",
	)
}

func echo_go_modTmpl() (*asset, error) {
	bytes, err := echo_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_go_mod.tmpl", size: 119, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x47, 0x5d, 0xcf, 0xe7, 0x7a, 0xf9, 0x8d, 0xac, 0xe0, 0xb8, 0x81, 0xcd, 0x94, 0x8e, 0x72, 0xd5, 0x8d, 0xb9, 0xd, 0xdf, 0x32, 0x4f, 0x54, 0x59, 0x40, 0x8d, 0x22, 0x4c, 0x1e, 0xae, 0x1c, 0x8e}}
	return a, nil
}

var _echo_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xb1\x6e\xc3\x30\x0c\x44\x77\x7e\x05\xeb\x49\xee\x60\x79\xc8\xe4\x22\x5b\xdb\xb1\x19\xd2\x1f\x50\x04\x46\x16\x22\x5b\x01\x45\xa7\x43\xe1\x7f\x2f\x4c\xdb\xc8\x50\x2d\x12\x74\x77\xe4\xbd\xbb\xf3\x37\x17\x08\x07\x17\x47\x80\x38\xdc\x33\x0b\x1a\x40\x44\xac\x52\x0e\x15\xac\xcf\x10\xa5\x9f\x2e\x8d\xcf\x83\x4d\xee\x52\xc4\xf9\x9b\x25\xdf\x67\xfb\x38\x54\x50\x03\x5c\xa7\xd1\xeb\x0c\x53\xe3\xaf\x46\x08\xbb\x23\x2e\x96\xe6\x8b\x7e\x4c\xbd\xce\xb1\x16\x99\x42\x2c\x42\x8c\x85\xf8\xe1\x46\x29\x28\x59\x7d\x6a\xd8\xd5\xf3\x26\x1a\x7a\x26\x8b\x38\x96\x3d\xa6\x77\xf4\xa4\x62\xbc\x22\x31\xeb\xc2\xe6\xbc\xb8\x4c\xd5\x1d\xda\xb6\xad\xea\x37\x15\x5e\x8e\x38\xc6\xb4\x15\x5b\x4e\xca\xa1\xf9\x74\xe2\x92\x21\xe6\x5a\xbf\x67\x98\x37\x8c\xff\x1d\xf0\x55\x41\x3e\x7c\x9f\x77\x3c\x6b\xf1\xfb\xf4\x7e\xea\x9e\x3c\x9c\x27\xa1\x95\x06\x66\xf8\x0b\x00\x00\xff\xff\xde\xad\x0e\xa4\x58\x01\x00\x00"

func echo_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mainTmpl,
		"echo_main.tmpl",
	)
}

func echo_mainTmpl() (*asset, error) {
	bytes, err := echo_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_main.tmpl", size: 344, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0xb1, 0xa2, 0xfb, 0x2b, 0x87, 0x65, 0xbe, 0x59, 0x5b, 0x8e, 0xf5, 0x8a, 0x27, 0xd5, 0x7, 0x4e, 0x9c, 0x67, 0x25, 0x91, 0x78, 0xd5, 0x7a, 0x17, 0x6a, 0xc0, 0x17, 0xc, 0xf6, 0x31, 0xe3}}
	return a, nil
}

var _echo_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x8b\xdb\x30\x10\x85\xef\xfa\x15\x53\x1d\x8a\x0d\xc1\x22\x39\xba\xec\x71\x5b\x7a\x68\x13\x9a\x63\xe9\x41\xf5\x4e\x94\x21\xf6\xc8\x8c\xc7\x29\x25\xf8\xbf\x2f\x96\xbc\x49\x16\x96\xf8\x60\x34\x7a\x9f\xdf\x68\x9e\xdc\xfb\xe6\xe4\x03\x42\xe7\x89\x8d\xa1\xae\x8f\xa2\x50\x18\x00\x00\xdb\xc6\x60\x4d\x5e\x06\xd2\xe3\xf8\xb7\x6a\x62\xe7\x7c\x4b\xdd\x7f\xd7\x91\xb8\xf3\xc6\x35\x51\xd0\x3e\x46\x90\x03\x31\x2e\x46\x12\x47\xc5\x01\xec\xe5\x02\xd5\xee\x14\x7e\xfa\x0e\x61\x9a\x66\xb4\x71\x59\xcb\x6e\xe7\xf5\x23\xc6\x9d\xd7\x0b\xb6\x79\x8c\x6d\xac\x29\x8d\x71\x2e\xc4\x3a\x20\xa3\x78\x45\x08\x11\x64\xe4\x34\x70\x15\xa2\x39\x8c\xdc\xa4\xa2\x28\xe1\x92\x4c\xdb\x18\xaa\x9d\x10\x6b\xcb\x85\xbd\x7e\xd6\xc4\x17\x84\x41\xbd\xa8\x2d\x13\x86\xac\x42\x38\x40\xfd\x04\x1d\xc9\x73\xae\x8a\xac\xc5\x5e\x93\xf0\x79\xce\xa7\xda\xf6\x4a\x91\x87\xec\x3e\x3f\xbf\x46\xfe\x11\x5f\xb0\x5e\xca\x04\x7d\xe7\x3d\x0a\xf9\x76\x16\x56\x57\xf2\x5b\x6e\x1f\x65\x1e\xaf\xce\xe4\x75\xef\xb9\x39\xc6\x0f\xd0\x6d\xaf\x43\xfd\x66\x4a\x3a\x97\xb7\xd6\xd7\x7e\xdb\x5e\xf7\xc4\xa7\x9d\xd7\x63\x0d\xb6\x72\x01\xd9\xde\xcc\xa6\xbc\x9c\xd2\x9b\x0e\x80\x22\xf3\x3c\xf9\x2e\xdf\x4e\x80\xc5\x92\xc1\x2a\x0d\x5c\x7e\x49\xd8\xa7\x27\x60\x6a\xe1\xd6\x72\xce\xf3\xab\x57\xdf\x16\x28\x52\xde\xf9\x3e\x08\xfa\x40\x4c\xc3\xd1\x96\x66\x32\xcb\x0d\xdd\x45\x0c\xbf\xff\x10\x2b\xca\xc1\x37\x78\x99\x96\x4e\x82\x3a\x0a\xbf\x97\x6e\x67\x60\xfc\x57\xe4\x9f\xa2\xda\x93\x62\xb9\x7a\xa7\x9c\xd7\x1f\xee\x6e\xee\x77\x27\x33\x99\xd7\x00\x00\x00\xff\xff\x36\xba\x8f\x3c\x2d\x03\x00\x00"

func echo_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mirc_mainTmpl,
		"echo_mirc_main.tmpl",
	)
}

func echo_mirc_mainTmpl() (*asset, error) {
	bytes, err := echo_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_mirc_main.tmpl", size: 813, mode: os.FileMode(0644), modTime: time.Unix(1584606341, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0x89, 0x29, 0xc4, 0x57, 0xa5, 0xe9, 0xc8, 0x2e, 0x38, 0xf6, 0xb, 0x52, 0x7, 0x96, 0x53, 0xa8, 0xd6, 0x44, 0x4a, 0x14, 0xc2, 0x6f, 0x7c, 0x44, 0x52, 0x44, 0xd4, 0xfb, 0x15, 0xf4, 0xa5}}
	return a, nil
}

var _echo_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xb1\x8e\xc2\x30\x0c\x06\xe0\xdd\x4f\x61\x65\xba\x1b\xae\x96\x6e\xec\x86\x18\x10\x33\x2f\xd0\x10\xdc\xd6\xa2\x69\x2a\xd7\x45\x54\x88\x77\x47\x29\x61\x62\xb1\x6c\xfd\x9f\xff\xc9\x87\xab\xef\x18\x35\x2d\xc6\x33\x80\xc4\x29\xa9\xe1\x0f\x20\x22\x46\x51\x74\x9d\x58\xbf\x9c\xab\x90\x22\xf9\x41\xe2\x4a\x51\x94\x6e\xff\x0e\x7e\x01\x88\xf0\x24\xc6\x38\xe7\x21\xa3\xb1\xb6\x3e\xe4\xad\x4d\x60\xeb\xc4\x25\x35\x5d\x82\xe1\x63\xeb\xdc\xf7\x5e\xc6\x52\x5e\xbd\x8f\x26\x8a\xd6\xee\xcf\x35\x1b\x38\x8e\x17\xbe\x7f\xc0\x81\x0d\xb1\x00\x92\x9c\x50\x61\x3b\x35\x09\x03\xcf\xdf\xcc\x97\x84\xea\xe0\x8d\xbb\xa4\x6b\xfe\x79\xc2\x2b\x00\x00\xff\xff\x6f\x8d\xbd\xe2\xeb\x00\x00\x00"

func echo_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mirc_routes_siteTmpl,
		"echo_mirc_routes_site.tmpl",
	)
}

func echo_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := echo_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_mirc_routes_site.tmpl", size: 235, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x4f, 0xfa, 0x94, 0xfc, 0xde, 0xbd, 0xc4, 0x73, 0x1c, 0x5c, 0x1, 0x6, 0xc0, 0xb1, 0x3, 0xe9, 0x45, 0x4a, 0x88, 0x1b, 0x3e, 0x78, 0x93, 0xcc, 0x91, 0x13, 0xe6, 0x80, 0x49, 0x99, 0x88}}
	return a, nil
}

var _echo_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xbd\x4e\xc5\x30\x0c\x05\xe0\xdd\x4f\x61\x65\x82\x81\x6b\x95\xf1\x6e\x88\x01\x31\xf3\x02\x0d\xc1\x6d\x2d\x9a\x1f\xb9\x6e\x44\x85\x78\x77\xd4\x36\xb0\xdc\xc5\xd2\xd1\xf9\x7c\x8a\x0f\x9f\x7e\x64\xac\x1d\x80\xc4\x92\xd5\xf0\x0e\x10\x11\xa3\x28\xba\x51\x6c\x5a\xdf\x2f\x21\x47\xf2\xb3\xc4\x8d\xa2\x28\xd5\x47\x07\xf7\x00\x44\xf8\x26\xc6\xb8\xec\xa7\x76\x28\xc9\x58\x07\x1f\x18\x25\x0d\x19\x6c\x2b\xdc\x80\xe9\x1a\x0c\xbf\x8f\xd9\xe7\xc9\x4b\x6a\xfb\x97\x33\xf4\x51\xf4\xea\x1e\x5c\x7f\x80\x17\xcd\x6b\xf9\x03\x67\x38\x41\xed\x9a\x78\x4d\x1f\xfc\xf5\x2f\xd8\x10\x9b\x20\xd9\x1b\x6a\xec\x49\x4d\xc2\xcc\xcb\x2d\xf3\xad\xa1\x6b\xf0\xc6\x63\xd6\x6d\xff\xf9\x81\xdf\x00\x00\x00\xff\xff\x6b\x52\x31\x87\x0c\x01\x00\x00"

func echo_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mirc_routes_site_v1Tmpl,
		"echo_mirc_routes_site_v1.tmpl",
	)
}

func echo_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := echo_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_mirc_routes_site_v1.tmpl", size: 268, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2, 0x2c, 0x70, 0x3a, 0xa, 0x23, 0xcb, 0x84, 0xc8, 0xda, 0x13, 0x6b, 0x56, 0xd5, 0xda, 0x60, 0xbe, 0xca, 0x57, 0xf3, 0xe2, 0xec, 0x45, 0x4f, 0x3b, 0x6e, 0xa1, 0x20, 0x63, 0x32, 0x38, 0x74}}
	return a, nil
}

var _echo_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xc1\x4a\xc7\x30\x0c\x06\xf0\x7b\x9e\x22\xf4\xa4\x97\x05\x7a\xdc\x4d\x3c\x88\x67\x5f\x60\xb5\x66\x33\xb8\xae\x25\xcb\x8a\x43\x7c\x77\xd9\xac\xf2\x87\x5d\x02\xe1\xfb\x7d\x5f\x09\xf1\x23\x4c\x8c\xd5\x03\x48\x2a\x59\x0d\xef\x00\x11\x31\x89\xa2\x9b\xc4\xde\xb7\xd7\x2e\xe6\x44\x61\x96\xb4\x53\x12\xa5\xea\x1d\xdc\x03\x10\xe1\x8b\x18\xe3\x7a\x9c\xea\x51\x16\x63\x1d\x43\x64\x94\x65\xcc\x60\x7b\xe1\x06\x4c\xb7\x68\xf8\x75\xce\x3e\x69\xde\x4a\xdb\xef\x7e\x9f\x21\x89\xf6\xae\x7a\x37\x9c\xe2\x79\x79\xe3\xcf\x7f\xc1\x86\xd8\x04\xc9\x91\x50\x63\x0f\x6a\x12\x67\x5e\xaf\x2c\xb4\x84\xfa\x18\x8c\xa7\xac\xfb\x5f\xe7\xb1\xfd\xd7\xce\xad\xfc\x06\xf8\x09\x00\x00\xff\xff\x5b\x10\x23\x12\x16\x01\x00\x00"

func echo_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mirc_routes_site_v2Tmpl,
		"echo_mirc_routes_site_v2.tmpl",
	)
}

func echo_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := echo_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_mirc_routes_site_v2.tmpl", size: 278, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0xda, 0xf5, 0x1, 0xac, 0xa9, 0x50, 0x7c, 0x7e, 0x5f, 0xfa, 0x68, 0x71, 0x2, 0x7b, 0x32, 0x2a, 0x8c, 0xf4, 0x6e, 0x60, 0xab, 0x47, 0x25, 0x99, 0xce, 0xf4, 0x8d, 0x70, 0x57, 0xfd, 0x28}}
	return a, nil
}

var _gin_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x31\x0e\xc2\x30\x0c\x05\xd0\xdd\xa7\xf8\x23\x0c\x38\x4d\xc4\x39\x10\x57\x28\xc5\x32\x16\x75\x2d\x22\x12\x09\x55\xb9\x3b\x62\x65\x7b\xc3\xf3\xb8\xb7\x55\xb0\xef\xe0\xeb\x53\x2f\xb3\x0b\xc6\x20\xd2\x40\xe6\x5c\x88\xaa\xbc\x9a\x55\xc1\x81\x00\x40\xed\xfd\x68\x37\x5e\xc2\xd3\xbc\x9a\x7f\x92\x5b\x4d\xbd\xa0\x17\xce\x3c\xfd\x17\xb5\xed\xa4\xb1\xd9\xf2\x13\x7a\xe6\x33\x4f\x74\xa4\x6f\x00\x00\x00\xff\xff\xc9\x65\x25\xf2\x73\x00\x00\x00"

func gin_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_go_modTmpl,
		"gin_go_mod.tmpl",
	)
}

func gin_go_modTmpl() (*asset, error) {
	bytes, err := gin_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_go_mod.tmpl", size: 115, mode: os.FileMode(0644), modTime: time.Unix(1584548470, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0x56, 0x3c, 0x9b, 0x8f, 0x40, 0xd5, 0x10, 0x71, 0xe, 0xb6, 0x71, 0x42, 0x30, 0xba, 0xbf, 0xbe, 0x56, 0x71, 0x36, 0x58, 0xd1, 0x51, 0x5, 0xd6, 0x97, 0xdb, 0xac, 0xaf, 0x51, 0x70, 0xed}}
	return a, nil
}

var _gin_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xb1\x4e\xc4\x30\x0c\x86\x77\x3f\x85\xe9\x94\x20\xd1\xec\x87\x6e\x03\x46\x4e\x02\x5e\x20\x44\xbe\x60\xd1\x3a\x27\xd7\x85\x01\xf5\xdd\x51\x72\xad\x3a\x5c\x96\x38\xf9\x6c\xff\xff\x7f\x89\xe9\x3b\x66\xc2\x31\xb2\x00\xf0\x78\x29\x6a\xe8\x00\x11\xb1\x1b\x4a\xee\xe0\x5a\x66\xb6\xaf\xf9\xb3\x4f\x65\x0c\x99\xe5\x21\x17\xe1\x54\xab\x0e\x3c\xc0\x79\x96\xd4\x16\x38\x8f\x7f\xad\x9f\xf0\x70\xc4\xcc\xd2\xbf\xd2\xaf\xf3\xd7\x1d\x21\xa0\x52\xe6\xc9\x48\x71\x22\xfd\x89\x62\x13\x5a\xa9\x6d\x8d\x6f\xf0\x7d\x65\x8e\xf6\xc1\xc9\xa2\xda\x36\xd5\x6e\x4e\xd4\x20\x9f\x91\x54\xab\x1c\xf5\x6f\xb3\x38\xff\xd8\xde\x77\x47\x14\x1e\x56\x37\xf5\x0c\x25\xf7\x2f\xd1\xe2\xe0\x48\xd5\xb7\xef\x05\x96\xd5\xfb\xad\x34\xde\x57\xf7\xcf\x92\x59\x68\x0b\x15\x02\x7e\x9c\x9e\x4e\x87\x3d\x86\x96\xd9\xa8\x85\x20\x58\xe0\x3f\x00\x00\xff\xff\x37\xc4\xde\xa0\x4b\x01\x00\x00"

func gin_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mainTmpl,
		"gin_main.tmpl",
	)
}

func gin_mainTmpl() (*asset, error) {
	bytes, err := gin_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_main.tmpl", size: 331, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x9e, 0x47, 0x80, 0x70, 0x82, 0x34, 0x72, 0x40, 0x7b, 0xac, 0xab, 0xd5, 0xc3, 0xef, 0xab, 0x4d, 0xd2, 0xf8, 0xe5, 0x45, 0x88, 0x8a, 0x9c, 0x47, 0x4f, 0xcc, 0x47, 0x8c, 0xa1, 0x6, 0x1e}}
	return a, nil
}

var _gin_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x8b\xdb\x30\x10\x85\xef\xfa\x15\x53\x1d\x8a\x0d\xc1\x22\x39\xba\xec\xb1\x5d\x7a\x68\x13\x9a\x63\xe9\x41\xf5\x4e\x94\x21\xf6\xc8\x8c\xc7\x29\x25\xf8\xbf\x2f\x96\xbc\x49\x16\x96\xf8\x60\x34\x7a\x9f\xdf\x68\x9e\xdc\xfb\xe6\xe4\x03\x42\xe7\x89\x8d\xa1\xae\x8f\xa2\x50\x18\x00\x00\xdb\xc6\x60\x4d\x5e\x06\xd2\xe3\xf8\xb7\x6a\x62\xe7\x7c\x4b\xdd\x7f\xd7\x91\xb8\xf3\xc6\x35\x51\xd0\x3e\x46\x90\x03\x31\x2e\x46\x12\x47\xc5\x01\xec\xe5\x02\xd5\xee\x14\x7e\xfa\x0e\x61\x9a\x66\xb4\x71\x59\xcb\x6e\xe7\xf5\x23\xc6\x9d\xd7\x0b\xb6\x79\x8c\x6d\xac\x29\x8d\x71\x2e\xc4\x3a\x20\xa3\x78\x45\x08\x11\x64\xe4\x34\x70\x15\xa2\x39\x8c\xdc\xa4\xa2\x28\xe1\x92\x4c\xdb\x18\xaa\x9d\x10\x6b\xcb\x85\xbd\x7e\xd6\xc4\x17\x84\x41\xbd\xa8\x2d\x13\x86\xac\x42\x38\x40\xfd\x04\x1d\xc9\xd7\x5c\x15\x59\x8b\xbd\x26\xe1\xf3\x9c\x4f\xb5\xed\x95\x22\x0f\xd9\x7d\x7e\x7e\x8d\xfc\x23\xbe\x60\xbd\x94\x09\xfa\xce\x7b\x14\xf2\xed\x2c\xac\xae\xe4\x73\x6e\x1f\x65\x1e\xaf\xce\xe4\x75\xef\x99\xf8\x03\x72\xdb\xeb\x50\xbf\x79\x92\xce\xe5\xad\xf3\xb5\xdd\xb6\xd7\x3d\xf1\x69\xe7\xf5\x58\x83\xad\x5c\x40\xb6\x37\xb3\x29\x2f\xa7\xf4\xa6\x03\xa0\xc8\x3c\x4e\xbe\xca\xb7\x03\x60\xb1\x44\xb0\x4a\xf3\x96\x5f\x12\xf6\xe9\x09\x98\x5a\xb8\xb5\x9c\xe3\xfc\xe6\xd5\xb7\x05\x8a\x94\x77\xbe\x0f\x72\x3e\x10\xd3\x70\xb4\xa5\x99\xcc\x72\x41\x77\x09\xc3\xef\x3f\xc4\x8a\x72\xf0\x0d\x5e\xa6\xa5\x93\xa0\x8e\xc2\xef\xa5\xdb\x19\x18\xff\x15\xf9\x9f\xa8\xf6\xa4\x58\xae\xde\x29\xe7\xf5\x87\xbb\x9b\xfb\xdd\xc9\x4c\xe6\x35\x00\x00\xff\xff\x03\x3a\xe9\x70\x2c\x03\x00\x00"

func gin_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_mainTmpl,
		"gin_mirc_main.tmpl",
	)
}

func gin_mirc_mainTmpl() (*asset, error) {
	bytes, err := gin_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_main.tmpl", size: 812, mode: os.FileMode(0644), modTime: time.Unix(1584606341, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0xb3, 0x1d, 0x61, 0xa6, 0xa2, 0x89, 0xb4, 0x69, 0xa, 0xb2, 0x6f, 0x99, 0xa2, 0x5c, 0x31, 0x1f, 0x3c, 0x5c, 0x4b, 0x4a, 0x7c, 0xa8, 0x6a, 0x3d, 0xb2, 0xb, 0x27, 0xf, 0x1b, 0x36, 0x20}}
	return a, nil
}

var _gin_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xb1\x8e\xc2\x30\x0c\x06\xe0\xdd\x4f\x61\x65\xba\x1b\xae\x96\x6e\xec\x86\x18\x10\x33\x2f\xd0\x10\xdc\xd6\xa2\x69\x2a\xd7\x45\x54\x88\x77\x47\x29\x61\x62\xb1\x6c\xfd\x9f\xff\xc9\x87\xab\xef\x18\x35\x2d\xc6\x33\x80\xc4\x29\xa9\xe1\x0f\x20\x22\x46\x51\x74\x9d\x58\xbf\x9c\xab\x90\x22\xf9\x41\xe2\x4a\x51\x94\x6e\xff\x0e\x7e\x01\x88\xf0\x24\xc6\x38\xe7\x21\xa3\xb1\xb6\x3e\xe4\xad\x4d\x60\xeb\xc4\x25\x35\x5d\x82\xe1\x63\xeb\xdc\xf7\x5e\xc6\x52\x5e\xbd\x8f\x26\x8a\xd6\xee\xcf\x35\x1b\x38\x8e\x17\xbe\x7f\xc0\x81\x0d\xb1\x00\x92\x9c\x50\x61\x3b\x35\x09\x03\xcf\xdf\xcc\x97\x84\xea\xe0\x8d\xbb\xa4\x6b\xfe\x79\xc2\x2b\x00\x00\xff\xff\x6f\x8d\xbd\xe2\xeb\x00\x00\x00"

func gin_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_siteTmpl,
		"gin_mirc_routes_site.tmpl",
	)
}

func gin_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site.tmpl", size: 235, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x4f, 0xfa, 0x94, 0xfc, 0xde, 0xbd, 0xc4, 0x73, 0x1c, 0x5c, 0x1, 0x6, 0xc0, 0xb1, 0x3, 0xe9, 0x45, 0x4a, 0x88, 0x1b, 0x3e, 0x78, 0x93, 0xcc, 0x91, 0x13, 0xe6, 0x80, 0x49, 0x99, 0x88}}
	return a, nil
}

var _gin_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xbd\x4e\xc5\x30\x0c\x05\xe0\xdd\x4f\x61\x65\x82\x81\x6b\x95\xf1\x6e\x88\x01\x31\xf3\x02\x0d\xc1\x6d\x2d\x9a\x1f\xb9\x6e\x44\x85\x78\x77\xd4\x36\xb0\xdc\xc5\xd2\xd1\xf9\x7c\x8a\x0f\x9f\x7e\x64\xac\x1d\x80\xc4\x92\xd5\xf0\x0e\x10\x11\xa3\x28\xba\x51\x6c\x5a\xdf\x2f\x21\x47\xf2\xb3\xc4\x8d\xa2\x28\xd5\x47\x07\xf7\x00\x44\xf8\x26\xc6\xb8\xec\xa7\x76\x28\xc9\x58\x07\x1f\x18\x25\x0d\x19\x6c\x2b\xdc\x80\xe9\x1a\x0c\xbf\x8f\xd9\xe7\xc9\x4b\x6a\xfb\x97\x33\xf4\x51\xf4\xea\x1e\x5c\x7f\x80\x17\xcd\x6b\xf9\x03\x67\x38\x41\xed\x9a\x78\x4d\x1f\xfc\xf5\x2f\xd8\x10\x9b\x20\xd9\x1b\x6a\xec\x49\x4d\xc2\xcc\xcb\x2d\xf3\xad\xa1\x6b\xf0\xc6\x63\xd6\x6d\xff\xf9\x81\xdf\x00\x00\x00\xff\xff\x6b\x52\x31\x87\x0c\x01\x00\x00"

func gin_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_site_v1Tmpl,
		"gin_mirc_routes_site_v1.tmpl",
	)
}

func gin_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site_v1.tmpl", size: 268, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2, 0x2c, 0x70, 0x3a, 0xa, 0x23, 0xcb, 0x84, 0xc8, 0xda, 0x13, 0x6b, 0x56, 0xd5, 0xda, 0x60, 0xbe, 0xca, 0x57, 0xf3, 0xe2, 0xec, 0x45, 0x4f, 0x3b, 0x6e, 0xa1, 0x20, 0x63, 0x32, 0x38, 0x74}}
	return a, nil
}

var _gin_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xc1\x4a\xc7\x30\x0c\x06\xf0\x7b\x9e\x22\xf4\xa4\x97\x05\x7a\xdc\x4d\x3c\x88\x67\x5f\x60\xb5\x66\x33\xb8\xae\x25\xcb\x8a\x43\x7c\x77\xd9\xac\xf2\x87\x5d\x02\xe1\xfb\x7d\x5f\x09\xf1\x23\x4c\x8c\xd5\x03\x48\x2a\x59\x0d\xef\x00\x11\x31\x89\xa2\x9b\xc4\xde\xb7\xd7\x2e\xe6\x44\x61\x96\xb4\x53\x12\xa5\xea\x1d\xdc\x03\x10\xe1\x8b\x18\xe3\x7a\x9c\xea\x51\x16\x63\x1d\x43\x64\x94\x65\xcc\x60\x7b\xe1\x06\x4c\xb7\x68\xf8\x75\xce\x3e\x69\xde\x4a\xdb\xef\x7e\x9f\x21\x89\xf6\xae\x7a\x37\x9c\xe2\x79\x79\xe3\xcf\x7f\xc1\x86\xd8\x04\xc9\x91\x50\x63\x0f\x6a\x12\x67\x5e\xaf\x2c\xb4\x84\xfa\x18\x8c\xa7\xac\xfb\x5f\xe7\xb1\xfd\xd7\xce\xad\xfc\x06\xf8\x09\x00\x00\xff\xff\x5b\x10\x23\x12\x16\x01\x00\x00"

func gin_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_site_v2Tmpl,
		"gin_mirc_routes_site_v2.tmpl",
	)
}

func gin_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site_v2.tmpl", size: 278, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0xda, 0xf5, 0x1, 0xac, 0xa9, 0x50, 0x7c, 0x7e, 0x5f, 0xfa, 0x68, 0x71, 0x2, 0x7b, 0x32, 0x2a, 0x8c, 0xf4, 0x6e, 0x60, 0xab, 0x47, 0x25, 0x99, 0xce, 0xf4, 0x8d, 0x70, 0x57, 0xfd, 0x28}}
	return a, nil
}

var _httprouter_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x41\x0e\xc2\x20\x10\x05\xd0\xfd\x9c\xe2\x2f\x75\x33\x14\xbc\x87\xf1\x0a\xb5\x9d\xc0\x28\x23\x8a\x40\x62\x9a\xde\xdd\x7d\xf7\xcf\xca\xda\xb3\x60\xdb\xc0\xb7\x67\xbc\xce\x26\xd8\x77\xa2\x58\xe0\xd9\x07\xa2\x2a\x9f\xae\x55\x70\x22\x00\x88\xda\x52\xbf\xf3\x52\xcc\xcd\x59\xed\xe7\x4c\xab\x1b\x01\x23\xb0\xe7\xe9\x48\x1e\x3d\xab\xbc\xbe\x4b\x32\x5d\x9b\x4b\xad\xbd\x6b\xe9\x4d\x2a\x86\xe7\x0b\x4f\x74\xa6\x7f\x00\x00\x00\xff\xff\x91\x92\xb0\xec\x7e\x00\x00\x00"

func httprouter_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_go_modTmpl,
		"httprouter_go_mod.tmpl",
	)
}

func httprouter_go_modTmpl() (*asset, error) {
	bytes, err := httprouter_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_go_mod.tmpl", size: 126, mode: os.FileMode(0644), modTime: time.Unix(1584548470, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0xea, 0xd4, 0x91, 0x4b, 0x9b, 0xd, 0xb4, 0x24, 0xa4, 0x6f, 0xbd, 0x24, 0x6e, 0x42, 0x5, 0xa1, 0xf, 0x41, 0x1, 0xf6, 0x2b, 0x34, 0xf0, 0x9c, 0x6, 0x90, 0xf9, 0x63, 0x71, 0xf2, 0x8}}
	return a, nil
}

var _httprouter_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcd\x4e\xeb\x30\x10\x85\xf7\xf3\x14\x73\xbd\x72\xae\x50\xdc\x65\x15\xd4\x05\x12\x62\x85\xa8\x04\xbc\x80\x49\xa7\x89\xc1\xb1\xa3\xf1\x04\x16\x28\xef\x8e\x62\xa7\xa4\x12\xde\x8c\x7f\xbe\x73\x3c\x67\x46\xdb\x7e\xd8\x8e\x70\xb0\x2e\x00\xb8\x61\x8c\x2c\xa8\x01\x11\x51\xf9\xd8\xa9\xb2\x0b\x24\xa6\x17\x19\x15\x94\x73\xe7\xa4\x9f\xde\xea\x36\x0e\xe6\x7d\xf2\x8e\x42\x6a\xfb\xc1\x9d\x0a\xc4\x71\x12\x62\x05\x15\xc0\x79\x0a\x6d\xb6\xd6\x15\x7e\x67\x29\x63\x73\xc0\x8d\xaa\x9f\xe8\x4b\x57\xc5\xd5\x18\x64\xea\x5c\x12\x62\x4c\xc4\x9f\x36\x48\x42\x89\x57\x74\x71\x58\x99\x97\x15\xd1\xbc\xe9\x93\x58\x96\x8b\x38\x57\xd7\x52\x7e\x74\x67\x24\xfe\xfd\xbc\x7e\x5c\x2c\xc2\x5d\x38\x2d\x2e\xa4\x55\xb3\xdf\xed\x77\xea\x06\xb9\xba\xcd\xdc\xbf\x03\x06\xe7\xd7\x9e\x97\xe5\x63\x57\x3f\x58\xb1\x5e\x13\x73\x95\xaf\x67\x98\xd7\x84\x7f\x5b\xc2\xff\x57\x19\x9f\x73\xb9\x4c\xc0\x18\x7c\x3d\xde\x1f\x9b\x2d\x6c\xc6\x72\x54\x86\x19\x7e\x02\x00\x00\xff\xff\x26\x3a\xe1\x3f\x92\x01\x00\x00"

func httprouter_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mainTmpl,
		"httprouter_main.tmpl",
	)
}

func httprouter_mainTmpl() (*asset, error) {
	bytes, err := httprouter_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_main.tmpl", size: 402, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x80, 0x74, 0x9e, 0x62, 0xae, 0xa4, 0xe4, 0xb, 0x71, 0x1b, 0x20, 0x53, 0x3f, 0xd1, 0x88, 0xf6, 0xf9, 0xd4, 0xc3, 0x36, 0x4c, 0xdc, 0x9c, 0x5, 0x28, 0x41, 0xfc, 0xcb, 0xfd, 0xe0, 0x15}}
	return a, nil
}

var _httprouter_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4d\x8b\xdb\x30\x10\x86\xef\xfa\x15\x53\x1d\x8a\x0d\xc1\x26\x39\xba\xec\xb1\x5f\x87\x36\x61\x73\x2c\x3d\xa8\xde\x89\x32\xc4\x1e\x99\xf1\x38\xa5\x04\xff\xf7\x22\xc9\x9b\x64\x61\x49\x0e\x41\x33\xef\xa3\x77\x3e\xe4\xc1\xb5\x27\xe7\x11\x7a\x47\x6c\x0c\xf5\x43\x10\x85\xc2\x00\x00\xd8\x2e\x78\x6b\xf2\xd1\x93\x1e\xa7\x3f\x55\x1b\xfa\xda\x75\xd4\xff\xab\x7b\x92\xfa\xbc\xa9\xdb\x20\x68\x1f\x23\xc8\x9e\x18\x17\x23\x09\x93\xe2\x08\xf6\x72\x81\x6a\x77\xf2\x3f\x5d\x8f\x30\xcf\x11\x6d\xeb\xac\x65\xb7\xf3\xfa\x11\x53\x9f\xd7\x0b\xb6\x79\x8c\x6d\xac\x29\x8d\xa9\x6b\x1f\x1a\x8f\x8c\xe2\x14\xc1\x07\x90\x89\xd3\xc0\x95\x0f\xe6\x30\x71\x9b\x82\xa2\x84\x4b\x32\xed\x82\xaf\x76\x42\xac\x1d\x17\xf6\x7a\xad\x0d\x2f\x08\xa3\x3a\x51\x5b\x26\x0c\x59\x85\x70\x84\xe6\x09\x7a\x92\xcf\x39\x2a\xb2\x16\x06\x4d\xc2\xc7\xb8\x9f\x6a\x3b\x28\x05\x1e\xb3\x7b\xfc\x3d\x4f\xfc\x23\xbc\x60\xb3\x84\x09\xfa\xce\x7b\x14\x72\x5d\x14\x56\x57\xf2\x6b\x2e\x1f\x24\x8e\xd7\x64\xf2\x9a\xfb\xa6\x3a\x3c\xc7\x49\xe5\x9d\x0b\xdb\x41\xc7\xe6\xd5\x9a\x34\x86\xb7\x06\xae\x55\xb7\x83\xee\x89\x4f\x3b\xa7\xc7\x06\x6c\x55\x7b\x64\x7b\x33\x9b\xf3\x71\x4e\xff\x74\x00\x14\x89\x53\xe5\x17\x7d\xed\x03\x8b\x65\x13\xab\x34\x76\xf9\x29\x61\x1f\x9e\x80\xa9\x83\x5b\xc9\xb8\xd5\x2f\x4e\x5d\x57\xa0\x48\x79\xe7\xfb\x60\xdd\x07\x62\x1a\x8f\xb6\x34\xb3\x59\xde\xe9\x6e\xd1\xf0\xeb\x37\xb1\xa2\x1c\x5c\x8b\x97\x79\xa9\x24\xa8\x93\xf0\x5b\xe9\xd6\x03\xe3\xdf\x22\x7f\x1a\xd5\x9e\x14\xcb\xd5\x1b\xe5\xbc\x7e\x37\xbb\xb9\xcf\xce\x66\x36\xff\x03\x00\x00\xff\xff\xc7\x80\x8b\x7e\x33\x03\x00\x00"

func httprouter_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mirc_mainTmpl,
		"httprouter_mirc_main.tmpl",
	)
}

func httprouter_mirc_mainTmpl() (*asset, error) {
	bytes, err := httprouter_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_mirc_main.tmpl", size: 819, mode: os.FileMode(0644), modTime: time.Unix(1584606341, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaf, 0xbb, 0xc4, 0x7e, 0xcb, 0xdf, 0x3c, 0x3c, 0x56, 0xc4, 0xa0, 0xba, 0x64, 0xb4, 0x5e, 0x9f, 0xb0, 0x49, 0xc4, 0x22, 0x3, 0xc3, 0x7a, 0x87, 0x38, 0xa9, 0xae, 0x93, 0x58, 0xa6, 0xd3, 0xdb}}
	return a, nil
}

var _httprouter_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xb1\x8e\xc2\x30\x0c\x06\xe0\xdd\x4f\x61\x65\xba\x1b\xae\x96\x6e\xec\x86\x18\x10\x33\x2f\xd0\x10\xdc\xd6\xa2\x69\x2a\xd7\x45\x54\x88\x77\x47\x29\x61\x62\xb1\x6c\xfd\x9f\xff\xc9\x87\xab\xef\x18\x35\x2d\xc6\x33\x80\xc4\x29\xa9\xe1\x0f\x20\x22\x46\x51\x74\x9d\x58\xbf\x9c\xab\x90\x22\xf9\x41\xe2\x4a\x51\x94\x6e\xff\x0e\x7e\x01\x88\xf0\x24\xc6\x38\xe7\x21\xa3\xb1\xb6\x3e\xe4\xad\x4d\x60\xeb\xc4\x25\x35\x5d\x82\xe1\x63\xeb\xdc\xf7\x5e\xc6\x52\x5e\xbd\x8f\x26\x8a\xd6\xee\xcf\x35\x1b\x38\x8e\x17\xbe\x7f\xc0\x81\x0d\xb1\x00\x92\x9c\x50\x61\x3b\x35\x09\x03\xcf\xdf\xcc\x97\x84\xea\xe0\x8d\xbb\xa4\x6b\xfe\x79\xc2\x2b\x00\x00\xff\xff\x6f\x8d\xbd\xe2\xeb\x00\x00\x00"

func httprouter_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mirc_routes_siteTmpl,
		"httprouter_mirc_routes_site.tmpl",
	)
}

func httprouter_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := httprouter_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_mirc_routes_site.tmpl", size: 235, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x4f, 0xfa, 0x94, 0xfc, 0xde, 0xbd, 0xc4, 0x73, 0x1c, 0x5c, 0x1, 0x6, 0xc0, 0xb1, 0x3, 0xe9, 0x45, 0x4a, 0x88, 0x1b, 0x3e, 0x78, 0x93, 0xcc, 0x91, 0x13, 0xe6, 0x80, 0x49, 0x99, 0x88}}
	return a, nil
}

var _httprouter_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xbd\x4e\xc5\x30\x0c\x05\xe0\xdd\x4f\x61\x65\x82\x81\x6b\x95\xf1\x6e\x88\x01\x31\xf3\x02\x0d\xc1\x6d\x2d\x9a\x1f\xb9\x6e\x44\x85\x78\x77\xd4\x36\xb0\xdc\xc5\xd2\xd1\xf9\x7c\x8a\x0f\x9f\x7e\x64\xac\x1d\x80\xc4\x92\xd5\xf0\x0e\x10\x11\xa3\x28\xba\x51\x6c\x5a\xdf\x2f\x21\x47\xf2\xb3\xc4\x8d\xa2\x28\xd5\x47\x07\xf7\x00\x44\xf8\x26\xc6\xb8\xec\xa7\x76\x28\xc9\x58\x07\x1f\x18\x25\x0d\x19\x6c\x2b\xdc\x80\xe9\x1a\x0c\xbf\x8f\xd9\xe7\xc9\x4b\x6a\xfb\x97\x33\xf4\x51\xf4\xea\x1e\x5c\x7f\x80\x17\xcd\x6b\xf9\x03\x67\x38\x41\xed\x9a\x78\x4d\x1f\xfc\xf5\x2f\xd8\x10\x9b\x20\xd9\x1b\x6a\xec\x49\x4d\xc2\xcc\xcb\x2d\xf3\xad\xa1\x6b\xf0\xc6\x63\xd6\x6d\xff\xf9\x81\xdf\x00\x00\x00\xff\xff\x6b\x52\x31\x87\x0c\x01\x00\x00"

func httprouter_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mirc_routes_site_v1Tmpl,
		"httprouter_mirc_routes_site_v1.tmpl",
	)
}

func httprouter_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := httprouter_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_mirc_routes_site_v1.tmpl", size: 268, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2, 0x2c, 0x70, 0x3a, 0xa, 0x23, 0xcb, 0x84, 0xc8, 0xda, 0x13, 0x6b, 0x56, 0xd5, 0xda, 0x60, 0xbe, 0xca, 0x57, 0xf3, 0xe2, 0xec, 0x45, 0x4f, 0x3b, 0x6e, 0xa1, 0x20, 0x63, 0x32, 0x38, 0x74}}
	return a, nil
}

var _httprouter_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xc1\x4a\xc7\x30\x0c\x06\xf0\x7b\x9e\x22\xf4\xa4\x97\x05\x7a\xdc\x4d\x3c\x88\x67\x5f\x60\xb5\x66\x33\xb8\xae\x25\xcb\x8a\x43\x7c\x77\xd9\xac\xf2\x87\x5d\x02\xe1\xfb\x7d\x5f\x09\xf1\x23\x4c\x8c\xd5\x03\x48\x2a\x59\x0d\xef\x00\x11\x31\x89\xa2\x9b\xc4\xde\xb7\xd7\x2e\xe6\x44\x61\x96\xb4\x53\x12\xa5\xea\x1d\xdc\x03\x10\xe1\x8b\x18\xe3\x7a\x9c\xea\x51\x16\x63\x1d\x43\x64\x94\x65\xcc\x60\x7b\xe1\x06\x4c\xb7\x68\xf8\x75\xce\x3e\x69\xde\x4a\xdb\xef\x7e\x9f\x21\x89\xf6\xae\x7a\x37\x9c\xe2\x79\x79\xe3\xcf\x7f\xc1\x86\xd8\x04\xc9\x91\x50\x63\x0f\x6a\x12\x67\x5e\xaf\x2c\xb4\x84\xfa\x18\x8c\xa7\xac\xfb\x5f\xe7\xb1\xfd\xd7\xce\xad\xfc\x06\xf8\x09\x00\x00\xff\xff\x5b\x10\x23\x12\x16\x01\x00\x00"

func httprouter_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mirc_routes_site_v2Tmpl,
		"httprouter_mirc_routes_site_v2.tmpl",
	)
}

func httprouter_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := httprouter_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_mirc_routes_site_v2.tmpl", size: 278, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0xda, 0xf5, 0x1, 0xac, 0xa9, 0x50, 0x7c, 0x7e, 0x5f, 0xfa, 0x68, 0x71, 0x2, 0x7b, 0x32, 0x2a, 0x8c, 0xf4, 0x6e, 0x60, 0xab, 0x47, 0x25, 0x99, 0xce, 0xf4, 0x8d, 0x70, 0x57, 0xfd, 0x28}}
	return a, nil
}

var _iris_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x31\x0e\xc2\x30\x0c\x05\xd0\xdd\xa7\xf8\x23\x2c\x31\xce\xc4\x29\x10\x57\x30\x10\x05\xab\xb5\x22\xdc\x26\x12\xaa\x7a\x77\xc4\xda\xfd\x79\x7b\xf5\xb9\x60\xdb\x90\xee\x53\xbd\xa9\x17\xec\x3b\x51\x6d\x90\x24\x99\x28\xca\xa7\x5b\x14\x9c\x08\x00\xaa\xad\xef\xfe\x48\xcf\xe6\xac\xb3\xf9\x97\xdd\x82\x47\xc6\xc8\x49\xd2\xe5\x48\x26\x5d\x35\x74\x61\x0b\x5b\x78\x48\xc6\x90\xbf\xbb\xd2\x99\x7e\x01\x00\x00\xff\xff\x30\xde\x5a\x84\x77\x00\x00\x00"

func iris_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_go_modTmpl,
		"iris_go_mod.tmpl",
	)
}

func iris_go_modTmpl() (*asset, error) {
	bytes, err := iris_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_go_mod.tmpl", size: 119, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0xb9, 0xef, 0x81, 0xe, 0x7d, 0x2b, 0xc6, 0xb4, 0x80, 0x53, 0xc, 0xd5, 0x59, 0x2a, 0x1c, 0xa9, 0x88, 0xc9, 0x7, 0x95, 0xae, 0x5b, 0x30, 0x3, 0x46, 0x5d, 0xcc, 0xee, 0x14, 0xda, 0xa6}}
	return a, nil
}

var _iris_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x4f\xbd\x4e\xc3\x30\x10\xde\xfd\x14\x47\x26\x9b\x21\xa6\xb0\xa0\xa2\x0e\x48\x88\x91\x4a\xc0\x0b\x1c\xa9\x6b\x4e\x75\x6c\xeb\x7c\x29\x03\xca\xbb\xa3\x38\x89\xb2\xe0\xc5\x96\xbf\xff\x8c\xdd\x05\xbd\x83\x1e\x29\x2a\x45\x7d\x4e\x2c\xa0\x15\x00\x40\x13\x92\x6f\xd4\xfc\xf4\x24\xdf\xc3\x57\xdb\xa5\xde\x5e\x50\x90\xb1\x58\x62\x2a\xf6\xba\xbb\x6f\x94\x51\xea\x3c\xc4\xae\x7a\x68\x03\xbf\x55\x82\x39\xc3\xfe\x00\x13\xab\x7d\x73\x3f\xda\xcc\x4e\xd6\x02\x3b\x4f\x45\x1c\x43\x71\x7c\xc5\x28\x05\x24\x55\x5e\x25\xac\xe8\xc7\x02\x6a\xcc\x79\xd3\x16\x41\x96\x55\x58\x6f\xea\x5c\x05\xe9\x0c\x8e\x79\x8a\x9c\xa2\xdb\xf7\x21\xea\x9a\xfd\x7c\x3a\xb1\x6e\xf6\x8f\x77\xbb\x87\xc6\x98\xa7\x4a\xba\x39\x40\xa4\xb0\x14\x9d\x4e\x48\xbe\x7d\x45\xc1\xa0\x1d\xb3\xa9\xdf\xa3\x1a\x97\x59\xff\x35\x82\xdb\xd9\x3c\xe7\x40\x1d\x0a\xa5\xb8\xee\xb6\x16\x3e\x8f\x2f\xc7\xfd\x36\x93\xd3\x20\x6e\x1b\x39\xaa\xbf\x00\x00\x00\xff\xff\x7e\xb0\xed\xb8\x74\x01\x00\x00"

func iris_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mainTmpl,
		"iris_main.tmpl",
	)
}

func iris_mainTmpl() (*asset, error) {
	bytes, err := iris_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_main.tmpl", size: 372, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0x62, 0x83, 0x9, 0x2d, 0xd8, 0xa6, 0x8f, 0xb7, 0x1d, 0xe9, 0xb1, 0x28, 0x19, 0xd6, 0x36, 0x76, 0x8f, 0xe4, 0xfa, 0x99, 0x75, 0xab, 0x10, 0xf2, 0x5f, 0x73, 0x71, 0x70, 0x48, 0x87, 0x14}}
	return a, nil
}

var _iris_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x8b\xdb\x30\x10\x85\xef\xfa\x15\x53\x1d\x8a\x0d\xc1\x22\x39\xba\xec\xb1\x2d\x7b\x68\x13\x9a\x63\xe9\x41\xf5\x4e\x94\x21\xf6\xc8\x8c\xc7\x29\x25\xf8\xbf\x2f\x96\xbc\x49\x16\x96\xf8\x60\x34\x7a\x9f\xdf\x68\x9e\xdc\xfb\xe6\xe4\x03\x42\xe7\x89\x8d\xa1\xae\x8f\xa2\x50\x18\x00\x00\xdb\xc6\x60\x4d\x5e\x06\xd2\xe3\xf8\xb7\x6a\x62\xe7\x7c\x4b\xdd\x7f\xd7\x91\xb8\xf3\xc6\x35\x51\xd0\x3e\x46\x90\x03\x31\x2e\x46\x12\x47\xc5\x01\xec\xe5\x02\xd5\xee\x14\x7e\xfa\x0e\x61\x9a\x66\xb4\x71\x59\xcb\x6e\xe7\xf5\x23\xc6\x9d\xd7\x0b\xb6\x79\x8c\x6d\xac\x29\x8d\x71\x2e\xc4\x3a\x20\xa3\x78\x45\x08\x11\x64\xe4\x34\x70\x15\xa2\x39\x8c\xdc\xa4\xa2\x28\xe1\x92\x4c\xdb\x18\xaa\x9d\x10\x6b\xcb\x85\xbd\x7e\xd6\xc4\x17\x84\x41\xbd\xa8\x2d\x13\x86\xac\x42\x38\x40\xfd\x04\x1d\xc9\xd7\x5c\x15\x59\x8b\xbd\x26\xe1\xf3\x9c\x4f\xb5\xed\x95\x22\x0f\xd9\x7d\x7e\x7e\x8d\xfc\x23\xbe\x60\xbd\x94\x09\x7a\xe6\x3d\x0a\xf9\x76\x16\x56\x57\xf2\x7b\x6e\x1f\x65\x1e\xaf\xce\xe4\x75\xef\x59\x68\xf8\x00\xdd\xf6\x3a\xd4\x6f\xa6\xa4\x73\x79\x6b\x7d\xed\xb7\xed\x75\x4f\x7c\xda\x79\x3d\xd6\x60\x2b\x17\x90\xed\xcd\x6c\xca\xcb\x29\xbd\xe9\x00\x28\x32\xcf\x93\xef\xf2\xed\x04\x58\x2c\x19\xac\xd2\xc0\xe5\x97\x84\x7d\x7a\x02\xa6\x16\x6e\x2d\xe7\x3c\xbf\x79\xf5\x6d\x81\x22\xe5\x9d\xef\x83\xa0\x0f\xc4\x34\x1c\x6d\x69\x26\xb3\xdc\xd0\x5d\xc4\xf0\xfb\x0f\xb1\xa2\x1c\x7c\x83\x97\x69\xe9\x24\xa8\xa3\xf0\x7b\xe9\x76\x06\xc6\x7f\x45\xfe\x29\xaa\x3d\x29\x96\xab\x77\xca\x79\xfd\xe1\xee\xe6\x7e\x77\x32\x93\x79\x0d\x00\x00\xff\xff\xa5\x96\x7d\x33\x2d\x03\x00\x00"

func iris_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mirc_mainTmpl,
		"iris_mirc_main.tmpl",
	)
}

func iris_mirc_mainTmpl() (*asset, error) {
	bytes, err := iris_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_mirc_main.tmpl", size: 813, mode: os.FileMode(0644), modTime: time.Unix(1584606341, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfd, 0x1, 0x72, 0x5b, 0x79, 0x1c, 0x67, 0x4b, 0xf9, 0x2b, 0x33, 0x2d, 0x5, 0xab, 0x26, 0xf7, 0xa7, 0xec, 0x87, 0x63, 0x92, 0x62, 0xc2, 0x4, 0xf5, 0x5b, 0xed, 0x9b, 0x4, 0xee, 0xfb, 0x56}}
	return a, nil
}

var _iris_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\x31\x4e\xc5\x30\x0c\xc6\xf1\xdd\xa7\xb0\x32\xc1\x40\x2d\x31\x76\x43\x0c\x88\x99\x0b\x34\x04\x37\xb5\x68\x92\xca\x71\x11\x55\xd5\xbb\xa3\x96\xbc\xe9\x2d\x51\xac\xff\x4f\xdf\xe2\xc3\xb7\x8f\x8c\x5a\x56\xe3\x0a\x20\x69\x29\x6a\xf8\x00\x88\x88\x49\x14\x5d\x14\x9b\xd6\xcf\x2e\x94\x44\x7e\x96\xb4\x51\x12\xa5\x9f\x67\x07\x8f\x00\x44\xf8\x21\xc6\x58\xcf\x47\xb2\xb1\x8e\x3e\x9c\xbf\xb1\x80\x6d\x0b\xb7\x6a\xba\x06\xc3\xfd\xda\x7c\x9d\xbc\xe4\x36\xde\xfd\x1f\x43\x12\xed\xdd\x93\x1b\x2e\xf0\x9e\xbf\xf8\xf7\x06\xde\xd8\x10\x1b\x20\x39\x0b\x35\xf6\xa2\x26\x61\xe6\x7a\xcf\x7c\x2b\xb4\x07\x6f\x1c\x8b\x6e\x7d\x35\x95\x1c\x0f\x37\xc0\x01\x7f\x01\x00\x00\xff\xff\xb6\xa6\x68\x55\xf2\x00\x00\x00"

func iris_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mirc_routes_siteTmpl,
		"iris_mirc_routes_site.tmpl",
	)
}

func iris_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := iris_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_mirc_routes_site.tmpl", size: 242, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xe9, 0xb6, 0xa8, 0x13, 0x1e, 0xf5, 0x33, 0xea, 0xd5, 0xf4, 0x5e, 0xe1, 0x2e, 0x19, 0x75, 0x59, 0x47, 0xac, 0xaa, 0x85, 0xb4, 0x84, 0xdf, 0x62, 0x11, 0xfa, 0x5, 0xd7, 0xac, 0x34, 0x25}}
	return a, nil
}

var _iris_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xbd\x4e\xc3\x40\x10\x04\xe0\x7e\x9f\x62\x75\x15\x14\x64\x65\xca\x74\x88\x02\x51\xf3\x02\x3e\x8e\xcd\x65\x45\xee\x47\xeb\xf5\x09\x2b\xca\xbb\x23\xdb\x07\x4d\x9a\x91\x46\xf3\x69\xaa\x0f\xdf\x3e\x32\xb6\x01\x40\x52\x2d\x6a\xf8\x00\x88\x88\x49\x14\x5d\x14\x3b\xcf\x9f\x87\x50\x12\xf9\x8b\xa4\x85\x92\x28\xb5\x67\x07\x8f\x00\x44\xf8\x21\xc6\x38\xad\xd1\x06\x94\x6c\xac\x27\x1f\x18\x25\x9f\x0a\xd8\x52\xb9\x03\xd3\x39\x18\x5e\xb7\xdb\xd7\xb3\x97\xdc\xff\x0f\x7b\x19\x93\xe8\xd1\x3d\xb9\x71\x03\x6f\x5a\xe6\xfa\x07\xf6\xb2\x83\x36\x74\xf1\x9e\xbf\xf8\xe7\x5f\xb0\x21\x76\x41\xb2\x2e\xd4\xd9\x8b\x9a\x84\x0b\x4f\xf7\xcc\xf7\x85\xae\xc1\x1b\xc7\xa2\xcb\x71\x32\x95\x1c\x6f\x6e\x84\x1b\xfc\x06\x00\x00\xff\xff\xfd\x76\xa1\x3a\x13\x01\x00\x00"

func iris_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mirc_routes_site_v1Tmpl,
		"iris_mirc_routes_site_v1.tmpl",
	)
}

func iris_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := iris_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_mirc_routes_site_v1.tmpl", size: 275, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0x9f, 0x3d, 0x40, 0xe2, 0xcc, 0xce, 0x89, 0xfc, 0x94, 0x96, 0xb7, 0xb7, 0x67, 0x2, 0x60, 0x31, 0x34, 0x6a, 0x1e, 0x48, 0x8f, 0x9c, 0xee, 0xf7, 0xdd, 0xad, 0x54, 0x11, 0xe8, 0xfc, 0x55}}
	return a, nil
}

var _iris_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x3d\x4e\x04\x31\x0c\x85\x7b\x9f\xc2\x4a\x05\xcd\x5a\x4a\xb9\x1d\xa2\x40\xd4\x5c\x60\x43\xf0\x06\x8b\xcd\x8f\x3c\x9e\x88\xd1\x6a\xee\x8e\x66\x08\x34\xd3\x58\xb2\xdf\xf7\x3d\xb7\x10\xbf\x42\x62\xec\x1e\x40\x72\xab\x6a\xf8\x00\x88\x88\x59\x14\x5d\x12\xfb\x9c\xdf\x4f\xb1\x66\x0a\x37\xc9\x0b\x65\x51\xea\xde\xc1\x23\x00\x11\xbe\x89\x31\x4e\xdb\xe8\x1e\xa5\x18\xeb\x35\x44\x46\x29\xd7\x0a\xb6\x34\x1e\x80\xe9\x1c\x0d\xef\x7b\xed\x8b\xd6\xb9\x8d\xfe\xd3\xef\x72\xc9\xa2\x67\xd7\xbd\xbb\xec\xc4\x6b\xf9\xe0\xef\x7f\x82\x0d\x71\x10\x24\x5b\x42\x03\x7b\x52\x93\x78\xe3\xe9\x88\x85\x91\xd0\x3d\x06\xe3\x54\x75\x39\x4f\xa6\x52\xd2\x3a\xd4\xe7\x71\x3e\xaa\x7f\xc2\xf6\x64\x05\xf8\x09\x00\x00\xff\xff\xaf\xca\x8b\x3e\x1d\x01\x00\x00"

func iris_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mirc_routes_site_v2Tmpl,
		"iris_mirc_routes_site_v2.tmpl",
	)
}

func iris_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := iris_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_mirc_routes_site_v2.tmpl", size: 285, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0xdb, 0x80, 0x15, 0xc7, 0xea, 0xe9, 0x7, 0xed, 0xe4, 0xc7, 0x77, 0xa6, 0x61, 0xbc, 0x80, 0x98, 0x61, 0x40, 0xa4, 0xc8, 0x2e, 0x77, 0xa5, 0x62, 0x0, 0xc3, 0x74, 0x8, 0xb0, 0x8e, 0x7a}}
	return a, nil
}

var _macaron_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x41\x0e\xc2\x20\x10\x05\xd0\xfd\x9c\xe2\x2f\x75\xf3\x11\x8c\xd7\x30\x5e\x01\x2b\xc1\x49\x3b\x1d\x25\x42\x62\x9a\xde\xdd\x85\xfb\x67\xfe\xe8\x4b\xc1\xb6\x81\xb7\xb9\x5e\xb3\x15\xec\xbb\x48\x75\x44\xc6\x24\xd2\xca\xbb\x6b\x2b\x38\x08\x00\x54\xfd\x3c\xfb\x9d\x93\x5b\xc8\x8b\xda\x37\x98\xb6\x30\x12\x46\x62\xe4\xe9\x4f\xfc\x35\x57\xea\x1a\x2c\x4f\xb9\xf9\xca\x11\x31\x22\xcf\xbc\xc8\x51\x7e\x01\x00\x00\xff\xff\xb3\x39\x83\xf4\x6e\x00\x00\x00"

func macaron_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_go_modTmpl,
		"macaron_go_mod.tmpl",
	)
}

func macaron_go_modTmpl() (*asset, error) {
	bytes, err := macaron_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_go_mod.tmpl", size: 110, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0x8f, 0xe6, 0x10, 0x63, 0x99, 0xaf, 0x80, 0xfd, 0x24, 0x5c, 0xe2, 0x94, 0x9a, 0x52, 0xca, 0x4d, 0x36, 0xcb, 0x69, 0xff, 0x83, 0x39, 0x69, 0xaf, 0x63, 0xea, 0x57, 0xe2, 0x8c, 0x32, 0xfa}}
	return a, nil
}

var _macaron_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\xca\xc3\x20\x14\x85\xf7\xfb\x14\x87\x4c\xfa\x0f\x31\x3f\x74\x0a\x74\xeb\xda\x06\xda\xbe\x80\x88\x15\x09\x6a\x50\x93\x0e\x25\xef\x5e\x30\x91\x0c\x9d\x0e\xdc\xfb\x9d\x7b\xbf\x49\xaa\x51\x1a\x0d\x27\xad\x27\xb2\x6e\x0a\x31\x83\x11\x00\x34\x26\x4c\xa3\x69\xad\x17\x4e\x2a\x19\x83\x6f\x97\xff\x86\x38\xd1\x6b\xf6\xaa\x14\x18\xc7\xa7\xa0\x0e\xfd\x19\x95\xba\xe9\x37\xe3\x54\xe6\x42\x20\x6a\x63\x53\xd6\x11\x49\xc7\x45\xfa\x9c\x90\x43\x45\x0b\x53\x81\xc7\xbe\x67\xee\x28\xa7\x2c\x63\xae\xcd\x92\x56\x69\xd6\x9f\xba\xae\xe3\xdb\xe3\xf6\x3e\x7b\xc6\x69\xdd\xad\x7e\x8f\xe1\xaf\x7a\x5d\xb7\xac\xce\x42\xe0\x39\x5c\x86\xfe\x30\x8c\x61\xce\x7a\xf3\xa3\x95\xbe\x01\x00\x00\xff\xff\xee\xe4\x75\x48\x1a\x01\x00\x00"

func macaron_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mainTmpl,
		"macaron_main.tmpl",
	)
}

func macaron_mainTmpl() (*asset, error) {
	bytes, err := macaron_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_main.tmpl", size: 282, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0x55, 0x52, 0x74, 0x55, 0x0, 0xda, 0xbb, 0x5d, 0xb2, 0xbc, 0x3b, 0xf7, 0x5a, 0xec, 0x82, 0x27, 0xe4, 0x77, 0xee, 0x87, 0x17, 0xe9, 0x46, 0xeb, 0xe8, 0x4a, 0x83, 0xd, 0xe4, 0xf2, 0x8a}}
	return a, nil
}

var _macaron_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x8b\xdb\x30\x10\x85\xef\xfa\x15\x53\x1d\x8a\x0d\xc1\x22\x39\xba\xec\xb1\x2d\x3d\x6c\x13\x9a\x63\xe9\x41\xf5\x4e\x94\x21\xf6\xc8\x8c\xc7\x29\x25\xf8\xbf\x2f\x96\xbc\x49\x16\x96\xf8\x60\x34\x7a\x9f\xdf\x68\x9e\xdc\xfb\xe6\xe4\x03\x42\xe7\x89\x8d\xa1\xae\x8f\xa2\x50\x18\x00\x00\xdb\xc6\x60\x4d\x5e\x06\xd2\xe3\xf8\xb7\x6a\x62\xe7\x7c\x4b\xdd\x7f\xd7\x91\xb8\xf3\xc6\x35\x51\xd0\x3e\x46\x90\x03\x31\x2e\x46\x12\x47\xc5\x01\xec\xe5\x02\xd5\xee\x14\x7e\xfa\x0e\x61\x9a\x66\xb4\x71\x59\xcb\x6e\xe7\xf5\x23\xc6\x9d\xd7\x0b\xb6\x79\x8c\x6d\xac\x29\x8d\x71\x2e\xc4\x3a\x20\xa3\x78\x45\x08\x11\x64\xe4\x34\x70\x15\xa2\x39\x8c\xdc\xa4\xa2\x28\xe1\x92\x4c\xdb\x18\xaa\x9d\x10\x6b\xcb\x85\xbd\x7e\xd6\xc4\x17\x84\x41\xbd\xa8\x2d\x13\x86\xac\x42\x38\x40\xfd\x04\x1d\xc9\xd7\x5c\x15\x59\x8b\xbd\x26\xe1\xf3\x9c\x4f\xb5\xed\x95\x22\x0f\xd9\x7d\x7e\x7e\x8d\xfc\x1c\x5f\xb0\x5e\xca\x04\xfd\xe0\x3d\x0a\xf9\x76\x16\x56\x57\xf2\x7b\x6e\x1f\x65\x1e\xaf\xce\xe4\x75\xef\xd9\x37\x5e\x22\x7f\x40\x6f\x7b\x1d\xea\x37\x5f\xd2\xb9\xbc\x75\xbf\xb6\xdc\xf6\xba\x27\x3e\xed\xbc\x1e\x6b\xb0\x95\x0b\xc8\xf6\x66\x36\xe5\xe5\x94\xde\x74\x00\x14\x99\x47\xca\xd7\xf9\x76\x08\x2c\x96\x18\x56\x69\xe6\xf2\x4b\xc2\x3e\x3d\x01\x53\x0b\xb7\x96\x73\xa4\xdf\xbc\xfa\xb6\x40\x91\xf2\xce\xf7\x41\xd6\x07\x62\x1a\x8e\xb6\x34\x93\x59\x2e\xe9\x2e\x65\xf8\xfd\x87\x58\x51\x0e\xbe\xc1\xcb\xb4\x74\x12\xd4\x51\xf8\xbd\x74\x3b\x03\xe3\xbf\x22\xff\x17\xd5\x9e\x14\xcb\xd5\x3b\xe5\xbc\xfe\x70\x77\x73\xbf\x3b\x99\xc9\xbc\x06\x00\x00\xff\xff\xab\x55\x99\xa7\x30\x03\x00\x00"

func macaron_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mirc_mainTmpl,
		"macaron_mirc_main.tmpl",
	)
}

func macaron_mirc_mainTmpl() (*asset, error) {
	bytes, err := macaron_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_mirc_main.tmpl", size: 816, mode: os.FileMode(0644), modTime: time.Unix(1584606341, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x43, 0xca, 0xa2, 0x59, 0x29, 0x42, 0x20, 0xd2, 0x99, 0xc3, 0xa6, 0x75, 0x21, 0xf, 0x1, 0x76, 0x7d, 0xe, 0x17, 0x84, 0x8a, 0x3d, 0xe, 0x5e, 0x7b, 0x41, 0x3a, 0xa1, 0xc5, 0x8f, 0x94}}
	return a, nil
}

var _macaron_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xb1\x8e\xc2\x30\x0c\x06\xe0\xdd\x4f\x61\x65\xba\x1b\xae\x96\x6e\xec\x86\x18\x10\x33\x2f\xd0\x10\xdc\xd6\xa2\x69\x2a\xd7\x45\x54\x88\x77\x47\x29\x61\x62\xb1\x6c\xfd\x9f\xff\xc9\x87\xab\xef\x18\x35\x2d\xc6\x33\x80\xc4\x29\xa9\xe1\x0f\x20\x22\x46\x51\x74\x9d\x58\xbf\x9c\xab\x90\x22\xf9\x41\xe2\x4a\x51\x94\x6e\xff\x0e\x7e\x01\x88\xf0\x24\xc6\x38\xe7\x21\xa3\xb1\xb6\x3e\xe4\xad\x4d\x60\xeb\xc4\x25\x35\x5d\x82\xe1\x63\xeb\xdc\xf7\x5e\xc6\x52\x5e\xbd\x8f\x26\x8a\xd6\xee\xcf\x35\x1b\x38\x8e\x17\xbe\x7f\xc0\x81\x0d\xb1\x00\x92\x9c\x50\x61\x3b\x35\x09\x03\xcf\xdf\xcc\x97\x84\xea\xe0\x8d\xbb\xa4\x6b\xfe\x79\xc2\x2b\x00\x00\xff\xff\x6f\x8d\xbd\xe2\xeb\x00\x00\x00"

func macaron_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mirc_routes_siteTmpl,
		"macaron_mirc_routes_site.tmpl",
	)
}

func macaron_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := macaron_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_mirc_routes_site.tmpl", size: 235, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x4f, 0xfa, 0x94, 0xfc, 0xde, 0xbd, 0xc4, 0x73, 0x1c, 0x5c, 0x1, 0x6, 0xc0, 0xb1, 0x3, 0xe9, 0x45, 0x4a, 0x88, 0x1b, 0x3e, 0x78, 0x93, 0xcc, 0x91, 0x13, 0xe6, 0x80, 0x49, 0x99, 0x88}}
	return a, nil
}

var _macaron_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xbd\x4e\xc5\x30\x0c\x05\xe0\xdd\x4f\x61\x65\x82\x81\x6b\x95\xf1\x6e\x88\x01\x31\xf3\x02\x0d\xc1\x6d\x2d\x9a\x1f\xb9\x6e\x44\x85\x78\x77\xd4\x36\xb0\xdc\xc5\xd2\xd1\xf9\x7c\x8a\x0f\x9f\x7e\x64\xac\x1d\x80\xc4\x92\xd5\xf0\x0e\x10\x11\xa3\x28\xba\x51\x6c\x5a\xdf\x2f\x21\x47\xf2\xb3\xc4\x8d\xa2\x28\xd5\x47\x07\xf7\x00\x44\xf8\x26\xc6\xb8\xec\xa7\x76\x28\xc9\x58\x07\x1f\x18\x25\x0d\x19\x6c\x2b\xdc\x80\xe9\x1a\x0c\xbf\x8f\xd9\xe7\xc9\x4b\x6a\xfb\x97\x33\xf4\x51\xf4\xea\x1e\x5c\x7f\x80\x17\xcd\x6b\xf9\x03\x67\x38\x41\xed\x9a\x78\x4d\x1f\xfc\xf5\x2f\xd8\x10\x9b\x20\xd9\x1b\x6a\xec\x49\x4d\xc2\xcc\xcb\x2d\xf3\xad\xa1\x6b\xf0\xc6\x63\xd6\x6d\xff\xf9\x81\xdf\x00\x00\x00\xff\xff\x6b\x52\x31\x87\x0c\x01\x00\x00"

func macaron_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mirc_routes_site_v1Tmpl,
		"macaron_mirc_routes_site_v1.tmpl",
	)
}

func macaron_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := macaron_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_mirc_routes_site_v1.tmpl", size: 268, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2, 0x2c, 0x70, 0x3a, 0xa, 0x23, 0xcb, 0x84, 0xc8, 0xda, 0x13, 0x6b, 0x56, 0xd5, 0xda, 0x60, 0xbe, 0xca, 0x57, 0xf3, 0xe2, 0xec, 0x45, 0x4f, 0x3b, 0x6e, 0xa1, 0x20, 0x63, 0x32, 0x38, 0x74}}
	return a, nil
}

var _macaron_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xc1\x4a\xc7\x30\x0c\x06\xf0\x7b\x9e\x22\xf4\xa4\x97\x05\x7a\xdc\x4d\x3c\x88\x67\x5f\x60\xb5\x66\x33\xb8\xae\x25\xcb\x8a\x43\x7c\x77\xd9\xac\xf2\x87\x5d\x02\xe1\xfb\x7d\x5f\x09\xf1\x23\x4c\x8c\xd5\x03\x48\x2a\x59\x0d\xef\x00\x11\x31\x89\xa2\x9b\xc4\xde\xb7\xd7\x2e\xe6\x44\x61\x96\xb4\x53\x12\xa5\xea\x1d\xdc\x03\x10\xe1\x8b\x18\xe3\x7a\x9c\xea\x51\x16\x63\x1d\x43\x64\x94\x65\xcc\x60\x7b\xe1\x06\x4c\xb7\x68\xf8\x75\xce\x3e\x69\xde\x4a\xdb\xef\x7e\x9f\x21\x89\xf6\xae\x7a\x37\x9c\xe2\x79\x79\xe3\xcf\x7f\xc1\x86\xd8\x04\xc9\x91\x50\x63\x0f\x6a\x12\x67\x5e\xaf\x2c\xb4\x84\xfa\x18\x8c\xa7\xac\xfb\x5f\xe7\xb1\xfd\xd7\xce\xad\xfc\x06\xf8\x09\x00\x00\xff\xff\x5b\x10\x23\x12\x16\x01\x00\x00"

func macaron_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mirc_routes_site_v2Tmpl,
		"macaron_mirc_routes_site_v2.tmpl",
	)
}

func macaron_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := macaron_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_mirc_routes_site_v2.tmpl", size: 278, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0xda, 0xf5, 0x1, 0xac, 0xa9, 0x50, 0x7c, 0x7e, 0x5f, 0xfa, 0x68, 0x71, 0x2, 0x7b, 0x32, 0x2a, 0x8c, 0xf4, 0x6e, 0x60, 0xab, 0x47, 0x25, 0x99, 0xce, 0xf4, 0x8d, 0x70, 0x57, 0xfd, 0x28}}
	return a, nil
}

var _makefileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4f\x4b\x03\x31\x14\xc4\xcf\x79\x9f\x62\x28\x3d\x74\x85\xa4\xf7\x40\x71\x2f\xb6\x0a\xea\x0a\x7a\xf1\xb8\x76\x5f\xe2\x42\xfe\x94\x6c\x82\xfa\xed\x65\xa3\xed\x82\x5e\x92\x47\xe6\x37\x93\xc7\x1c\xba\xfd\xc3\x0b\xae\x77\xb0\xd1\xf8\x0c\x39\x41\x7e\xd0\xa1\xdb\xdf\xdd\xdf\x3c\x43\xef\xb0\xde\x4c\xef\xec\x1c\xcc\x18\x06\x28\xc8\xd0\x7b\xc6\xea\x4a\xd9\xb8\x82\xcc\x5f\x27\x86\x69\x88\xd4\xd3\x6d\xf7\xf8\xaa\x31\xb0\xe9\x8b\xcb\xf4\x7b\x6b\xa4\x12\x16\xf5\xad\x8c\x6e\xa0\x7a\x6a\x18\x9f\x49\xd8\xf8\xf3\x08\x19\xe1\xc7\x24\xf9\xb3\xf7\x27\xc7\x13\x7c\x3f\x06\x65\xe3\x5f\x6f\x2a\x61\x71\xa6\x12\xfe\x73\x96\x03\xa7\x3e\x33\x9d\x07\x4d\xa2\x3d\x0e\x73\xfa\x91\x44\x2b\x93\x87\x4c\x66\xc6\x48\xb4\x36\x5e\xf8\x0a\x6c\xcf\x71\xd5\xa2\x14\x89\x76\xbd\xa9\x0d\x35\x50\xdb\xe5\x93\x79\x03\xe3\xb3\x26\x71\x91\xeb\x30\x97\xd6\xd0\x77\x00\x00\x00\xff\xff\x93\x72\x5e\x12\x53\x01\x00\x00"

func makefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_makefileTmpl,
		"makefile.tmpl",
	)
}

func makefileTmpl() (*asset, error) {
	bytes, err := makefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "makefile.tmpl", size: 339, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0x52, 0xc3, 0x7, 0x59, 0x95, 0x2b, 0xc0, 0xf6, 0x39, 0x5a, 0x0, 0x90, 0x9e, 0xee, 0x43, 0xca, 0x88, 0x12, 0xa7, 0x69, 0xdf, 0xd9, 0x9c, 0x82, 0x7b, 0xf6, 0xac, 0x67, 0xbf, 0xd1, 0x27}}
	return a, nil
}

var _mux_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x31\x0a\x42\x31\x0c\x06\xe0\x3d\xa7\xf8\x47\x5d\x52\x5b\x04\x6f\x21\x5e\xa1\x6a\xa9\xc1\x86\x60\x30\x45\x79\xf4\xee\xee\xee\x9f\xda\x3d\x46\xc3\xb6\x81\x2f\xcf\x7e\xae\xda\xb0\x16\x51\x37\x64\xce\x85\xc8\xdb\x2b\xc4\x1b\x76\x04\x00\x5d\xde\x8f\xb8\xf2\xcd\x34\xd5\x21\xfa\x4d\x2a\x9e\x66\xc1\x2c\x9c\xf9\xf0\x4f\xba\xb9\x8c\x51\x93\xc6\x07\x33\xf3\x89\x8f\xb4\xa7\x5f\x00\x00\x00\xff\xff\xcb\xfa\xb2\xb3\x71\x00\x00\x00"

func mux_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_go_modTmpl,
		"mux_go_mod.tmpl",
	)
}

func mux_go_modTmpl() (*asset, error) {
	bytes, err := mux_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_go_mod.tmpl", size: 113, mode: os.FileMode(0644), modTime: time.Unix(1584548470, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0xb8, 0xf4, 0x9d, 0xed, 0xb5, 0x34, 0xcd, 0x99, 0x59, 0xea, 0x9b, 0x7f, 0xb7, 0x6a, 0x5d, 0x91, 0xbb, 0x3d, 0x55, 0x2c, 0x49, 0xd0, 0x7, 0xc4, 0xd5, 0xa0, 0x18, 0x74, 0x20, 0xab, 0xf3}}
	return a, nil
}

var _mux_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x4f\x4b\xc4\x30\x10\xc5\xef\xf3\x29\xc6\x9c\x52\x91\x66\x8f\x4b\x65\x0f\x82\x78\x12\x17\xd4\x2f\x10\xeb\x6c\x1a\x4c\x93\x32\x9d\xea\x82\xf4\xbb\x4b\x92\x2e\x7b\x30\x97\xfc\x79\xf3\x5e\xde\x6f\xb2\xfd\x97\x75\x84\xa3\xf5\x11\xc0\x8f\x53\x62\x41\x0d\x88\x88\x2a\x24\xa7\xea\x29\x92\x98\x41\x64\x52\x50\xef\xce\xcb\xb0\x7c\xb4\x7d\x1a\x8d\x4b\xec\x43\xb0\x66\x5c\xce\x0a\x1a\x80\xd3\x12\xfb\x92\xa6\x1b\xfc\x2d\xd3\x8c\xdd\x01\xc7\xe5\xdc\xbe\xd0\xcf\x6b\x5a\x84\x58\x37\x35\xc7\x18\x64\x72\x7e\x16\x62\x9c\x89\xbf\x6d\x94\x19\x25\x61\x3f\xf8\xea\xdc\xc4\xb7\x4d\xd3\x7c\x35\xce\x62\x59\x2e\xae\xb2\xfb\x9e\x8a\xe8\x4f\x48\x5c\x3e\xcd\x95\xdb\xe7\x1c\x11\x1f\xe2\x67\x4e\x21\xad\xba\xfd\x6e\xbf\x53\x77\xc8\xcd\x7d\x99\xbb\x39\x60\xf4\x61\xeb\x9a\x57\x48\xae\x7d\xb2\x62\x83\x26\xe6\xa6\x3c\xaf\xb0\x6e\x64\xff\x2b\xe1\x6d\x66\xab\x60\x17\x64\x63\xf0\xfd\xf8\x78\xec\xae\x78\x9c\xf5\x02\xc7\xb0\xc2\x5f\x00\x00\x00\xff\xff\x86\x20\x9d\xee\x76\x01\x00\x00"

func mux_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mainTmpl,
		"mux_main.tmpl",
	)
}

func mux_mainTmpl() (*asset, error) {
	bytes, err := mux_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_main.tmpl", size: 374, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0xd5, 0xc2, 0x39, 0x38, 0x8f, 0xff, 0x34, 0x50, 0xc7, 0x47, 0xe9, 0x2b, 0x50, 0xc, 0x56, 0x51, 0x70, 0x8f, 0x5b, 0xd5, 0x59, 0x38, 0xf6, 0xaf, 0xd9, 0xaa, 0xc2, 0x21, 0x92, 0x53, 0x8f}}
	return a, nil
}

var _mux_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x8b\xdb\x30\x10\x85\xef\xfa\x15\x53\x1d\x8a\x0d\xc1\x22\x39\xba\xec\xb1\x2d\x3d\x6c\x13\x9a\x63\xe9\x41\xf5\x4e\x94\x21\xf6\xc8\x8c\xc7\x69\x4b\xf0\x7f\x2f\x96\xbc\x49\x16\x96\xf8\x60\x34\x7a\x9f\xdf\x68\x9e\xdc\xfb\xe6\xe4\x03\x42\xe7\x89\x8d\xa1\xae\x8f\xa2\x50\x18\x00\x00\xdb\xc6\x60\x4d\x5e\x06\xd2\xe3\xf8\xbb\x6a\x62\xe7\x7c\x4b\xdd\x3f\xd7\x91\xb8\xf3\xc6\x35\x51\xd0\x3e\x46\x90\x03\x31\x2e\x46\x12\x47\xc5\x01\xec\xe5\x02\xd5\xee\x14\xbe\xfb\x0e\x61\x9a\x66\xb4\x71\x59\xcb\x6e\xe7\xf5\x23\xc6\x9d\xd7\x0b\xb6\x79\x8c\x6d\xac\x29\x8d\x71\x2e\xc4\x3a\x20\xa3\x78\x45\x08\x11\x64\xe4\x34\x70\x15\xa2\x39\x8c\xdc\xa4\xa2\x28\xe1\x92\x4c\xdb\x18\xaa\x9d\x10\x6b\xcb\x85\xbd\x7e\xd6\xc4\x17\x84\x41\xbd\xa8\x2d\x13\x86\xac\x42\x38\x40\xfd\x04\x1d\xc9\xe7\x5c\x15\x59\x8b\xbd\x26\xe1\xe3\x9c\x4f\xb5\xed\x95\x22\x0f\xd9\x7d\x7e\x7e\x8c\xfc\x1c\x5f\xb0\x5e\xca\x04\x7d\xe3\x3d\x0a\xf9\x76\x16\x56\x57\xf2\x6b\x6e\x1f\x65\x1e\xaf\xce\xe4\x75\xef\x79\xfc\xfb\x0e\xb9\xed\x75\xa8\x5f\x3d\x49\xe7\xf2\xd6\xf9\xda\x6e\xdb\xeb\x9e\xf8\xb4\xf3\x7a\xac\xc1\x56\x2e\x20\xdb\x9b\xd9\x94\x97\x53\x7a\xd3\x01\x50\x64\x1e\x27\x5f\xe5\xeb\x01\xb0\x58\x22\x58\xa5\x79\xcb\x4f\x09\xfb\xf0\x04\x4c\x2d\xdc\x5a\xce\x71\x7e\xf1\xea\xdb\x02\x45\xca\x3b\xdf\x07\x39\x1f\x88\x69\x38\xda\xd2\x4c\x66\xb9\xa0\xbb\x84\xe1\xe7\x2f\x62\x45\x39\xf8\x06\x2f\xd3\xd2\x49\x50\x47\xe1\xb7\xd2\xed\x0c\x8c\x7f\x8a\xfc\x4f\x54\x7b\x52\x2c\x57\x6f\x94\xf3\xfa\xdd\xdd\xcd\xfd\xee\x64\x26\xf3\x3f\x00\x00\xff\xff\x87\x05\x68\x99\x2c\x03\x00\x00"

func mux_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mirc_mainTmpl,
		"mux_mirc_main.tmpl",
	)
}

func mux_mirc_mainTmpl() (*asset, error) {
	bytes, err := mux_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_mirc_main.tmpl", size: 812, mode: os.FileMode(0644), modTime: time.Unix(1584606341, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x82, 0xf3, 0x96, 0x4c, 0xe6, 0x20, 0xb4, 0x43, 0x55, 0xad, 0x46, 0x29, 0x59, 0xfd, 0x4d, 0xca, 0xbc, 0xa6, 0xa4, 0x27, 0xce, 0x77, 0xf0, 0xb0, 0x5d, 0xba, 0x22, 0xe9, 0xea, 0xaf, 0x13, 0x5e}}
	return a, nil
}

var _mux_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xcf\x4a\xc4\x30\x10\x06\xf0\x7b\x9e\x62\xe8\x61\x51\x64\x3b\xe2\xcd\x85\x22\xe2\x41\x3c\x7b\x14\xa1\x69\x3a\xed\x0e\x36\x4d\x99\x4e\x65\x4b\xc8\xbb\x4b\xb7\x11\x04\x2f\xf9\xc3\xf7\x9b\x8f\x99\xac\xfb\xb2\x3d\x81\x84\x45\x69\x36\x86\xfd\x14\x44\xe1\xc6\x00\x00\x78\x16\x28\x7a\xd6\xf3\xd2\x94\x2e\x78\xb4\x03\xfb\x15\x3d\x0b\x7e\x3f\x14\xe6\xd6\x18\x44\x78\x67\x25\x98\xb7\x83\x47\x25\xe9\xac\xdb\x5e\x5d\x30\xba\x4e\x94\x53\x95\xc5\x29\xc4\x6b\xe7\xcb\xd9\xf2\x98\xcb\xcb\xfd\x53\x7b\x96\x53\x71\x2c\xea\x2b\x78\x1b\x5b\xba\xfc\x82\x57\x52\x80\x0c\x90\xb7\x04\x33\x7b\x16\x65\x37\xd0\xfc\x9f\x61\x9c\x97\xa6\x0d\xde\xf2\x98\x4a\xba\x58\x3f\x0d\xb4\xaf\x9f\x47\x30\x3a\xab\xd4\x07\x59\x13\x46\x6e\x4f\x1f\xf7\xc7\xc7\xcf\xbb\xf4\xd4\xf1\xa0\x24\x55\xdc\xef\x74\xe8\x42\xa8\x1a\x2b\x07\x6e\xab\x3f\xac\xa8\x4d\x32\x3f\x01\x00\x00\xff\xff\x5f\xfc\xc1\x15\x37\x01\x00\x00"

func mux_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mirc_routes_siteTmpl,
		"mux_mirc_routes_site.tmpl",
	)
}

func mux_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := mux_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_mirc_routes_site.tmpl", size: 311, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x72, 0xec, 0x60, 0x67, 0x48, 0xcd, 0xbe, 0xa1, 0x74, 0xf8, 0x5f, 0x84, 0x72, 0xb3, 0x1d, 0x5b, 0xe3, 0x7a, 0xba, 0xaa, 0xb0, 0x48, 0xbc, 0xfe, 0x32, 0xe2, 0xc1, 0x2f, 0x19, 0x44, 0x28, 0xf7}}
	return a, nil
}

var _mux_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcf\xc1\x4a\xc4\x30\x10\x06\xe0\x7b\x9e\x62\xe8\x61\x51\x64\x77\xac\x37\x17\x8a\x88\x07\xf1\xec\x51\x84\xa6\xe9\xb4\x3b\xd8\x34\x65\x3a\x2d\x5b\x4a\xdf\x5d\x76\x13\x45\xf0\x92\xf0\x33\xdf\xfc\x30\x83\x75\x5f\xb6\x25\x98\x73\x63\xd8\x0f\x41\x14\x6e\x0c\x00\x80\x67\x81\xac\x65\x3d\x4d\xd5\xc1\x05\x8f\xb6\x63\xbf\xa0\x67\xc1\xf9\x21\x33\xb7\xc6\x20\xc2\x3b\x2b\xc1\x78\x79\xe6\x1c\xb8\x57\x92\xc6\x3a\x02\xee\x9b\x60\x74\x19\x28\x01\x95\xc9\x29\xac\xd7\xda\x97\x93\xe5\x3e\xf5\x1f\x62\x28\x3d\xcb\x31\xdb\x67\xe5\x15\xbc\x4a\x98\x86\x1f\x10\x43\x04\x73\x9e\xc4\x5b\x5f\xd3\xf9\x57\x90\x02\x24\x81\x7c\x99\x60\x62\xcf\xa2\xec\x3a\x1a\xff\x33\x5c\xc7\xa9\xaa\x83\xb7\xdc\x6f\x07\x3a\x5b\x3f\x74\x14\x6f\x4c\x2b\xb8\x3a\xab\xd4\x06\x59\x36\x5c\xb9\x3e\x7e\xdc\xef\x1f\x3f\xef\xb6\xa7\x86\x3b\x25\x29\xd6\xf8\x6f\xbb\x26\x84\xa2\xb2\xb2\xe3\xba\xf8\xc3\xb2\xd2\x6c\xe6\x3b\x00\x00\xff\xff\x5c\xe6\xb8\xe5\x58\x01\x00\x00"

func mux_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mirc_routes_site_v1Tmpl,
		"mux_mirc_routes_site_v1.tmpl",
	)
}

func mux_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := mux_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_mirc_routes_site_v1.tmpl", size: 344, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0xc6, 0xb9, 0x30, 0xa1, 0x9c, 0x1e, 0x88, 0xaa, 0xfa, 0xd, 0xab, 0x52, 0xd, 0x89, 0xfa, 0x44, 0xcb, 0x14, 0x36, 0x1a, 0xaa, 0x6c, 0xb4, 0x3f, 0x70, 0xf1, 0xb9, 0x2b, 0x14, 0x43, 0xf6}}
	return a, nil
}

var _mux_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x4a\xc4\x40\x0c\x86\xef\xf3\x14\xa1\x87\x45\x11\x1b\xe9\xcd\x85\x22\xe2\x41\x3c\x7b\x14\x61\xa7\xd3\xb4\x06\x3b\x9d\x92\xa6\x65\x4b\x99\x77\x97\x6e\x47\x11\xf6\x32\x43\xc8\x97\xef\x4f\x06\xeb\xbe\x6d\x4b\x30\x17\xc6\xb0\x1f\x82\x28\xdc\x18\x00\x00\xcf\x02\x59\xcb\xfa\x35\x55\xb9\x0b\x1e\x6d\xc7\x7e\x41\xcf\x82\x73\x91\x99\x5b\x63\x10\xe1\x9d\x95\x60\xdc\x9e\xb9\x00\xee\x95\xa4\xb1\x8e\x80\xfb\x26\x18\x5d\x06\x4a\x80\xca\xe4\x14\xd6\x8b\xf6\x55\xc2\x34\x24\x7f\xbe\x17\x27\xcf\x72\xcc\xe6\x22\x3b\x5d\x88\xb7\xbe\xa6\xf3\x1f\x41\x0a\x90\x08\xe4\xad\x83\x09\x7b\x16\x65\xd7\xd1\x78\x8d\xe1\x3a\x4e\x55\x1d\xbc\xe5\x3e\xe6\x74\xb6\x7e\xe8\x68\x3f\x21\x8d\xe0\xea\xac\x52\x1b\x64\x89\xb8\x72\x7d\xfc\x78\xb8\x7f\xfc\xbc\x8b\x4f\x0d\x77\x4a\x52\xae\xfb\x1f\x0f\x4d\x08\x65\x65\xe5\xc0\x75\xf9\x0f\x4b\xf9\x2f\x49\x71\x9d\xff\x2b\xdf\x36\x8d\xc6\xfc\x04\x00\x00\xff\xff\x5e\x32\x7c\x4c\x62\x01\x00\x00"

func mux_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mirc_routes_site_v2Tmpl,
		"mux_mirc_routes_site_v2.tmpl",
	)
}

func mux_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := mux_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_mirc_routes_site_v2.tmpl", size: 354, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3a, 0xb4, 0xc1, 0xc1, 0xf3, 0x2a, 0xa1, 0xe3, 0xb3, 0x2f, 0xcc, 0x2, 0xb1, 0x37, 0x1a, 0x41, 0x81, 0x65, 0xf7, 0x87, 0x9a, 0xe, 0x7c, 0xb, 0xba, 0xd8, 0x16, 0xb3, 0xaa, 0xe2, 0x86, 0xed}}
	return a, nil
}

var _readmeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\x4b\xae\xc2\x30\x0c\x46\xe1\xb9\x57\xf1\x4b\xd6\xd5\x1d\xc1\x6e\x98\xc7\x05\xd3\xa6\xe4\x25\x3b\x11\x65\xf7\x28\x48\x1d\x1e\x9d\x8f\x19\x39\xda\x45\x0f\xc9\x2d\xa9\xd3\x3e\xbc\x43\xe0\x71\xe6\x5c\xff\x8e\x73\xe2\x59\x0d\x7a\xb4\x24\xb1\x60\xab\x6f\xf4\x8a\xe1\x3f\x85\x58\xf0\xa9\xc3\xd0\xac\xee\x7a\xef\x57\x22\x66\x66\xdc\x5c\x56\xa5\x10\xc2\x22\xbe\xd1\x1f\xb2\xbc\x14\xab\x16\x35\xe9\x7a\xf6\x32\x62\x7a\x4c\x44\xdf\x00\x00\x00\xff\xff\x07\x15\x44\x7b\x8e\x00\x00\x00"

func readmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_readmeTmpl,
		"readme.tmpl",
	)
}

func readmeTmpl() (*asset, error) {
	bytes, err := readmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme.tmpl", size: 142, mode: os.FileMode(0644), modTime: time.Unix(1583485705, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0x93, 0xd9, 0x49, 0x63, 0xdd, 0x1, 0xbf, 0xc2, 0x90, 0x6c, 0xd6, 0x94, 0x31, 0xcd, 0xa0, 0xe2, 0x63, 0x53, 0xef, 0xb5, 0x96, 0x41, 0xce, 0x42, 0x53, 0x68, 0x9, 0xd7, 0x7f, 0x2b, 0x25}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"chi_go_mod.tmpl":                     chi_go_modTmpl,
	"chi_main.tmpl":                       chi_mainTmpl,
	"chi_mirc_main.tmpl":                  chi_mirc_mainTmpl,
	"chi_mirc_routes_site.tmpl":           chi_mirc_routes_siteTmpl,
	"chi_mirc_routes_site_v1.tmpl":        chi_mirc_routes_site_v1Tmpl,
	"chi_mirc_routes_site_v2.tmpl":        chi_mirc_routes_site_v2Tmpl,
	"echo_go_mod.tmpl":                    echo_go_modTmpl,
	"echo_main.tmpl":                      echo_mainTmpl,
	"echo_mirc_main.tmpl":                 echo_mirc_mainTmpl,
	"echo_mirc_routes_site.tmpl":          echo_mirc_routes_siteTmpl,
	"echo_mirc_routes_site_v1.tmpl":       echo_mirc_routes_site_v1Tmpl,
	"echo_mirc_routes_site_v2.tmpl":       echo_mirc_routes_site_v2Tmpl,
	"gin_go_mod.tmpl":                     gin_go_modTmpl,
	"gin_main.tmpl":                       gin_mainTmpl,
	"gin_mirc_main.tmpl":                  gin_mirc_mainTmpl,
	"gin_mirc_routes_site.tmpl":           gin_mirc_routes_siteTmpl,
	"gin_mirc_routes_site_v1.tmpl":        gin_mirc_routes_site_v1Tmpl,
	"gin_mirc_routes_site_v2.tmpl":        gin_mirc_routes_site_v2Tmpl,
	"httprouter_go_mod.tmpl":              httprouter_go_modTmpl,
	"httprouter_main.tmpl":                httprouter_mainTmpl,
	"httprouter_mirc_main.tmpl":           httprouter_mirc_mainTmpl,
	"httprouter_mirc_routes_site.tmpl":    httprouter_mirc_routes_siteTmpl,
	"httprouter_mirc_routes_site_v1.tmpl": httprouter_mirc_routes_site_v1Tmpl,
	"httprouter_mirc_routes_site_v2.tmpl": httprouter_mirc_routes_site_v2Tmpl,
	"iris_go_mod.tmpl":                    iris_go_modTmpl,
	"iris_main.tmpl":                      iris_mainTmpl,
	"iris_mirc_main.tmpl":                 iris_mirc_mainTmpl,
	"iris_mirc_routes_site.tmpl":          iris_mirc_routes_siteTmpl,
	"iris_mirc_routes_site_v1.tmpl":       iris_mirc_routes_site_v1Tmpl,
	"iris_mirc_routes_site_v2.tmpl":       iris_mirc_routes_site_v2Tmpl,
	"macaron_go_mod.tmpl":                 macaron_go_modTmpl,
	"macaron_main.tmpl":                   macaron_mainTmpl,
	"macaron_mirc_main.tmpl":              macaron_mirc_mainTmpl,
	"macaron_mirc_routes_site.tmpl":       macaron_mirc_routes_siteTmpl,
	"macaron_mirc_routes_site_v1.tmpl":    macaron_mirc_routes_site_v1Tmpl,
	"macaron_mirc_routes_site_v2.tmpl":    macaron_mirc_routes_site_v2Tmpl,
	"makefile.tmpl":                       makefileTmpl,
	"mux_go_mod.tmpl":                     mux_go_modTmpl,
	"mux_main.tmpl":                       mux_mainTmpl,
	"mux_mirc_main.tmpl":                  mux_mirc_mainTmpl,
	"mux_mirc_routes_site.tmpl":           mux_mirc_routes_siteTmpl,
	"mux_mirc_routes_site_v1.tmpl":        mux_mirc_routes_site_v1Tmpl,
	"mux_mirc_routes_site_v2.tmpl":        mux_mirc_routes_site_v2Tmpl,
	"readme.tmpl":                         readmeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"chi_go_mod.tmpl":                     {chi_go_modTmpl, map[string]*bintree{}},
	"chi_main.tmpl":                       {chi_mainTmpl, map[string]*bintree{}},
	"chi_mirc_main.tmpl":                  {chi_mirc_mainTmpl, map[string]*bintree{}},
	"chi_mirc_routes_site.tmpl":           {chi_mirc_routes_siteTmpl, map[string]*bintree{}},
	"chi_mirc_routes_site_v1.tmpl":        {chi_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"chi_mirc_routes_site_v2.tmpl":        {chi_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"echo_go_mod.tmpl":                    {echo_go_modTmpl, map[string]*bintree{}},
	"echo_main.tmpl":                      {echo_mainTmpl, map[string]*bintree{}},
	"echo_mirc_main.tmpl":                 {echo_mirc_mainTmpl, map[string]*bintree{}},
	"echo_mirc_routes_site.tmpl":          {echo_mirc_routes_siteTmpl, map[string]*bintree{}},
	"echo_mirc_routes_site_v1.tmpl":       {echo_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"echo_mirc_routes_site_v2.tmpl":       {echo_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"gin_go_mod.tmpl":                     {gin_go_modTmpl, map[string]*bintree{}},
	"gin_main.tmpl":                       {gin_mainTmpl, map[string]*bintree{}},
	"gin_mirc_main.tmpl":                  {gin_mirc_mainTmpl, map[string]*bintree{}},
	"gin_mirc_routes_site.tmpl":           {gin_mirc_routes_siteTmpl, map[string]*bintree{}},
	"gin_mirc_routes_site_v1.tmpl":        {gin_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"gin_mirc_routes_site_v2.tmpl":        {gin_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"httprouter_go_mod.tmpl":              {httprouter_go_modTmpl, map[string]*bintree{}},
	"httprouter_main.tmpl":                {httprouter_mainTmpl, map[string]*bintree{}},
	"httprouter_mirc_main.tmpl":           {httprouter_mirc_mainTmpl, map[string]*bintree{}},
	"httprouter_mirc_routes_site.tmpl":    {httprouter_mirc_routes_siteTmpl, map[string]*bintree{}},
	"httprouter_mirc_routes_site_v1.tmpl": {httprouter_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"httprouter_mirc_routes_site_v2.tmpl": {httprouter_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"iris_go_mod.tmpl":                    {iris_go_modTmpl, map[string]*bintree{}},
	"iris_main.tmpl":                      {iris_mainTmpl, map[string]*bintree{}},
	"iris_mirc_main.tmpl":                 {iris_mirc_mainTmpl, map[string]*bintree{}},
	"iris_mirc_routes_site.tmpl":          {iris_mirc_routes_siteTmpl, map[string]*bintree{}},
	"iris_mirc_routes_site_v1.tmpl":       {iris_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"iris_mirc_routes_site_v2.tmpl":       {iris_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"macaron_go_mod.tmpl":                 {macaron_go_modTmpl, map[string]*bintree{}},
	"macaron_main.tmpl":                   {macaron_mainTmpl, map[string]*bintree{}},
	"macaron_mirc_main.tmpl":              {macaron_mirc_mainTmpl, map[string]*bintree{}},
	"macaron_mirc_routes_site.tmpl":       {macaron_mirc_routes_siteTmpl, map[string]*bintree{}},
	"macaron_mirc_routes_site_v1.tmpl":    {macaron_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"macaron_mirc_routes_site_v2.tmpl":    {macaron_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"makefile.tmpl":                       {makefileTmpl, map[string]*bintree{}},
	"mux_go_mod.tmpl":                     {mux_go_modTmpl, map[string]*bintree{}},
	"mux_main.tmpl":                       {mux_mainTmpl, map[string]*bintree{}},
	"mux_mirc_main.tmpl":                  {mux_mirc_mainTmpl, map[string]*bintree{}},
	"mux_mirc_routes_site.tmpl":           {mux_mirc_routes_siteTmpl, map[string]*bintree{}},
	"mux_mirc_routes_site_v1.tmpl":        {mux_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"mux_mirc_routes_site_v2.tmpl":        {mux_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"readme.tmpl":                         {readmeTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
