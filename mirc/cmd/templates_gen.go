// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/chi_go_mod.tmpl (125B)
// templates/chi_main.tmpl (372B)
// templates/chi_mirc_main.tmpl (576B)
// templates/chi_mirc_routes_site.tmpl (328B)
// templates/chi_mirc_routes_site_v1.tmpl (361B)
// templates/chi_mirc_routes_site_v2.tmpl (370B)
// templates/echo_go_mod.tmpl (119B)
// templates/echo_main.tmpl (344B)
// templates/echo_mirc_main.tmpl (577B)
// templates/echo_mirc_routes_site.tmpl (316B)
// templates/echo_mirc_routes_site_v1.tmpl (349B)
// templates/echo_mirc_routes_site_v2.tmpl (358B)
// templates/gin_go_mod.tmpl (115B)
// templates/gin_main.tmpl (335B)
// templates/gin_mirc_main.tmpl (576B)
// templates/gin_mirc_routes_site.tmpl (316B)
// templates/gin_mirc_routes_site_v1.tmpl (349B)
// templates/gin_mirc_routes_site_v2.tmpl (359B)
// templates/httprouter_go_mod.tmpl (126B)
// templates/httprouter_main.tmpl (402B)
// templates/httprouter_mirc_main.tmpl (583B)
// templates/httprouter_mirc_routes_site.tmpl (316B)
// templates/httprouter_mirc_routes_site_v1.tmpl (349B)
// templates/httprouter_mirc_routes_site_v2.tmpl (358B)
// templates/iris_go_mod.tmpl (119B)
// templates/iris_main.tmpl (372B)
// templates/iris_mirc_main.tmpl (577B)
// templates/iris_mirc_routes_site.tmpl (323B)
// templates/iris_mirc_routes_site_v1.tmpl (356B)
// templates/iris_mirc_routes_site_v2.tmpl (365B)
// templates/macaron_go_mod.tmpl (110B)
// templates/macaron_main.tmpl (282B)
// templates/macaron_mirc_main.tmpl (580B)
// templates/macaron_mirc_routes_site.tmpl (316B)
// templates/macaron_mirc_routes_site_v1.tmpl (349B)
// templates/macaron_mirc_routes_site_v2.tmpl (358B)
// templates/makefile.tmpl (307B)
// templates/mux_go_mod.tmpl (113B)
// templates/mux_main.tmpl (374B)
// templates/mux_mirc_main.tmpl (576B)
// templates/mux_mirc_routes_site.tmpl (392B)
// templates/mux_mirc_routes_site_v1.tmpl (425B)
// templates/mux_mirc_routes_site_v2.tmpl (434B)
// templates/readme.tmpl (142B)

package cmd

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _chi_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x41\x0e\xc2\x20\x10\x05\xd0\xfd\x9c\xe2\x2f\x35\xc6\xc1\x52\xcf\x61\xbc\x02\x45\x02\x13\x19\x47\x49\x21\x31\x4d\xef\xee\xde\xfd\x53\x7b\xf4\x9a\xb0\x6d\xe0\xfb\x33\xdf\x82\x26\xec\x3b\x51\x36\x4c\x3c\x79\xa2\x96\x3e\x5d\x5a\xc2\x81\x00\x20\xcb\x5a\xfa\xc2\xd1\xd4\x85\x2a\xfa\x75\x2a\xcd\x0d\x8f\xe1\x79\x66\xff\x4f\xb2\x9d\x63\x11\x17\x8b\x60\x5c\xf9\xc2\xf3\x49\x5e\xd1\xf4\x1d\x56\x59\x6a\xa2\x23\xfd\x02\x00\x00\xff\xff\x89\x70\xcb\x34\x7d\x00\x00\x00"

func chi_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_go_modTmpl,
		"chi_go_mod.tmpl",
	)
}

func chi_go_modTmpl() (*asset, error) {
	bytes, err := chi_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_go_mod.tmpl", size: 125, mode: os.FileMode(0644), modTime: time.Unix(1585645334, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4d, 0x78, 0x38, 0x89, 0xca, 0x4c, 0xd4, 0x1, 0xee, 0x86, 0x26, 0xcf, 0xac, 0x97, 0x49, 0x8c, 0x7, 0x96, 0x26, 0xe1, 0x5e, 0xe5, 0xf2, 0x86, 0x3a, 0x25, 0xf8, 0xce, 0xd5, 0xe0, 0xb2, 0xd8}}
	return a, nil
}

var _chi_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xbd\x4e\xc4\x30\x10\x84\xfb\x7d\x8a\xc5\x95\x23\x41\x7c\xe5\xe9\xd0\x15\x48\x88\x0a\x71\x12\xf0\x02\xc6\xec\x39\x2b\x12\x3b\xda\x6c\xa0\x40\x79\x77\x64\x27\xa7\x2b\x70\xe3\x9f\xd9\x19\xcf\x37\xfa\xf0\xe5\x23\xe1\xe0\x39\x01\xf0\x30\x66\x51\xb4\x80\x88\x68\xfa\x1c\xcd\x7a\x4a\xa4\xae\x53\x1d\x0d\xac\xf7\xc8\xda\xcd\x1f\x6d\xc8\x83\x8b\xf9\x2e\x74\xec\x42\xc7\x06\x1a\x80\xf3\x9c\x42\x0d\xb3\x0d\xfe\xd6\x61\xc1\xc3\x11\x43\xc7\xed\x0b\xfd\xbc\xe6\x59\x49\x6c\xb3\xc6\x38\x87\x42\x91\x27\x25\xc1\x89\xe4\xdb\x27\x9d\x50\x73\x19\x5e\x9d\x9b\xf8\xb6\x69\x56\xae\xc6\x49\xbd\xe8\xc5\x55\x77\x0e\x54\x45\x3e\x23\x49\xfd\xb4\x34\x6e\x9f\x4b\x44\x7a\x48\x9f\x25\x85\xac\x39\xec\x77\xfb\x9d\xb9\x45\x69\xee\xeb\xdc\xcd\x11\x13\xf7\x5b\xd7\xb2\xfa\x1c\xdb\x27\xaf\xbe\xb7\x24\xd2\xd4\xe7\x05\x96\x8d\xec\x7f\xa5\x8a\xb6\x72\x5d\x88\x9d\xc3\xf7\xd3\xe3\xe9\x70\xa5\x93\xa2\x57\x36\x81\x05\xfe\x02\x00\x00\xff\xff\x02\x8d\x70\x72\x74\x01\x00\x00"

func chi_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mainTmpl,
		"chi_main.tmpl",
	)
}

func chi_mainTmpl() (*asset, error) {
	bytes, err := chi_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_main.tmpl", size: 372, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0x7b, 0xbd, 0xf2, 0x7c, 0x50, 0x17, 0xfb, 0x58, 0x6e, 0xc5, 0xb6, 0xca, 0x6f, 0xce, 0x60, 0x21, 0x3f, 0xae, 0xed, 0x88, 0xec, 0xd8, 0x81, 0x7c, 0xe7, 0x19, 0xdd, 0x34, 0xbd, 0xcb, 0xbe}}
	return a, nil
}

var _chi_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xcd\x4e\xeb\x30\x10\x85\xf7\x7e\x8a\xb9\x5e\x39\xd2\x55\x2c\xba\x2c\xea\x0a\x09\xc4\x02\xa8\xe8\x03\x20\x93\x4e\x9d\x51\x9d\x71\x34\x71\x2a\xa1\x2a\xef\x8e\xec\x94\x9f\xb2\x28\x64\x11\x79\x66\x3e\x1f\x9f\x33\xbd\x6b\xf6\xce\x23\x74\x8e\x58\x29\xea\xfa\x28\x09\x8c\x02\x00\xd0\x21\x7a\xad\xe6\xa3\xa7\xd4\x8e\xaf\x75\x13\x3b\xeb\x02\x75\x6f\xb6\x23\xb1\x87\x85\x6d\xa2\xa0\xbe\x8c\x20\x7b\x62\x3c\x09\xbd\x80\x3e\x1e\xa1\x5e\xef\xfd\xa3\xeb\x10\xa6\x29\x53\x8d\x95\x38\x26\x1c\xf4\xef\x88\x3d\x5c\xfd\x89\x5a\x68\x55\x29\x65\xad\x8f\x4b\x8f\x8c\xe2\x12\x82\x8f\x20\x23\x97\xa4\xb5\x8f\x6a\x37\x72\x53\x0a\x53\xc1\xb1\x68\x86\xe8\xeb\xb5\x10\xa7\xc0\x46\x7f\x5e\x6b\xe2\x16\x61\x48\x4e\x92\xae\x0a\x16\xfb\x34\xc0\x72\x05\x39\x7b\xfd\xd4\x27\x8a\x3c\xcc\x02\xf9\x2b\xdd\xe7\x91\x1f\xe2\x16\x4d\x29\xee\x79\x83\x42\x2e\xe4\x4e\xf5\xff\x1c\xbc\x9b\x5f\x89\x92\x53\x98\xf3\xd6\x4d\x4b\x3f\xf1\x0d\xf1\x7e\xed\x52\x6b\x74\x6d\x3d\xb2\x3e\xcd\xa7\xf2\xa7\x1d\xa0\x48\x76\x36\xaf\xfc\x43\x09\x4d\x76\x5c\x5d\x97\xe9\xbf\x15\x30\x05\xf8\xf2\x9b\x43\xdf\xba\xe4\x82\x41\x91\xea\x9b\xdc\x85\x6d\xec\x88\x69\x68\x75\xa5\x26\xf5\x1e\x00\x00\xff\xff\x37\xed\x09\xba\x40\x02\x00\x00"

func chi_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mirc_mainTmpl,
		"chi_mirc_main.tmpl",
	)
}

func chi_mirc_mainTmpl() (*asset, error) {
	bytes, err := chi_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_mirc_main.tmpl", size: 576, mode: os.FileMode(0644), modTime: time.Unix(1585301779, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0x6c, 0xeb, 0x3, 0xe6, 0xc4, 0x9c, 0x23, 0x82, 0x2, 0x42, 0x8d, 0xd, 0x89, 0x26, 0x75, 0x92, 0x94, 0x8e, 0x89, 0x55, 0x7f, 0x95, 0x72, 0x41, 0x49, 0x2, 0x85, 0x1e, 0xc0, 0xe, 0x8f}}
	return a, nil
}

var _chi_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8c\x41\x4b\xc4\x40\x0c\x85\xef\xf9\x15\x61\x4e\x2d\xb2\x1b\xf1\xe6\xde\x16\x11\xf1\xec\x51\x84\x8e\xd3\xb4\x1b\xdc\x99\x96\x34\x55\x4b\xe9\x7f\x97\xd9\x1d\x4f\x82\x97\xf0\x1e\xdf\x97\x37\xfa\xf0\xe1\x7b\x46\x1d\x66\xe3\x09\x40\xe2\x38\xa8\x61\x05\x88\x88\xae\x17\x3b\xcd\xef\xfb\x30\x44\xf2\x67\x89\x0b\x45\x51\xfa\xbc\x73\xff\x52\xe2\xd4\x4b\x62\x07\x35\x40\x37\xa7\x80\x92\xc4\xaa\x1a\xd7\xcb\xd7\x15\xee\x8f\x6d\xfb\x98\x4c\x97\x2a\xf1\x57\xf5\x22\xc6\x75\x0d\x1b\x00\x11\xe6\x82\x53\x3e\x92\x8c\xb5\xf3\x21\xa7\x6e\x00\x5b\x46\x2e\xd4\x74\x0e\x56\x06\x1f\x4e\x5e\x52\x0e\x51\x74\x7f\x2d\x4d\x14\x3d\xb8\x9d\x6b\x2e\xc2\x73\x6a\xf9\xfb\x57\x78\x62\x43\x2c\x02\x49\x26\x54\xb4\xa3\x9a\x84\x33\x4f\x7f\x35\x5f\x08\xad\xc1\x1b\xf7\x83\x2e\x1b\xad\xd2\x1e\x5e\x6f\x77\xf7\x6f\x37\x9b\x6b\x60\x83\x9f\x00\x00\x00\xff\xff\x6a\x3e\xef\x62\x48\x01\x00\x00"

func chi_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mirc_routes_siteTmpl,
		"chi_mirc_routes_site.tmpl",
	)
}

func chi_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := chi_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_mirc_routes_site.tmpl", size: 328, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0x7a, 0xfa, 0x40, 0xf4, 0x9a, 0xce, 0x1d, 0x19, 0xa4, 0x35, 0xff, 0xbd, 0x80, 0x57, 0xb5, 0xa5, 0x45, 0x85, 0xf7, 0x40, 0x6f, 0xcf, 0x80, 0xdb, 0x6b, 0x57, 0x0, 0x75, 0x26, 0x7d, 0xdf}}
	return a, nil
}

var _chi_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\xc1\x4a\xc4\x30\x10\xc6\xf1\xfb\x3c\xc5\x90\x53\x8b\xec\xc6\x7a\x73\x6f\x8b\x88\x78\xf6\x28\x42\x63\x3a\xed\x0e\x6e\x92\x32\x3b\xad\x96\xd2\x77\x97\x6e\xa3\x17\xc1\x4b\xc8\xc7\xff\x97\xf4\xce\x7f\xb8\x8e\x70\xac\x00\x38\xf4\x49\x14\x0b\x40\x44\x34\x1d\xeb\x69\x78\xdf\xfb\x14\xac\x3b\x73\x98\x6c\x60\xb1\xe3\x9d\xf9\xb7\x5a\x8a\x1d\x47\x32\x50\x02\xb4\x43\xf4\xc8\x91\xb5\x28\x71\xbe\xbe\xda\xe2\xfe\xd8\x34\x8f\x51\x65\x2a\x22\x7d\x16\x2f\xac\x54\x96\xb0\x00\x58\x8b\xeb\xc0\xcb\x7a\x8c\x15\x72\x54\x92\xd6\x79\x42\x8e\x6d\x02\x9d\x7a\xca\x40\x65\xf0\x9a\xff\x7c\x38\x39\x8e\xeb\x25\xb0\xec\xb7\x51\x07\x96\x83\xd9\x99\xfa\x0a\x9e\x24\x0d\xfd\x0f\xd8\xc6\x06\xc6\x2a\x8b\xe7\xd8\xd0\xd7\xaf\x20\x45\xcc\xc2\xf2\x5a\x6c\x66\x47\x51\xf6\x67\xba\xfc\x65\x2e\x17\x3b\x7b\xa7\xd4\x25\x99\x16\x3b\x73\x73\x78\xbd\xdd\xdd\xbf\xdd\x2c\xa6\x86\x05\xbe\x03\x00\x00\xff\xff\x4e\x22\x4a\x8d\x69\x01\x00\x00"

func chi_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mirc_routes_site_v1Tmpl,
		"chi_mirc_routes_site_v1.tmpl",
	)
}

func chi_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := chi_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_mirc_routes_site_v1.tmpl", size: 361, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc3, 0xa6, 0x6b, 0xa9, 0x82, 0xcf, 0xc9, 0x5, 0x26, 0x19, 0x28, 0x7e, 0x49, 0xfd, 0x6e, 0x51, 0x91, 0x23, 0xf3, 0xe4, 0x35, 0x99, 0xbd, 0x94, 0xa6, 0x47, 0x72, 0x41, 0x28, 0x2b, 0x11, 0xaa}}
	return a, nil
}

var _chi_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x41\x4b\xc4\x30\x10\x46\xef\xf3\x2b\x86\x9e\x5a\xc4\x8e\xf4\xe6\xde\x16\x11\xf1\xec\x51\x84\x8d\xe9\xb4\x0e\x6e\xd2\x32\x3b\xad\x96\xd2\xff\x2e\xd9\x8d\x5e\x16\xbc\x84\x7c\xbc\xf7\x92\xd1\xf9\x4f\xd7\x33\xce\x0d\x80\x84\x71\x50\xc3\x12\x10\x11\x8b\x5e\xec\x63\x7a\xaf\xfd\x10\xc8\x1d\x25\x2c\x14\x44\x69\x6e\x8a\x7f\x29\x71\xec\x25\x72\x01\x15\x40\x37\x45\x8f\x12\xc5\xca\x0a\xd7\x73\x75\x81\xf5\xbe\x6d\x1f\xa3\xe9\x52\x46\xfe\x2a\x5f\xc4\xb8\xaa\x60\x03\x20\xc2\x34\xf0\x94\x8e\xb9\x41\x89\xc6\xda\x39\xcf\x28\xb1\x1b\xc0\x96\x91\xb3\x60\x3a\x79\xcb\x6f\x3e\xe9\x30\x8d\xe9\x12\x44\xeb\xcb\x38\x04\xd1\x5d\x31\x37\xc5\xe1\x6c\x3c\xc7\x96\xbf\xff\x0c\x36\xc4\x6c\x90\x24\x42\x59\xdb\xab\x89\x3f\xf2\xe9\x5a\x73\x99\xd0\xea\x9d\x71\x3f\xe8\xb2\xd1\x2a\xed\xee\xf5\xee\xf6\xfe\xed\x66\xcb\xfd\x43\x66\xd7\xfd\x6f\x95\x7e\xda\xe0\x27\x00\x00\xff\xff\x2d\xd0\xa5\xb3\x72\x01\x00\x00"

func chi_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_chi_mirc_routes_site_v2Tmpl,
		"chi_mirc_routes_site_v2.tmpl",
	)
}

func chi_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := chi_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chi_mirc_routes_site_v2.tmpl", size: 370, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0x23, 0x3b, 0xdb, 0x28, 0x67, 0x84, 0xff, 0x6, 0xe8, 0xa4, 0x85, 0x35, 0x2e, 0x34, 0xd7, 0x14, 0x2c, 0x7f, 0xef, 0x3e, 0x1d, 0x68, 0x86, 0x46, 0x53, 0xbc, 0xcf, 0xa4, 0x66, 0xa2, 0x57}}
	return a, nil
}

var _echo_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x41\x0e\xc2\x20\x10\x05\xd0\xfd\x9c\xe2\x2f\x75\x33\x13\xb0\x5e\xc3\x78\x05\x8a\x13\x4a\xca\x84\x88\x85\xc4\x34\xdc\xdd\xbd\xfb\x67\xf5\xd5\x8b\xe2\x3c\xc1\xcf\x3d\x3d\x82\x29\xe6\x24\x4a\x15\x8e\x9d\x27\x6a\xfa\xee\xb9\x29\x2e\x04\x00\x29\x1f\x5b\x5f\x39\x56\x93\x50\xb2\x7d\xc5\x72\x93\xe1\x31\x3c\xdf\xd8\xff\x93\x12\xd6\xcf\x11\xe2\x2e\x1a\xb7\x2a\x63\xc1\x58\xd8\xb1\xbb\xd3\x95\x7e\x01\x00\x00\xff\xff\x35\xef\x48\x5a\x77\x00\x00\x00"

func echo_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_go_modTmpl,
		"echo_go_mod.tmpl",
	)
}

func echo_go_modTmpl() (*asset, error) {
	bytes, err := echo_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_go_mod.tmpl", size: 119, mode: os.FileMode(0644), modTime: time.Unix(1585645334, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x73, 0x4, 0xa0, 0x1c, 0x80, 0x23, 0xd2, 0x51, 0x50, 0xfe, 0x43, 0xb8, 0xbf, 0xf1, 0x32, 0xe6, 0x69, 0xc7, 0xf, 0x54, 0x75, 0xff, 0x1f, 0x13, 0xe1, 0xdd, 0xb6, 0x51, 0x32, 0x69, 0x80, 0xe8}}
	return a, nil
}

var _echo_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xb1\x6e\xc3\x30\x0c\x44\x77\x7e\x05\xeb\x49\xee\x60\x79\xc8\xe4\x22\x5b\xdb\xb1\x19\xd2\x1f\x50\x04\x46\x16\x22\x5b\x01\x45\xa7\x43\xe1\x7f\x2f\x4c\xdb\xc8\x50\x2d\x12\x74\x77\xe4\xbd\xbb\xf3\x37\x17\x08\x07\x17\x47\x80\x38\xdc\x33\x0b\x1a\x40\x44\xac\x52\x0e\x15\xac\xcf\x10\xa5\x9f\x2e\x8d\xcf\x83\x4d\xee\x52\xc4\xf9\x9b\x25\xdf\x67\xfb\x38\x54\x50\x03\x5c\xa7\xd1\xeb\x0c\x53\xe3\xaf\x46\x08\xbb\x23\x2e\x96\xe6\x8b\x7e\x4c\xbd\xce\xb1\x16\x99\x42\x2c\x42\x8c\x85\xf8\xe1\x46\x29\x28\x59\x7d\x6a\xd8\xd5\xf3\x26\x1a\x7a\x26\x8b\x38\x96\x3d\xa6\x77\xf4\xa4\x62\xbc\x22\x31\xeb\xc2\xe6\xbc\xb8\x4c\xd5\x1d\xda\xb6\xad\xea\x37\x15\x5e\x8e\x38\xc6\xb4\x15\x5b\x4e\xca\xa1\xf9\x74\xe2\x92\x21\xe6\x5a\xbf\x67\x98\x37\x8c\xff\x1d\xf0\x55\x41\x3e\x7c\x9f\x77\x3c\x6b\xf1\xfb\xf4\x7e\xea\x9e\x3c\x9c\x27\xa1\x95\x06\x66\xf8\x0b\x00\x00\xff\xff\xde\xad\x0e\xa4\x58\x01\x00\x00"

func echo_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mainTmpl,
		"echo_main.tmpl",
	)
}

func echo_mainTmpl() (*asset, error) {
	bytes, err := echo_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_main.tmpl", size: 344, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0xb1, 0xa2, 0xfb, 0x2b, 0x87, 0x65, 0xbe, 0x59, 0x5b, 0x8e, 0xf5, 0x8a, 0x27, 0xd5, 0x7, 0x4e, 0x9c, 0x67, 0x25, 0x91, 0x78, 0xd5, 0x7a, 0x17, 0x6a, 0xc0, 0x17, 0xc, 0xf6, 0x31, 0xe3}}
	return a, nil
}

var _echo_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xcd\x4e\xeb\x30\x10\x85\xf7\x7e\x8a\xb9\x5e\x39\xd2\x55\x2c\xba\x2c\xea\x12\x10\x0b\xa0\xa2\x0f\x80\x4c\x3a\x75\xac\x3a\x33\xd1\xc4\xa9\x84\xaa\xbc\x3b\xb2\x53\x7e\xca\xa2\x90\x45\xe4\x99\xf9\x7c\x7c\xce\xf4\xae\xd9\x3b\x8f\xd0\xb9\x40\x4a\x85\xae\x67\x49\x60\x14\x00\x80\x8e\xec\xb5\x9a\x8f\x3e\xa4\x76\x7c\xad\x1b\xee\xac\x8b\xa1\x7b\xb3\x5d\x10\x7b\x58\xd8\x86\x05\xf5\x65\x04\xc9\x07\xc2\x93\xd0\x0b\xe8\xe3\x11\xea\xf5\xde\x3f\xba\x0e\x61\x9a\x32\xd5\x58\xe1\x31\xe1\xa0\x7f\x47\xec\xe1\xea\x4f\xd4\x42\xab\x4a\x29\x6b\x3d\x2f\x3d\x12\x8a\x4b\x08\x9e\x41\x46\x2a\x49\x6b\xcf\x6a\x37\x52\x53\x0a\x53\xc1\xb1\x68\x46\xf6\xf5\x5a\x02\xa5\x48\x46\x7f\x5e\x6b\x78\x8b\x30\x24\x27\x49\x57\x05\xe3\x3e\x0d\xb0\x5c\x41\xce\x5e\x3f\xf5\x29\x30\x0d\xb3\x40\xfe\x4a\xf7\x79\xa4\x07\xde\xa2\x29\xc5\x3d\x6d\x50\x82\x8b\xb9\x53\xfd\x3f\x07\xef\xe6\x57\x58\x72\x0a\x73\xde\xba\x69\x5a\xfe\xc9\x6f\x02\xed\xd7\x2e\xb5\x46\xd7\xd6\x23\xe9\xd3\x7c\x2a\xff\xb0\x03\x14\xc9\xd6\xe6\x9d\x7f\x48\xa1\xc9\x96\xab\xeb\x32\xfd\xb7\x02\x0a\x11\xbe\x0c\xe7\xd4\xb7\x2e\xb9\x68\x50\xa4\xfa\x26\x77\x61\x1d\xbb\x40\x61\x68\x75\xa5\x26\xf5\x1e\x00\x00\xff\xff\xc4\xfd\xd4\xd3\x41\x02\x00\x00"

func echo_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mirc_mainTmpl,
		"echo_mirc_main.tmpl",
	)
}

func echo_mirc_mainTmpl() (*asset, error) {
	bytes, err := echo_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_mirc_main.tmpl", size: 577, mode: os.FileMode(0644), modTime: time.Unix(1585301779, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0x3e, 0x36, 0xac, 0xde, 0x2a, 0x7d, 0xc1, 0x81, 0x38, 0x91, 0x61, 0x27, 0xd2, 0x87, 0xfd, 0x19, 0x6b, 0xe2, 0x46, 0x6a, 0x16, 0x19, 0x8d, 0xb7, 0xbb, 0x15, 0x12, 0xf8, 0xe9, 0xc1, 0x8e}}
	return a, nil
}

var _echo_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8c\xb1\x6a\xec\x40\x0c\x45\x7b\x7d\x85\x98\xca\x2e\x9e\x05\xaf\xdc\x6e\x09\x21\xa4\xce\x0f\xec\x64\x2c\x7b\x45\x76\x34\x46\x96\x93\x98\xb0\xff\x1e\x66\x77\x52\x05\xd2\x88\x7b\x39\xe7\x6a\x89\xe9\x2d\xce\x8c\x56\x36\xe7\x15\x40\xf2\x52\xcc\xb1\x03\x44\xc4\x30\x8b\x9f\xb7\xd7\x21\x95\x4c\xf1\x22\x79\xa7\x2c\x46\xef\xff\xc3\x9f\x94\x58\x67\x51\x0e\xd0\x03\x4c\x9b\x26\x14\x15\xef\x7a\xfc\xba\xad\xee\x70\x38\x8e\xe3\xa3\xba\xed\x9d\xf2\x47\xf7\x22\xce\x7d\x0f\x57\x00\x22\xac\x05\xd7\x7a\x44\x9d\x6d\x8a\xa9\xa6\xa9\x80\xef\x0b\x37\xea\xb6\x25\x6f\x0f\x1f\xce\x51\xb4\x86\x2c\x36\xdc\xcb\x29\x8b\x1d\xc2\xbf\x70\xba\x09\xcf\x3a\xf2\xe7\x8f\xf0\xc4\x8e\xd8\x04\x92\x4a\xa8\x69\x47\x73\x49\x17\x5e\x7f\x6b\xb1\x11\x3a\xa4\xe8\x3c\x17\xdb\xeb\xe6\x0a\xdf\x01\x00\x00\xff\xff\xcc\x2d\x14\xcc\x3c\x01\x00\x00"

func echo_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mirc_routes_siteTmpl,
		"echo_mirc_routes_site.tmpl",
	)
}

func echo_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := echo_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_mirc_routes_site.tmpl", size: 316, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0x29, 0xe4, 0xfc, 0x25, 0x86, 0xb8, 0x52, 0xa3, 0x2d, 0xd1, 0x31, 0x36, 0xc1, 0x7e, 0x59, 0xdf, 0x65, 0x39, 0x63, 0x2, 0x5b, 0xf3, 0x2d, 0x15, 0x8e, 0xd2, 0x28, 0xb0, 0x97, 0x2d, 0x35}}
	return a, nil
}

var _echo_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x31\x6e\xf3\x30\x0c\x05\xe0\x9d\xa7\x20\x34\xd9\xc3\x6f\xc1\xff\x98\x2d\x28\x8a\xa2\x73\x2f\x10\x55\xa6\x1d\xa2\x11\x65\x30\xb4\x5b\xa3\xc8\xdd\x0b\xc5\x6a\x97\x02\x5d\x04\x3d\xbc\xef\x71\x0e\xf1\x2d\x4c\x84\x6b\x0f\xc0\x69\xce\x6a\xd8\x00\x22\xa2\x9b\xd8\xce\xcb\x6b\x17\x73\xf2\xe1\xc2\x69\xf3\x89\xd5\xaf\xff\xdd\x9f\xad\x27\x99\x58\xc8\x41\x0b\x30\x2e\x12\x91\x85\xad\x69\xf1\xf3\xbe\xda\xcb\xee\x38\x0c\x8f\x62\xba\x35\x42\xef\xcd\x0b\x1b\xb5\x2d\xdc\x00\xbc\xc7\x12\xf0\x5a\x9e\xb5\x47\x16\x23\x1d\x43\x24\x64\x19\x33\xd8\x36\x53\x05\xa6\x4b\xb4\x7a\xf3\xe1\x1c\x58\xca\x27\xb1\x76\x7b\x38\x25\xd6\x83\xfb\xe7\x4e\x77\xf0\xa4\x79\x99\xbf\xc1\x1e\x76\xb0\xf6\x55\x3c\xcb\x40\x1f\x3f\x82\x0c\xb1\x0a\xcf\xa5\xf1\x95\x1d\xd5\x38\x5e\xe8\xfa\x9b\x85\xda\xf8\x43\x0c\x46\x53\xd6\xad\x6c\x6e\xf0\x15\x00\x00\xff\xff\xf3\x95\x67\x4d\x5d\x01\x00\x00"

func echo_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mirc_routes_site_v1Tmpl,
		"echo_mirc_routes_site_v1.tmpl",
	)
}

func echo_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := echo_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_mirc_routes_site_v1.tmpl", size: 349, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x8d, 0xaf, 0x66, 0x41, 0x48, 0x83, 0xfb, 0xe1, 0x89, 0x44, 0x2a, 0xd2, 0x28, 0xd, 0xc2, 0xe9, 0xa, 0x24, 0xd5, 0xa, 0xe9, 0xed, 0x86, 0xa2, 0xa4, 0xba, 0x75, 0x94, 0xb8, 0xb, 0xb}}
	return a, nil
}

var _echo_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\xc1\x6a\xc3\x30\x0c\x06\xe0\xbb\x9e\x42\xf8\x94\x5c\x2a\xc8\xb1\xb7\x32\xc6\xd8\x79\x2f\x50\xcf\x51\x32\xb1\x5a\x0e\xaa\x92\x2d\x8c\xbe\xfb\x48\xeb\x8d\x41\x61\x17\xe3\x9f\xff\xfb\x35\xc5\xf4\x1e\x47\xc6\xa5\x03\x90\x3c\x15\x73\x6c\x00\x11\x31\x8c\xe2\x6f\xf3\xeb\x2e\x95\x4c\xf1\x24\x79\xa5\x2c\x46\x4b\x17\xfe\x6d\x89\x75\x14\xe5\x00\x2d\xc0\x30\x6b\x42\x51\xf1\xa6\xc5\xaf\xeb\xea\x56\xee\x0e\x7d\xff\xa8\x6e\x6b\xa3\xfc\xd1\xbc\x88\x73\xdb\xc2\x05\x80\x08\xb7\x80\xe7\xed\x59\x3a\x14\x75\xb6\x21\x26\x46\xd1\xa1\x80\xaf\x13\x57\xe0\x36\x27\xaf\x37\x9f\xac\xcc\xd3\xf6\xc9\x62\xbb\x5b\x38\x66\xb1\x7d\x58\xba\x70\xbc\x8a\x67\xed\xf9\xf3\x57\xb0\x23\x56\x41\xb2\x35\x54\xd9\xc1\x5c\xd2\x89\xcf\xf7\x2c\xd6\x86\xf6\x29\x3a\x8f\xc5\xd6\x9f\xcd\x43\xcd\xf7\x9b\xbf\xf2\x02\xdf\x01\x00\x00\xff\xff\x2c\x0c\xd5\xb0\x66\x01\x00\x00"

func echo_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_echo_mirc_routes_site_v2Tmpl,
		"echo_mirc_routes_site_v2.tmpl",
	)
}

func echo_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := echo_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "echo_mirc_routes_site_v2.tmpl", size: 358, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0x2, 0x21, 0xb6, 0xad, 0x80, 0xee, 0xad, 0x51, 0xf0, 0x30, 0xa9, 0x20, 0x4f, 0x8, 0x22, 0x74, 0x6e, 0x5c, 0x2a, 0xbb, 0x9c, 0x26, 0x4, 0x2a, 0xa4, 0xff, 0x41, 0x20, 0xd5, 0x5b, 0x90}}
	return a, nil
}

var _gin_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4e\xf1\x97\xba\x30\xa5\x11\x3c\x86\x78\x85\x71\x2c\x31\x38\x99\x60\xb1\x05\x19\x7a\x77\x71\x3b\xbb\xb7\x78\x1e\x8f\xb6\x14\x6c\x1b\xf8\xf6\xd2\xeb\xe4\x05\x63\x10\x69\x20\x73\x16\xa2\x5a\xde\xcd\x6a\xc1\x81\x00\x40\xed\xf3\x6c\x77\x9e\xc3\xd3\xb4\x98\x7f\x93\x5b\x4d\x5d\xd0\x85\xcf\x2c\xfb\xa2\xb6\x9e\x34\x56\x9b\xff\x42\xcf\x7c\x61\xa1\x23\xfd\x02\x00\x00\xff\xff\x1b\x21\x1e\x09\x73\x00\x00\x00"

func gin_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_go_modTmpl,
		"gin_go_mod.tmpl",
	)
}

func gin_go_modTmpl() (*asset, error) {
	bytes, err := gin_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_go_mod.tmpl", size: 115, mode: os.FileMode(0644), modTime: time.Unix(1585645334, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x82, 0x3a, 0x18, 0x42, 0x6b, 0x6, 0xf1, 0xe9, 0x14, 0x69, 0xd4, 0xf2, 0x27, 0x15, 0x14, 0x9, 0x95, 0x6e, 0xf2, 0xe6, 0x7a, 0x84, 0x62, 0xbf, 0x7e, 0x80, 0x70, 0x85, 0x1c, 0xfa, 0x15, 0x5}}
	return a, nil
}

var _gin_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xbd\x4e\x03\x31\x0c\x80\x77\x3f\x85\xe9\x94\x43\xe2\xb2\x17\x75\x2b\xac\x95\x80\x17\x08\x91\x2f\x58\xe4\x9c\xca\xe7\xb0\xa0\x7b\x77\x94\xf4\x4e\x1d\xc8\x12\x27\x9f\xff\xbe\x6b\x88\xdf\x21\x11\xce\x81\x05\x80\xe7\x6b\x51\x43\x07\x88\x88\x87\x5c\xd2\x01\x6e\x61\x62\xfb\xaa\x9f\x63\x2c\xb3\x4f\x2c\x4f\xa9\x08\xc7\x16\x1d\x60\x00\x98\xaa\xc4\xde\xc0\x0d\xf8\xdb\xf3\x09\x8f\x27\x4c\x2c\xe3\x99\xa6\x50\xb3\xb9\xe1\xd6\xc7\x7b\x54\x4a\xbc\x18\x29\x2e\xa4\x3f\x41\x6c\x41\x2b\x2d\xb5\xf3\x1d\xbe\x6f\xcc\xd1\xbd\x70\xb1\xa0\xb6\x57\xf5\x9b\x23\x75\xc8\x13\x92\x6a\x1b\x49\xe3\x5b\x15\x37\x3c\xf7\xf7\xc3\x09\x85\xf3\xb6\x51\x3b\xb9\xa4\xf1\x35\x58\xc8\x8e\x54\x87\xfe\xbd\xc2\xba\xed\xff\x7f\x34\x3e\x36\x83\x17\x49\x2c\xb4\x8b\x79\x8f\x1f\x97\xf3\xe5\x78\xd7\xd0\x52\x8d\xba\x04\xc1\x0a\x7f\x01\x00\x00\xff\xff\x6e\x6b\xe2\x81\x4f\x01\x00\x00"

func gin_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mainTmpl,
		"gin_main.tmpl",
	)
}

func gin_mainTmpl() (*asset, error) {
	bytes, err := gin_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_main.tmpl", size: 335, mode: os.FileMode(0644), modTime: time.Unix(1585543136, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0xcd, 0xc5, 0x41, 0x5, 0x2a, 0x93, 0x36, 0x4e, 0xb2, 0xd, 0x29, 0xb6, 0x40, 0xf6, 0x49, 0x33, 0x92, 0xda, 0x9b, 0x89, 0xb8, 0x6c, 0xdc, 0x91, 0xd7, 0xe7, 0x77, 0x49, 0x98, 0x4a, 0x18}}
	return a, nil
}

var _gin_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x4d\x6e\xe3\x30\x0c\x85\xf7\x3a\x05\x47\x2b\x19\x18\x58\x98\x2c\x33\xc8\x76\x82\x59\xb4\x0d\x9a\x03\x14\xaa\xc3\x28\x44\x6c\xd2\xa0\xe5\x00\x45\xe0\xbb\x17\x92\xd3\x9f\x74\x91\xd6\x0b\x43\x24\x3f\x3d\xbd\xc7\x3e\x34\xc7\x10\x11\xba\x40\x6c\x0c\x75\xbd\x68\x02\x67\x00\x00\x6c\x2b\xd1\x9a\xf9\x18\x29\x1d\xc6\xe7\xba\x91\xce\x87\x96\xba\x17\xdf\x91\xfa\xd3\xc2\x37\xa2\x68\x6f\x23\xc8\x91\x18\x2f\x42\x4f\x60\xcf\x67\xa8\x37\xc7\x78\x1f\x3a\x84\x69\xca\x54\xe3\x55\xc6\x84\x83\xfd\x1e\xf1\xa7\x3f\x3f\xa2\x16\xd6\x54\xc6\x78\x1f\x65\x19\x91\x51\x43\x42\x88\x02\x3a\x72\x49\x5a\x47\x31\xfb\x91\x9b\x52\xb8\x0a\xce\x45\xb3\x95\x58\x6f\x94\x38\xb5\xec\xec\xfb\xb5\x46\x76\x08\x43\x0a\x9a\x6c\x55\x30\xe9\xd3\x00\xcb\x15\xe4\xec\xf5\x43\x9f\x48\x78\x98\x05\xf2\x57\xba\x8f\x23\xdf\xc9\x0e\x5d\x29\xfe\xf3\x16\x95\x42\x9b\x3b\xd5\xef\x6b\x70\x3d\xbf\x22\x9a\x53\xb8\xeb\xd6\x9a\xf8\x2b\xbe\x25\x3e\x6e\x42\x3a\x38\x5b\xfb\x88\x6c\x2f\xf3\xa9\xfc\x69\x0f\xa8\x9a\x9d\xcd\x2b\x7f\x53\x42\x97\x1d\x57\x7f\xcb\xf4\xd7\x0a\x98\x5a\xf8\xf0\x9b\x43\xff\x0b\x29\xb4\x0e\x55\xab\x4f\x72\x37\xb6\xb1\x27\xa6\xe1\x60\x2b\x33\x99\xd7\x00\x00\x00\xff\xff\x3d\xaa\xcc\x64\x40\x02\x00\x00"

func gin_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_mainTmpl,
		"gin_mirc_main.tmpl",
	)
}

func gin_mirc_mainTmpl() (*asset, error) {
	bytes, err := gin_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_main.tmpl", size: 576, mode: os.FileMode(0644), modTime: time.Unix(1585301779, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0x4c, 0x92, 0x78, 0xc, 0xbe, 0x3c, 0x31, 0xcd, 0x9c, 0xfb, 0x40, 0x58, 0xb6, 0x4, 0x2b, 0x36, 0x37, 0x7, 0x89, 0xb5, 0xef, 0xc8, 0xc8, 0xd5, 0x5f, 0x1c, 0x8b, 0x33, 0xbc, 0xe7, 0x62}}
	return a, nil
}

var _gin_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8c\xb1\x6a\xec\x40\x0c\x45\x7b\x7d\x85\x98\xca\x2e\x9e\x05\xaf\xdc\x6e\x09\x21\xa4\xce\x0f\xec\x64\x2c\x7b\x45\x76\x34\x46\x96\x93\x98\xb0\xff\x1e\x66\x77\x52\x05\xd2\x88\x7b\x39\xe7\x6a\x89\xe9\x2d\xce\x8c\x56\x36\xe7\x15\x40\xf2\x52\xcc\xb1\x03\x44\xc4\x30\x8b\x9f\xb7\xd7\x21\x95\x4c\xf1\x22\x79\xa7\x2c\x46\xef\xff\xc3\x9f\x94\x58\x67\x51\x0e\xd0\x03\x4c\x9b\x26\x14\x15\xef\x7a\xfc\xba\xad\xee\x70\x38\x8e\xe3\xa3\xba\xed\x9d\xf2\x47\xf7\x22\xce\x7d\x0f\x57\x00\x22\xac\x05\xd7\x7a\x44\x9d\x6d\x8a\xa9\xa6\xa9\x80\xef\x0b\x37\xea\xb6\x25\x6f\x0f\x1f\xce\x51\xb4\x86\x2c\x36\xdc\xcb\x29\x8b\x1d\xc2\xbf\x70\xba\x09\xcf\x3a\xf2\xe7\x8f\xf0\xc4\x8e\xd8\x04\x92\x4a\xa8\x69\x47\x73\x49\x17\x5e\x7f\x6b\xb1\x11\x3a\xa4\xe8\x3c\x17\xdb\xeb\xe6\x0a\xdf\x01\x00\x00\xff\xff\xcc\x2d\x14\xcc\x3c\x01\x00\x00"

func gin_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_siteTmpl,
		"gin_mirc_routes_site.tmpl",
	)
}

func gin_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site.tmpl", size: 316, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0x29, 0xe4, 0xfc, 0x25, 0x86, 0xb8, 0x52, 0xa3, 0x2d, 0xd1, 0x31, 0x36, 0xc1, 0x7e, 0x59, 0xdf, 0x65, 0x39, 0x63, 0x2, 0x5b, 0xf3, 0x2d, 0x15, 0x8e, 0xd2, 0x28, 0xb0, 0x97, 0x2d, 0x35}}
	return a, nil
}

var _gin_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x31\x6e\xf3\x30\x0c\x05\xe0\x9d\xa7\x20\x34\xd9\xc3\x6f\xc1\xff\x98\x2d\x28\x8a\xa2\x73\x2f\x10\x55\xa6\x1d\xa2\x11\x65\x30\xb4\x5b\xa3\xc8\xdd\x0b\xc5\x6a\x97\x02\x5d\x04\x3d\xbc\xef\x71\x0e\xf1\x2d\x4c\x84\x6b\x0f\xc0\x69\xce\x6a\xd8\x00\x22\xa2\x9b\xd8\xce\xcb\x6b\x17\x73\xf2\xe1\xc2\x69\xf3\x89\xd5\xaf\xff\xdd\x9f\xad\x27\x99\x58\xc8\x41\x0b\x30\x2e\x12\x91\x85\xad\x69\xf1\xf3\xbe\xda\xcb\xee\x38\x0c\x8f\x62\xba\x35\x42\xef\xcd\x0b\x1b\xb5\x2d\xdc\x00\xbc\xc7\x12\xf0\x5a\x9e\xb5\x47\x16\x23\x1d\x43\x24\x64\x19\x33\xd8\x36\x53\x05\xa6\x4b\xb4\x7a\xf3\xe1\x1c\x58\xca\x27\xb1\x76\x7b\x38\x25\xd6\x83\xfb\xe7\x4e\x77\xf0\xa4\x79\x99\xbf\xc1\x1e\x76\xb0\xf6\x55\x3c\xcb\x40\x1f\x3f\x82\x0c\xb1\x0a\xcf\xa5\xf1\x95\x1d\xd5\x38\x5e\xe8\xfa\x9b\x85\xda\xf8\x43\x0c\x46\x53\xd6\xad\x6c\x6e\xf0\x15\x00\x00\xff\xff\xf3\x95\x67\x4d\x5d\x01\x00\x00"

func gin_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_site_v1Tmpl,
		"gin_mirc_routes_site_v1.tmpl",
	)
}

func gin_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site_v1.tmpl", size: 349, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x8d, 0xaf, 0x66, 0x41, 0x48, 0x83, 0xfb, 0xe1, 0x89, 0x44, 0x2a, 0xd2, 0x28, 0xd, 0xc2, 0xe9, 0xa, 0x24, 0xd5, 0xa, 0xe9, 0xed, 0x86, 0xa2, 0xa4, 0xba, 0x75, 0x94, 0xb8, 0xb, 0xb}}
	return a, nil
}

var _gin_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\xc1\x6a\xc3\x30\x0c\x06\xe0\xbb\x9e\x42\xf8\x94\x5c\x2a\xc8\xb1\xb7\x32\xc6\xd8\x79\x2f\x50\xcf\x51\x32\xb1\x5a\x0e\xaa\x92\x2d\x8c\xbe\xfb\x48\xeb\x8d\x41\x61\x17\xe3\x9f\xff\xfb\x35\xc5\xf4\x1e\x47\xc6\xa5\x03\x90\x3c\x15\x73\x6c\x00\x11\x31\x8c\xe2\x6f\xf3\xeb\x2e\x95\x4c\xf1\x24\x79\xa5\x2c\x46\x4b\x17\xfe\x6d\x89\x75\x14\xe5\x00\x2d\xc0\x30\x6b\x42\x51\xf1\xa6\xc5\xaf\xeb\xea\x56\xee\x0e\x7d\xff\xa8\x6e\x6b\xa3\xfc\xd1\xbc\x88\x73\xdb\xc2\x05\x80\x08\xb7\x80\xe7\xed\x59\x3a\x14\x75\xb6\x21\x26\x46\xd1\xa1\x80\xaf\x13\x57\xe0\x36\x27\xaf\x37\x9f\xac\xcc\xd3\xf6\xc9\x62\xbb\x5b\x38\x66\xb1\x7d\x58\xba\x70\xbc\x8a\x67\xed\xf9\xf3\x57\xb0\x23\x56\x41\xb2\x35\x54\xd9\xc1\x5c\xd2\x89\xcf\xf7\x2c\xd6\x86\xf6\x29\x3a\x8f\xc5\xd6\x9f\xcd\x43\xcd\xf7\x9b\xbf\xf2\x02\xf0\x1d\x00\x00\xff\xff\x7c\xbf\xbf\x00\x67\x01\x00\x00"

func gin_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_gin_mirc_routes_site_v2Tmpl,
		"gin_mirc_routes_site_v2.tmpl",
	)
}

func gin_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := gin_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gin_mirc_routes_site_v2.tmpl", size: 359, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbd, 0xdc, 0x9e, 0xca, 0xb4, 0xbc, 0x8b, 0x68, 0xe8, 0xb9, 0xd4, 0xb6, 0x3d, 0x61, 0x53, 0xec, 0x86, 0x66, 0xb7, 0xc4, 0xb4, 0x41, 0xb5, 0x92, 0x87, 0xce, 0x6b, 0x2e, 0x19, 0x97, 0xc8, 0x23}}
	return a, nil
}

var _httprouter_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x41\x0e\xc2\x20\x10\x05\xd0\xfd\x9c\xe2\x2f\x75\x33\x08\xbd\x87\xf1\x0a\xb5\x9d\xc0\x28\x23\x8a\x40\x62\x9a\xde\xdd\x7d\xf7\xcf\xca\xda\xb3\x60\xdb\xc0\xb7\x67\xbc\xce\x26\xd8\x77\xa2\x58\xe0\xd9\x07\xa2\x2a\x9f\xae\x55\x70\x22\x00\x88\xda\x52\xbf\xf3\x52\xcc\xcd\x59\xed\xe7\x4c\xab\x1b\x01\x23\xf0\xc4\xe1\x48\x1e\x3d\xab\xbc\xbe\x4b\x32\x5d\x9b\x4b\xad\xbd\x6b\xe9\x4d\x2a\x86\xe7\x89\x2f\x74\xa6\x7f\x00\x00\x00\xff\xff\x74\x13\x0d\x5e\x7e\x00\x00\x00"

func httprouter_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_go_modTmpl,
		"httprouter_go_mod.tmpl",
	)
}

func httprouter_go_modTmpl() (*asset, error) {
	bytes, err := httprouter_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_go_mod.tmpl", size: 126, mode: os.FileMode(0644), modTime: time.Unix(1585645334, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0x85, 0x7c, 0x95, 0x5b, 0xc9, 0x9, 0x28, 0x67, 0x42, 0x79, 0xe6, 0xfe, 0xdf, 0xdc, 0x38, 0x8f, 0x23, 0x14, 0xd4, 0x82, 0xb2, 0x2d, 0x65, 0xcc, 0x1b, 0xca, 0xce, 0x9f, 0x10, 0x8a, 0xec}}
	return a, nil
}

var _httprouter_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcd\x4e\xeb\x30\x10\x85\xf7\xf3\x14\x73\xbd\x72\xae\x50\xdc\x65\x15\xd4\x05\x12\x62\x85\xa8\x04\xbc\x80\x49\xa7\x89\xc1\xb1\xa3\xf1\x04\x16\x28\xef\x8e\x62\xa7\xa4\x12\xde\x8c\x7f\xbe\x73\x3c\x67\x46\xdb\x7e\xd8\x8e\x70\xb0\x2e\x00\xb8\x61\x8c\x2c\xa8\x01\x11\x51\xf9\xd8\xa9\xb2\x0b\x24\xa6\x17\x19\x15\x94\x73\xe7\xa4\x9f\xde\xea\x36\x0e\xe6\x7d\xf2\x8e\x42\x6a\xfb\xc1\x9d\x0a\xc4\x71\x12\x62\x05\x15\xc0\x79\x0a\x6d\xb6\xd6\x15\x7e\x67\x29\x63\x73\xc0\x8d\xaa\x9f\xe8\x4b\x57\xc5\xd5\x18\x64\xea\x5c\x12\x62\x4c\xc4\x9f\x36\x48\x42\x89\x57\x74\x71\x58\x99\x97\x15\xd1\xbc\xe9\x93\x58\x96\x8b\x38\x57\xd7\x52\x7e\x74\x67\x24\xfe\xfd\xbc\x7e\x5c\x2c\xc2\x5d\x38\x2d\x2e\xa4\x55\xb3\xdf\xed\x77\xea\x06\xb9\xba\xcd\xdc\xbf\x03\x06\xe7\xd7\x9e\x97\xe5\x63\x57\x3f\x58\xb1\x5e\x13\x73\x95\xaf\x67\x98\xd7\x84\x7f\x5b\xc2\xff\x57\x19\x9f\x73\xb9\x4c\xc0\x18\x7c\x3d\xde\x1f\x9b\x2d\x6c\xc6\x72\x54\x86\x19\x7e\x02\x00\x00\xff\xff\x26\x3a\xe1\x3f\x92\x01\x00\x00"

func httprouter_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mainTmpl,
		"httprouter_main.tmpl",
	)
}

func httprouter_mainTmpl() (*asset, error) {
	bytes, err := httprouter_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_main.tmpl", size: 402, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x80, 0x74, 0x9e, 0x62, 0xae, 0xa4, 0xe4, 0xb, 0x71, 0x1b, 0x20, 0x53, 0x3f, 0xd1, 0x88, 0xf6, 0xf9, 0xd4, 0xc3, 0x36, 0x4c, 0xdc, 0x9c, 0x5, 0x28, 0x41, 0xfc, 0xcb, 0xfd, 0xe0, 0x15}}
	return a, nil
}

var _httprouter_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xcd\x4e\xc3\x30\x0c\xc7\xef\x79\x0a\x93\x53\x2a\xa1\x46\xec\x38\xb4\x2b\x1f\x07\x60\xda\x1e\x00\x85\xce\xcb\xa2\xa5\x76\xe5\xa6\x93\xd0\xd4\x77\x47\x49\xc7\xc7\x38\x0c\x72\x88\x62\xfb\xe7\x7f\xfc\x77\xe7\x9a\xbd\xf3\x08\xad\x0b\xa4\x54\x68\x3b\x96\x04\x46\x01\x00\xe8\xc8\x5e\xab\xe9\xe9\x43\xda\x0d\x6f\x75\xc3\xad\x75\x31\xb4\xef\xb6\x0d\x62\x0f\x33\xdb\xb0\xa0\xbe\x8c\x20\xf9\x40\x78\x12\x7a\x05\x7d\x3c\x42\xbd\xdc\xfb\x67\xd7\x22\x8c\x63\xa6\x1a\x2b\x3c\x24\xec\xf5\xdf\x88\x3d\xdc\xfc\x8b\x9a\x69\x55\x29\x65\xad\xe7\xb9\x47\x42\x71\x09\xc1\x33\xc8\x40\xc5\x69\xed\x59\x6d\x07\x6a\x4a\x60\x2a\x38\x16\xcd\xc8\xbe\x5e\x4a\xa0\x14\xc9\xe8\xaf\xb6\x86\x37\x08\x7d\x72\x92\x74\x55\x30\xee\x52\x0f\xf3\x05\x64\xef\xf5\x4b\x97\x02\x53\x3f\x09\xe4\x53\xb2\xab\x81\x9e\x78\x83\xa6\x04\x8f\xb4\x46\x09\x2e\xe6\x4c\x75\x7d\x0e\xde\x4f\xbf\xb0\x64\x17\xe6\x3c\xf5\x90\x52\xb7\xca\x7e\xe4\x77\xd7\x3a\xd0\x7e\xe9\xd2\xce\xe8\xda\x7a\x24\x7d\xaa\x8f\xe5\x0e\x5b\x40\x91\x3c\xe0\xb4\xf9\x4f\x41\x34\x79\xf0\xea\xb6\x54\xaf\x16\x40\x21\xc2\xf7\xd8\xd9\xfb\x9d\x4b\x2e\x1a\x14\xa9\x7e\xc8\x5d\x58\xca\x36\x50\xe8\x77\xba\x52\xa3\xfa\x08\x00\x00\xff\xff\x80\x07\xd5\xf1\x47\x02\x00\x00"

func httprouter_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mirc_mainTmpl,
		"httprouter_mirc_main.tmpl",
	)
}

func httprouter_mirc_mainTmpl() (*asset, error) {
	bytes, err := httprouter_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_mirc_main.tmpl", size: 583, mode: os.FileMode(0644), modTime: time.Unix(1585301779, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0x5b, 0xda, 0xdc, 0x56, 0xcc, 0x54, 0xa2, 0xbe, 0xbc, 0x36, 0xd5, 0x6, 0x6e, 0xc1, 0x20, 0xbc, 0x94, 0xb3, 0x55, 0x9c, 0xe3, 0x63, 0x5, 0xd7, 0xe6, 0x6a, 0x88, 0xf4, 0x66, 0x4e, 0x29}}
	return a, nil
}

var _httprouter_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8c\xb1\x6a\xec\x40\x0c\x45\x7b\x7d\x85\x98\xca\x2e\x9e\x05\xaf\xdc\x6e\x09\x21\xa4\xce\x0f\xec\x64\x2c\x7b\x45\x76\x34\x46\x96\x93\x98\xb0\xff\x1e\x66\x77\x52\x05\xd2\x88\x7b\x39\xe7\x6a\x89\xe9\x2d\xce\x8c\x56\x36\xe7\x15\x40\xf2\x52\xcc\xb1\x03\x44\xc4\x30\x8b\x9f\xb7\xd7\x21\x95\x4c\xf1\x22\x79\xa7\x2c\x46\xef\xff\xc3\x9f\x94\x58\x67\x51\x0e\xd0\x03\x4c\x9b\x26\x14\x15\xef\x7a\xfc\xba\xad\xee\x70\x38\x8e\xe3\xa3\xba\xed\x9d\xf2\x47\xf7\x22\xce\x7d\x0f\x57\x00\x22\xac\x05\xd7\x7a\x44\x9d\x6d\x8a\xa9\xa6\xa9\x80\xef\x0b\x37\xea\xb6\x25\x6f\x0f\x1f\xce\x51\xb4\x86\x2c\x36\xdc\xcb\x29\x8b\x1d\xc2\xbf\x70\xba\x09\xcf\x3a\xf2\xe7\x8f\xf0\xc4\x8e\xd8\x04\x92\x4a\xa8\x69\x47\x73\x49\x17\x5e\x7f\x6b\xb1\x11\x3a\xa4\xe8\x3c\x17\xdb\xeb\xe6\x0a\xdf\x01\x00\x00\xff\xff\xcc\x2d\x14\xcc\x3c\x01\x00\x00"

func httprouter_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mirc_routes_siteTmpl,
		"httprouter_mirc_routes_site.tmpl",
	)
}

func httprouter_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := httprouter_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_mirc_routes_site.tmpl", size: 316, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0x29, 0xe4, 0xfc, 0x25, 0x86, 0xb8, 0x52, 0xa3, 0x2d, 0xd1, 0x31, 0x36, 0xc1, 0x7e, 0x59, 0xdf, 0x65, 0x39, 0x63, 0x2, 0x5b, 0xf3, 0x2d, 0x15, 0x8e, 0xd2, 0x28, 0xb0, 0x97, 0x2d, 0x35}}
	return a, nil
}

var _httprouter_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x31\x6e\xf3\x30\x0c\x05\xe0\x9d\xa7\x20\x34\xd9\xc3\x6f\xc1\xff\x98\x2d\x28\x8a\xa2\x73\x2f\x10\x55\xa6\x1d\xa2\x11\x65\x30\xb4\x5b\xa3\xc8\xdd\x0b\xc5\x6a\x97\x02\x5d\x04\x3d\xbc\xef\x71\x0e\xf1\x2d\x4c\x84\x6b\x0f\xc0\x69\xce\x6a\xd8\x00\x22\xa2\x9b\xd8\xce\xcb\x6b\x17\x73\xf2\xe1\xc2\x69\xf3\x89\xd5\xaf\xff\xdd\x9f\xad\x27\x99\x58\xc8\x41\x0b\x30\x2e\x12\x91\x85\xad\x69\xf1\xf3\xbe\xda\xcb\xee\x38\x0c\x8f\x62\xba\x35\x42\xef\xcd\x0b\x1b\xb5\x2d\xdc\x00\xbc\xc7\x12\xf0\x5a\x9e\xb5\x47\x16\x23\x1d\x43\x24\x64\x19\x33\xd8\x36\x53\x05\xa6\x4b\xb4\x7a\xf3\xe1\x1c\x58\xca\x27\xb1\x76\x7b\x38\x25\xd6\x83\xfb\xe7\x4e\x77\xf0\xa4\x79\x99\xbf\xc1\x1e\x76\xb0\xf6\x55\x3c\xcb\x40\x1f\x3f\x82\x0c\xb1\x0a\xcf\xa5\xf1\x95\x1d\xd5\x38\x5e\xe8\xfa\x9b\x85\xda\xf8\x43\x0c\x46\x53\xd6\xad\x6c\x6e\xf0\x15\x00\x00\xff\xff\xf3\x95\x67\x4d\x5d\x01\x00\x00"

func httprouter_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mirc_routes_site_v1Tmpl,
		"httprouter_mirc_routes_site_v1.tmpl",
	)
}

func httprouter_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := httprouter_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_mirc_routes_site_v1.tmpl", size: 349, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x8d, 0xaf, 0x66, 0x41, 0x48, 0x83, 0xfb, 0xe1, 0x89, 0x44, 0x2a, 0xd2, 0x28, 0xd, 0xc2, 0xe9, 0xa, 0x24, 0xd5, 0xa, 0xe9, 0xed, 0x86, 0xa2, 0xa4, 0xba, 0x75, 0x94, 0xb8, 0xb, 0xb}}
	return a, nil
}

var _httprouter_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\xc1\x6a\xc3\x30\x0c\x06\xe0\xbb\x9e\x42\xf8\x94\x5c\x2a\xc8\xb1\xb7\x32\xc6\xd8\x79\x2f\x50\xcf\x51\x32\xb1\x5a\x0e\xaa\x92\x2d\x8c\xbe\xfb\x48\xeb\x8d\x41\x61\x17\xe3\x9f\xff\xfb\x35\xc5\xf4\x1e\x47\xc6\xa5\x03\x90\x3c\x15\x73\x6c\x00\x11\x31\x8c\xe2\x6f\xf3\xeb\x2e\x95\x4c\xf1\x24\x79\xa5\x2c\x46\x4b\x17\xfe\x6d\x89\x75\x14\xe5\x00\x2d\xc0\x30\x6b\x42\x51\xf1\xa6\xc5\xaf\xeb\xea\x56\xee\x0e\x7d\xff\xa8\x6e\x6b\xa3\xfc\xd1\xbc\x88\x73\xdb\xc2\x05\x80\x08\xb7\x80\xe7\xed\x59\x3a\x14\x75\xb6\x21\x26\x46\xd1\xa1\x80\xaf\x13\x57\xe0\x36\x27\xaf\x37\x9f\xac\xcc\xd3\xf6\xc9\x62\xbb\x5b\x38\x66\xb1\x7d\x58\xba\x70\xbc\x8a\x67\xed\xf9\xf3\x57\xb0\x23\x56\x41\xb2\x35\x54\xd9\xc1\x5c\xd2\x89\xcf\xf7\x2c\xd6\x86\xf6\x29\x3a\x8f\xc5\xd6\x9f\xcd\x43\xcd\xf7\x9b\xbf\xf2\x02\xdf\x01\x00\x00\xff\xff\x2c\x0c\xd5\xb0\x66\x01\x00\x00"

func httprouter_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_httprouter_mirc_routes_site_v2Tmpl,
		"httprouter_mirc_routes_site_v2.tmpl",
	)
}

func httprouter_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := httprouter_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "httprouter_mirc_routes_site_v2.tmpl", size: 358, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0x2, 0x21, 0xb6, 0xad, 0x80, 0xee, 0xad, 0x51, 0xf0, 0x30, 0xa9, 0x20, 0x4f, 0x8, 0x22, 0x74, 0x6e, 0x5c, 0x2a, 0xbb, 0x9c, 0x26, 0x4, 0x2a, 0xa4, 0xff, 0x41, 0x20, 0xd5, 0x5b, 0x90}}
	return a, nil
}

var _iris_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x31\x0e\xc2\x30\x0c\x05\xd0\xdd\xa7\xf8\x23\x2c\x8e\x6c\x16\x4e\x81\xb8\x82\x81\xa8\x58\xad\x15\xe1\x36\x91\x50\xd5\xbb\xb3\xb3\xbf\x68\xaf\xbe\x54\xec\x3b\xf8\x3e\x4f\x37\x8b\x8a\xe3\x20\x9a\x1a\x84\x45\x89\xb2\x7e\xba\x67\xc5\x89\x00\x60\xf2\xed\xdd\x1f\xfc\x6c\x51\x6c\xf1\xf8\x96\xf0\x2c\x43\x31\x94\x2f\xac\xff\x64\xb6\xcd\xd2\xd6\xe2\xe9\x6b\x19\xa2\x18\xa2\x2c\x7c\xa5\x33\xfd\x02\x00\x00\xff\xff\xd2\x99\x99\x2f\x77\x00\x00\x00"

func iris_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_go_modTmpl,
		"iris_go_mod.tmpl",
	)
}

func iris_go_modTmpl() (*asset, error) {
	bytes, err := iris_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_go_mod.tmpl", size: 119, mode: os.FileMode(0644), modTime: time.Unix(1585645334, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0xb, 0x7c, 0x7c, 0x27, 0xb0, 0x95, 0xc2, 0x5d, 0x96, 0x1b, 0xaf, 0xd8, 0x34, 0xd9, 0xb6, 0x4f, 0x6, 0x19, 0x3a, 0x66, 0x58, 0x81, 0xce, 0xbb, 0xa0, 0x6a, 0x2a, 0x92, 0x69, 0x1e, 0xd7}}
	return a, nil
}

var _iris_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x4f\xbd\x4e\xc3\x30\x10\xde\xfd\x14\x47\x26\x9b\x21\xa6\xb0\xa0\xa2\x0e\x48\x88\x91\x4a\xc0\x0b\x1c\xa9\x6b\x4e\x75\x6c\xeb\x7c\x29\x03\xca\xbb\xa3\x38\x89\xb2\xe0\xc5\x96\xbf\xff\x8c\xdd\x05\xbd\x83\x1e\x29\x2a\x45\x7d\x4e\x2c\xa0\x15\x00\x40\x13\x92\x6f\xd4\xfc\xf4\x24\xdf\xc3\x57\xdb\xa5\xde\x5e\x50\x90\xb1\x58\x62\x2a\xf6\xba\xbb\x6f\x94\x51\xea\x3c\xc4\xae\x7a\x68\x03\xbf\x55\x82\x39\xc3\xfe\x00\x13\xab\x7d\x73\x3f\xda\xcc\x4e\xd6\x02\x3b\x4f\x45\x1c\x43\x71\x7c\xc5\x28\x05\x24\x55\x5e\x25\xac\xe8\xc7\x02\x6a\xcc\x79\xd3\x16\x41\x96\x55\x58\x6f\xea\x5c\x05\xe9\x0c\x8e\x79\x8a\x9c\xa2\xdb\xf7\x21\xea\x9a\xfd\x7c\x3a\xb1\x6e\xf6\x8f\x77\xbb\x87\xc6\x98\xa7\x4a\xba\x39\x40\xa4\xb0\x14\x9d\x4e\x48\xbe\x7d\x45\xc1\xa0\x1d\xb3\xa9\xdf\xa3\x1a\x97\x59\xff\x35\x82\xdb\xd9\x3c\xe7\x40\x1d\x0a\xa5\xb8\xee\xb6\x16\x3e\x8f\x2f\xc7\xfd\x36\x93\xd3\x20\x6e\x1b\x39\xaa\xbf\x00\x00\x00\xff\xff\x7e\xb0\xed\xb8\x74\x01\x00\x00"

func iris_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mainTmpl,
		"iris_main.tmpl",
	)
}

func iris_mainTmpl() (*asset, error) {
	bytes, err := iris_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_main.tmpl", size: 372, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0x62, 0x83, 0x9, 0x2d, 0xd8, 0xa6, 0x8f, 0xb7, 0x1d, 0xe9, 0xb1, 0x28, 0x19, 0xd6, 0x36, 0x76, 0x8f, 0xe4, 0xfa, 0x99, 0x75, 0xab, 0x10, 0xf2, 0x5f, 0x73, 0x71, 0x70, 0x48, 0x87, 0x14}}
	return a, nil
}

var _iris_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x4d\x6e\xe3\x30\x0c\x85\xf7\x3a\x05\x47\x2b\x19\x18\x58\x98\x2c\x33\xc8\x76\x06\x59\xb4\x0d\x9a\x03\x14\xaa\xc3\x28\x44\x6c\xd2\xa0\xe5\x00\x45\xe0\xbb\x17\x92\xd3\x9f\x74\x91\xd6\x0b\x43\x24\x3f\x3d\xbd\xc7\x3e\x34\xc7\x10\x11\xba\x40\x6c\x0c\x75\xbd\x68\x02\x67\x00\x00\x6c\x2b\xd1\x9a\xf9\x18\x29\x1d\xc6\xe7\xba\x91\xce\x87\x96\xba\x17\xdf\x91\xfa\xd3\xc2\x37\xa2\x68\x6f\x23\xc8\x91\x18\x2f\x42\x4f\x60\xcf\x67\xa8\x37\xc7\x78\x1f\x3a\x84\x69\xca\x54\xe3\x55\xc6\x84\x83\xfd\x1e\xf1\xa7\x3f\x3f\xa2\x16\xd6\x54\xc6\x78\x1f\x65\x19\x91\x51\x43\x42\x88\x02\x3a\x72\x49\x5a\x47\x31\xfb\x91\x9b\x52\xb8\x0a\xce\x45\xb3\x95\x58\x6f\x94\x38\xb5\xec\xec\xfb\xb5\x46\x76\x08\x43\x0a\x9a\x6c\x55\x30\xe9\xd3\x00\xcb\x15\xe4\xec\xf5\x43\x9f\x48\x78\x98\x05\xf2\x57\xba\x8f\x23\xdf\xc9\x0e\x5d\x29\xd6\xbc\x45\xa5\xd0\xe6\x4e\xf5\xfb\x1a\xfc\x3f\xbf\x22\x9a\x53\xb8\xeb\xd6\x5a\x69\xf8\xca\x6f\x89\x8f\x9b\x90\x0e\xce\xd6\x3e\x22\xdb\xcb\x7c\x2a\x7f\xda\x03\xaa\x66\x6b\xf3\xce\xdf\xa4\xd0\x65\xcb\xd5\xdf\x32\xfd\xb5\x02\xa6\x16\x3e\x0c\xe7\xd4\xff\x42\x0a\xad\x43\xd5\xea\x93\xdc\x8d\x75\xec\x89\x69\x38\xd8\xca\x4c\xe6\x35\x00\x00\xff\xff\x08\x26\x80\x6d\x41\x02\x00\x00"

func iris_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mirc_mainTmpl,
		"iris_mirc_main.tmpl",
	)
}

func iris_mirc_mainTmpl() (*asset, error) {
	bytes, err := iris_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_mirc_main.tmpl", size: 577, mode: os.FileMode(0644), modTime: time.Unix(1585301779, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0xd5, 0xc, 0xe7, 0x24, 0xe3, 0x6e, 0x60, 0x1d, 0x58, 0xb9, 0x65, 0xd, 0xe7, 0x33, 0x1f, 0x1f, 0x9c, 0x67, 0xfb, 0x35, 0x22, 0x69, 0x98, 0xb, 0xdd, 0x12, 0x2f, 0x54, 0x9, 0x9d, 0x2e}}
	return a, nil
}

var _iris_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8c\xb1\x4e\xc4\x30\x0c\x86\x77\x3f\x85\x95\xa9\x1d\xb8\x48\x8c\xb7\x9d\x10\x42\xcc\xbc\x40\x43\xea\xe6\x2c\x2e\x4e\xe5\xba\x40\x75\xea\xbb\xa3\xdc\x85\x09\x89\xc5\xfa\x7f\x7d\x9f\xff\x39\xc4\x8f\x90\x08\xb5\xac\x46\x0b\x00\xe7\xb9\xa8\x61\x07\x88\x88\x2e\xb1\x9d\xd7\xf7\x43\x2c\xd9\x87\x0b\xe7\xcd\x67\x56\xff\xf9\xe8\xfe\xa5\x9e\x24\xb1\x90\x83\x1e\x60\x5a\x25\x22\x0b\x5b\xd7\xe3\xf5\xf6\x75\x87\x87\xd3\x38\x3e\x8b\xe9\xd6\x09\x7d\x75\x6f\x6c\xd4\xf7\xb0\x03\x78\x8f\xb5\xe0\x52\x0f\x8b\x91\x4e\x21\xd6\x34\x15\xb0\x6d\xa6\x46\x4d\xd7\x68\x6d\xf0\xe9\x1c\x58\x6a\xc8\xac\x87\x7b\x19\x32\xeb\xd1\x3d\xb8\xe1\x26\xbc\xca\x48\xdf\xbf\xc2\x0b\x19\x62\x13\x3c\x57\xe2\x9b\x76\x52\xe3\x78\xa1\xe5\xaf\x16\x1a\xf1\xd7\x18\x8c\x52\xd1\xed\xb8\x98\xb2\xa4\xdd\x0d\xb0\xc3\x4f\x00\x00\x00\xff\xff\x41\x5b\xed\x07\x43\x01\x00\x00"

func iris_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mirc_routes_siteTmpl,
		"iris_mirc_routes_site.tmpl",
	)
}

func iris_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := iris_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_mirc_routes_site.tmpl", size: 323, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x77, 0xba, 0x90, 0x24, 0x1c, 0xcb, 0xeb, 0xf8, 0x88, 0x88, 0xbd, 0xa0, 0x2a, 0x5b, 0x98, 0x1d, 0x9b, 0x15, 0x40, 0x5, 0xa4, 0xa0, 0xd0, 0x16, 0x7d, 0xae, 0x23, 0xd0, 0xe1, 0x48, 0x92, 0xde}}
	return a, nil
}

var _iris_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\xc1\x4e\x84\x30\x10\xc6\xf1\xfb\x3c\xc5\xa4\x27\x38\x48\x83\xc7\xbd\x6d\x8c\x31\x9e\x7d\x01\x6a\x19\xd8\x89\xdb\x81\x0c\x03\x4a\x36\xbc\xbb\x61\xa9\x5e\x4c\xbc\x34\xfd\xf2\xff\xb5\x63\x88\x1f\xa1\x27\x5c\x6a\x00\x4e\xe3\xa0\x86\x05\x20\x22\xba\x9e\xed\x32\xbf\x57\x71\x48\x3e\x5c\x39\xad\x3e\xb1\xfa\xe5\xd1\xfd\x5b\x3d\x49\xcf\x42\x0e\x4a\x80\x6e\x96\x88\x2c\x6c\x45\x89\xb7\xfb\xab\x23\x56\xe7\xb6\x7d\x16\xd3\xb5\x10\xfa\x2c\xde\xd8\xa8\x2c\x61\x03\xf0\x1e\xf7\x81\xd3\x7e\x2c\x35\xb2\x18\x69\x17\x22\x21\x4b\x37\x80\xad\x23\x65\x60\x3a\x47\xcb\x7f\x3e\x5d\x02\xcb\x7e\x49\xac\xd5\x31\x9a\xc4\x7a\x72\x0f\xae\xb9\x83\x17\x1d\xe6\xf1\x07\x1c\xe3\x00\x4b\x9d\xc5\xab\xb4\xf4\xf5\x2b\xc8\x10\xb3\xf0\xbc\x17\x9f\xd9\x59\x8d\xe3\x95\xa6\xbf\x2c\xe4\xe2\x6f\x31\x18\xf5\x83\xae\xa7\xc9\x94\xa5\xdf\x5c\x03\x1b\x7c\x07\x00\x00\xff\xff\xa3\x54\xc8\x44\x64\x01\x00\x00"

func iris_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mirc_routes_site_v1Tmpl,
		"iris_mirc_routes_site_v1.tmpl",
	)
}

func iris_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := iris_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_mirc_routes_site_v1.tmpl", size: 356, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1f, 0x3f, 0x3c, 0x46, 0x6, 0xae, 0x80, 0xe2, 0xf0, 0x4a, 0x96, 0x75, 0x34, 0x2e, 0x9, 0x63, 0x15, 0xc7, 0x37, 0x81, 0x76, 0x70, 0x34, 0x63, 0x80, 0x3f, 0x9e, 0x2b, 0xf, 0xa4, 0x59, 0x9b}}
	return a, nil
}

var _iris_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\xc1\x6a\xc3\x30\x0c\x40\xef\xfa\x0a\x91\x53\x72\xa9\x21\xc7\xde\xca\x18\x63\xe7\xfd\x40\x3d\x47\xf1\xc4\x6a\x39\x28\x4a\xb6\x50\xf2\xef\xc3\xad\xb7\x4b\x61\x17\x63\xf9\xbd\x67\x4d\x3e\x7c\xfa\x48\xb8\xf6\x00\x9c\xa6\xac\x86\x2d\x20\x22\x36\x91\xed\x63\x79\x3f\x84\x9c\x9c\xbf\x70\xda\x5c\x62\x75\x6b\xdf\xfc\x4b\x1d\x49\x64\xa1\x06\x3a\x80\x71\x91\x80\x2c\x6c\x6d\x87\xd7\x5b\x75\x87\x87\xd3\x30\x3c\x8b\xe9\xd6\x0a\x7d\xb5\x6f\x6c\xd4\x75\xb0\x03\x38\x87\x65\xc0\xb9\x1c\x6b\x8f\x2c\x46\x3a\xfa\x40\xc8\x32\x66\xb0\x6d\xa2\x2a\x98\x2e\xc1\xea\x9f\x2f\x9a\x97\xa9\x5c\x12\xeb\xe1\x3e\x9c\x13\xeb\xb1\x59\xfb\xe6\x7c\x33\x5e\x65\xa0\xef\x3f\x83\x0c\xb1\x1a\x8e\x0b\x71\x55\x3b\xa9\x71\xb8\xd0\xfc\xa8\xf9\x4a\xdc\x35\x78\xa3\x98\x75\x3b\xce\xa6\x2c\x71\xaf\xe9\x53\x7d\x7e\x4c\x7f\x83\xb2\x64\x87\x9f\x00\x00\x00\xff\xff\x00\x10\x3d\xea\x6d\x01\x00\x00"

func iris_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_iris_mirc_routes_site_v2Tmpl,
		"iris_mirc_routes_site_v2.tmpl",
	)
}

func iris_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := iris_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iris_mirc_routes_site_v2.tmpl", size: 365, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0x71, 0xb3, 0xe5, 0x55, 0xcd, 0x22, 0xc3, 0xc3, 0x8, 0x9a, 0x79, 0x2b, 0xea, 0x2, 0xc2, 0x35, 0x7f, 0xbd, 0x8e, 0x58, 0xc1, 0xe4, 0x19, 0x86, 0x8f, 0xd0, 0x9c, 0x76, 0x33, 0x41, 0xbd}}
	return a, nil
}

var _macaron_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x41\x0a\xc2\x30\x10\x05\xd0\xfd\x9c\xe2\x2f\x75\xf3\x43\x52\xbc\x86\x78\x85\x58\x43\x1c\xda\xe9\x68\x30\x01\x29\xbd\xbb\x0b\xf7\xcf\xfc\xd1\xd7\x82\x7d\x07\x6f\x4b\xbd\x66\x2b\x38\x0e\x91\xea\x88\x8c\x49\xa4\x95\x77\xd7\x56\x70\x12\x00\xa8\xfa\x79\xf6\x3b\x67\xb7\x90\x57\xb5\x6f\x30\x6d\x61\x24\x8c\xc4\x89\xe9\x4f\xfc\xb5\x54\xea\x16\x2c\xcf\xb9\xf9\xc6\x11\x31\x22\x27\x5e\xe4\x2c\xbf\x00\x00\x00\xff\xff\x1d\x38\x5f\x6a\x6e\x00\x00\x00"

func macaron_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_go_modTmpl,
		"macaron_go_mod.tmpl",
	)
}

func macaron_go_modTmpl() (*asset, error) {
	bytes, err := macaron_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_go_mod.tmpl", size: 110, mode: os.FileMode(0644), modTime: time.Unix(1585645334, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0xcf, 0x77, 0xbc, 0xf5, 0xa3, 0x72, 0xe1, 0x5b, 0x81, 0xa9, 0xb, 0x4e, 0xd7, 0x88, 0x52, 0xa0, 0x31, 0x31, 0x75, 0x17, 0x37, 0xd2, 0xe3, 0x87, 0x3e, 0x83, 0x23, 0xe9, 0xf2, 0x7e, 0x86}}
	return a, nil
}

var _macaron_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\xca\xc3\x20\x14\x85\xf7\xfb\x14\x87\x4c\xfa\x0f\x31\x3f\x74\x0a\x74\xeb\xda\x06\xda\xbe\x80\x88\x15\x09\x6a\x50\x93\x0e\x25\xef\x5e\x30\x91\x0c\x9d\x0e\xdc\xfb\x9d\x7b\xbf\x49\xaa\x51\x1a\x0d\x27\xad\x27\xb2\x6e\x0a\x31\x83\x11\x00\x34\x26\x4c\xa3\x69\xad\x17\x4e\x2a\x19\x83\x6f\x97\xff\x86\x38\xd1\x6b\xf6\xaa\x14\x18\xc7\xa7\xa0\x0e\xfd\x19\x95\xba\xe9\x37\xe3\x54\xe6\x42\x20\x6a\x63\x53\xd6\x11\x49\xc7\x45\xfa\x9c\x90\x43\x45\x0b\x53\x81\xc7\xbe\x67\xee\x28\xa7\x2c\x63\xae\xcd\x92\x56\x69\xd6\x9f\xba\xae\xe3\xdb\xe3\xf6\x3e\x7b\xc6\x69\xdd\xad\x7e\x8f\xe1\xaf\x7a\x5d\xb7\xac\xce\x42\xe0\x39\x5c\x86\xfe\x30\x8c\x61\xce\x7a\xf3\xa3\x95\xbe\x01\x00\x00\xff\xff\xee\xe4\x75\x48\x1a\x01\x00\x00"

func macaron_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mainTmpl,
		"macaron_main.tmpl",
	)
}

func macaron_mainTmpl() (*asset, error) {
	bytes, err := macaron_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_main.tmpl", size: 282, mode: os.FileMode(0644), modTime: time.Unix(1584548272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0x55, 0x52, 0x74, 0x55, 0x0, 0xda, 0xbb, 0x5d, 0xb2, 0xbc, 0x3b, 0xf7, 0x5a, 0xec, 0x82, 0x27, 0xe4, 0x77, 0xee, 0x87, 0x17, 0xe9, 0x46, 0xeb, 0xe8, 0x4a, 0x83, 0xd, 0xe4, 0xf2, 0x8a}}
	return a, nil
}

var _macaron_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xbf\x6e\xe3\x30\x0c\xc6\x77\x3d\x05\x4f\x93\x0c\x1c\x2c\x5c\xc6\x1c\xb2\xde\xa1\x43\xda\xa0\x79\x80\x42\x75\x18\x85\x88\x4d\x1a\xb4\x1c\xa0\x08\xfc\xee\x85\xe4\xf4\x4f\x3a\xa4\xd5\x20\x88\xe4\x8f\x9f\xf8\xb1\x0f\xcd\x31\x44\x84\x2e\x10\x1b\x43\x5d\x2f\x9a\xc0\x19\x00\x00\xdb\x4a\xb4\x66\x7e\x46\x4a\x87\xf1\xb9\x6e\xa4\xf3\xa1\xa5\xee\xc5\x77\xa4\xfe\xb4\xf0\x8d\x28\xda\xdb\x08\x72\x24\xc6\x8b\xd0\x13\xd8\xf3\x19\xea\xcd\x31\xde\x87\x0e\x61\x9a\x32\xd5\x78\x95\x31\xe1\x60\xbf\x47\xfc\xe9\xcf\x8f\xa8\x85\x35\x95\x31\xde\x47\x59\x46\x64\xd4\x90\x10\xa2\x80\x8e\x5c\x9c\xd6\x51\xcc\x7e\xe4\xa6\x04\xae\x82\x73\xd1\x6c\x25\xd6\x1b\x25\x4e\x2d\x3b\xfb\xde\xd6\xc8\x0e\x61\x48\x41\x93\xad\x0a\x26\x7d\x1a\x60\xb9\x82\xec\xbd\x7e\xe8\x13\x09\x0f\xb3\x40\x3e\x25\xfb\x38\xf2\x5a\x76\xe8\x4a\x70\xc7\x5b\x54\x0a\x6d\xce\x54\xbf\xaf\xc1\xff\xf3\x2f\xa2\xd9\x85\xbb\x4e\xad\x43\x13\x54\xf8\x6b\xcb\x96\xf8\xb8\x09\xe9\xe0\x6c\xed\x23\xb2\xbd\xd4\xa7\x72\xd3\x1e\x50\x35\x4f\x37\xaf\xfd\x4d\x0d\x5d\x9e\xba\xfa\x5b\xaa\xbf\x56\xc0\xd4\xc2\xc7\xcc\xd9\xf8\xbf\x90\x42\xeb\x50\xb5\xfa\x24\x77\x63\x23\x7b\x62\x1a\x0e\xb6\x32\x93\x79\x0d\x00\x00\xff\xff\x27\x34\x78\x8e\x44\x02\x00\x00"

func macaron_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mirc_mainTmpl,
		"macaron_mirc_main.tmpl",
	)
}

func macaron_mirc_mainTmpl() (*asset, error) {
	bytes, err := macaron_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_mirc_main.tmpl", size: 580, mode: os.FileMode(0644), modTime: time.Unix(1585301779, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0x1b, 0x63, 0x65, 0x55, 0xb4, 0x5d, 0x61, 0x16, 0xa4, 0x3d, 0x24, 0x59, 0x7e, 0xc9, 0x4e, 0x1a, 0xfe, 0x3c, 0x7a, 0xab, 0x3e, 0xe1, 0x3e, 0xb3, 0xdd, 0xa5, 0x0, 0xbe, 0x2e, 0xae, 0x8c}}
	return a, nil
}

var _macaron_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8c\xb1\x6a\xec\x40\x0c\x45\x7b\x7d\x85\x98\xca\x2e\x9e\x05\xaf\xdc\x6e\x09\x21\xa4\xce\x0f\xec\x64\x2c\x7b\x45\x76\x34\x46\x96\x93\x98\xb0\xff\x1e\x66\x77\x52\x05\xd2\x88\x7b\x39\xe7\x6a\x89\xe9\x2d\xce\x8c\x56\x36\xe7\x15\x40\xf2\x52\xcc\xb1\x03\x44\xc4\x30\x8b\x9f\xb7\xd7\x21\x95\x4c\xf1\x22\x79\xa7\x2c\x46\xef\xff\xc3\x9f\x94\x58\x67\x51\x0e\xd0\x03\x4c\x9b\x26\x14\x15\xef\x7a\xfc\xba\xad\xee\x70\x38\x8e\xe3\xa3\xba\xed\x9d\xf2\x47\xf7\x22\xce\x7d\x0f\x57\x00\x22\xac\x05\xd7\x7a\x44\x9d\x6d\x8a\xa9\xa6\xa9\x80\xef\x0b\x37\xea\xb6\x25\x6f\x0f\x1f\xce\x51\xb4\x86\x2c\x36\xdc\xcb\x29\x8b\x1d\xc2\xbf\x70\xba\x09\xcf\x3a\xf2\xe7\x8f\xf0\xc4\x8e\xd8\x04\x92\x4a\xa8\x69\x47\x73\x49\x17\x5e\x7f\x6b\xb1\x11\x3a\xa4\xe8\x3c\x17\xdb\xeb\xe6\x0a\xdf\x01\x00\x00\xff\xff\xcc\x2d\x14\xcc\x3c\x01\x00\x00"

func macaron_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mirc_routes_siteTmpl,
		"macaron_mirc_routes_site.tmpl",
	)
}

func macaron_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := macaron_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_mirc_routes_site.tmpl", size: 316, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0x29, 0xe4, 0xfc, 0x25, 0x86, 0xb8, 0x52, 0xa3, 0x2d, 0xd1, 0x31, 0x36, 0xc1, 0x7e, 0x59, 0xdf, 0x65, 0x39, 0x63, 0x2, 0x5b, 0xf3, 0x2d, 0x15, 0x8e, 0xd2, 0x28, 0xb0, 0x97, 0x2d, 0x35}}
	return a, nil
}

var _macaron_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x31\x6e\xf3\x30\x0c\x05\xe0\x9d\xa7\x20\x34\xd9\xc3\x6f\xc1\xff\x98\x2d\x28\x8a\xa2\x73\x2f\x10\x55\xa6\x1d\xa2\x11\x65\x30\xb4\x5b\xa3\xc8\xdd\x0b\xc5\x6a\x97\x02\x5d\x04\x3d\xbc\xef\x71\x0e\xf1\x2d\x4c\x84\x6b\x0f\xc0\x69\xce\x6a\xd8\x00\x22\xa2\x9b\xd8\xce\xcb\x6b\x17\x73\xf2\xe1\xc2\x69\xf3\x89\xd5\xaf\xff\xdd\x9f\xad\x27\x99\x58\xc8\x41\x0b\x30\x2e\x12\x91\x85\xad\x69\xf1\xf3\xbe\xda\xcb\xee\x38\x0c\x8f\x62\xba\x35\x42\xef\xcd\x0b\x1b\xb5\x2d\xdc\x00\xbc\xc7\x12\xf0\x5a\x9e\xb5\x47\x16\x23\x1d\x43\x24\x64\x19\x33\xd8\x36\x53\x05\xa6\x4b\xb4\x7a\xf3\xe1\x1c\x58\xca\x27\xb1\x76\x7b\x38\x25\xd6\x83\xfb\xe7\x4e\x77\xf0\xa4\x79\x99\xbf\xc1\x1e\x76\xb0\xf6\x55\x3c\xcb\x40\x1f\x3f\x82\x0c\xb1\x0a\xcf\xa5\xf1\x95\x1d\xd5\x38\x5e\xe8\xfa\x9b\x85\xda\xf8\x43\x0c\x46\x53\xd6\xad\x6c\x6e\xf0\x15\x00\x00\xff\xff\xf3\x95\x67\x4d\x5d\x01\x00\x00"

func macaron_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mirc_routes_site_v1Tmpl,
		"macaron_mirc_routes_site_v1.tmpl",
	)
}

func macaron_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := macaron_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_mirc_routes_site_v1.tmpl", size: 349, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x8d, 0xaf, 0x66, 0x41, 0x48, 0x83, 0xfb, 0xe1, 0x89, 0x44, 0x2a, 0xd2, 0x28, 0xd, 0xc2, 0xe9, 0xa, 0x24, 0xd5, 0xa, 0xe9, 0xed, 0x86, 0xa2, 0xa4, 0xba, 0x75, 0x94, 0xb8, 0xb, 0xb}}
	return a, nil
}

var _macaron_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\xc1\x6a\xc3\x30\x0c\x06\xe0\xbb\x9e\x42\xf8\x94\x5c\x2a\xc8\xb1\xb7\x32\xc6\xd8\x79\x2f\x50\xcf\x51\x32\xb1\x5a\x0e\xaa\x92\x2d\x8c\xbe\xfb\x48\xeb\x8d\x41\x61\x17\xe3\x9f\xff\xfb\x35\xc5\xf4\x1e\x47\xc6\xa5\x03\x90\x3c\x15\x73\x6c\x00\x11\x31\x8c\xe2\x6f\xf3\xeb\x2e\x95\x4c\xf1\x24\x79\xa5\x2c\x46\x4b\x17\xfe\x6d\x89\x75\x14\xe5\x00\x2d\xc0\x30\x6b\x42\x51\xf1\xa6\xc5\xaf\xeb\xea\x56\xee\x0e\x7d\xff\xa8\x6e\x6b\xa3\xfc\xd1\xbc\x88\x73\xdb\xc2\x05\x80\x08\xb7\x80\xe7\xed\x59\x3a\x14\x75\xb6\x21\x26\x46\xd1\xa1\x80\xaf\x13\x57\xe0\x36\x27\xaf\x37\x9f\xac\xcc\xd3\xf6\xc9\x62\xbb\x5b\x38\x66\xb1\x7d\x58\xba\x70\xbc\x8a\x67\xed\xf9\xf3\x57\xb0\x23\x56\x41\xb2\x35\x54\xd9\xc1\x5c\xd2\x89\xcf\xf7\x2c\xd6\x86\xf6\x29\x3a\x8f\xc5\xd6\x9f\xcd\x43\xcd\xf7\x9b\xbf\xf2\x02\xdf\x01\x00\x00\xff\xff\x2c\x0c\xd5\xb0\x66\x01\x00\x00"

func macaron_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_macaron_mirc_routes_site_v2Tmpl,
		"macaron_mirc_routes_site_v2.tmpl",
	)
}

func macaron_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := macaron_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macaron_mirc_routes_site_v2.tmpl", size: 358, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0x2, 0x21, 0xb6, 0xad, 0x80, 0xee, 0xad, 0x51, 0xf0, 0x30, 0xa9, 0x20, 0x4f, 0x8, 0x22, 0x74, 0x6e, 0x5c, 0x2a, 0xbb, 0x9c, 0x26, 0x4, 0x2a, 0xa4, 0xff, 0x41, 0x20, 0xd5, 0x5b, 0x90}}
	return a, nil
}

var _makefileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\x4d\x4b\x03\x31\x14\x3c\xef\xfb\x15\x43\xe9\xa1\x2b\x24\xbd\x07\x8a\xbd\xd8\x2a\xa8\x2b\xe8\xc5\x63\x74\x5f\x62\x20\x1f\x25\x9b\xa0\xfe\x7b\xd9\xd5\xee\x82\xbd\xbc\x37\xcc\xbc\x79\x03\x73\xec\x0e\x0f\x2f\xb8\xde\xc1\x26\x13\x0a\xc4\x00\xf1\x49\xc7\xee\x70\x77\x7f\xf3\x0c\xb5\xc3\x7a\x33\x7c\xb0\xf7\x30\x2e\xf6\x90\x10\x51\x07\xc6\xea\x4a\xda\xb4\x82\x28\xdf\x27\x86\x69\x89\xe4\xd3\x6d\xf7\xf8\xaa\xd0\xb3\xd1\xd5\x17\xfa\xdb\x0a\xb9\xc6\x45\x7d\xab\xce\xf7\x34\x4d\x05\x13\x0a\x35\x36\xfd\x92\x10\x09\xc1\x65\xc1\x5f\x3a\x9c\x3c\x0f\x08\xda\x45\x69\xd3\x7f\x6f\xae\x71\x71\xe6\x1a\x2f\xef\x2c\x47\xce\xba\x30\x9d\x81\xa2\x66\x6f\xd3\xcc\x8f\x31\xef\xdb\xb3\xad\xd9\xaf\x37\x53\x03\x2d\xe4\x76\x79\x32\x26\x98\x50\x14\x35\xb3\x3c\x81\xb1\x94\x96\x7e\x02\x00\x00\xff\xff\x40\x00\x19\xaf\x33\x01\x00\x00"

func makefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_makefileTmpl,
		"makefile.tmpl",
	)
}

func makefileTmpl() (*asset, error) {
	bytes, err := makefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "makefile.tmpl", size: 307, mode: os.FileMode(0644), modTime: time.Unix(1585411956, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x53, 0xbf, 0x38, 0x4f, 0x3f, 0x7c, 0x3a, 0xa2, 0x9f, 0xf6, 0xd2, 0x4e, 0x6b, 0x47, 0x5, 0xef, 0x81, 0x8a, 0xd4, 0xee, 0xfa, 0xf6, 0xcc, 0x67, 0xb5, 0x5a, 0xda, 0x86, 0xba, 0x9e, 0x49}}
	return a, nil
}

var _mux_go_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\x31\x0a\x42\x31\x0c\x06\xe0\x3d\xa7\xf8\x47\x5d\x52\x5a\x05\x6f\x21\x5e\xa1\x6a\xa9\xc1\x86\x60\x30\x45\x79\xf4\xee\xee\xee\x9f\xda\x3d\x46\xc3\xb6\x81\x2f\xcf\x7e\xae\xda\xb0\x16\x51\x37\x64\xce\x85\xc8\xdb\x2b\xc4\x1b\x76\x04\x00\x5d\xde\x8f\xb8\xf2\xcd\x34\xd5\x21\xfa\x4d\x2a\x9e\x66\xc1\x2c\x7c\xe0\xf2\x4f\xba\xb9\x8c\x51\x93\xc6\x07\x33\xf3\x89\x8f\xb4\xa7\x5f\x00\x00\x00\xff\xff\x81\x25\x2a\xf6\x71\x00\x00\x00"

func mux_go_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_go_modTmpl,
		"mux_go_mod.tmpl",
	)
}

func mux_go_modTmpl() (*asset, error) {
	bytes, err := mux_go_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_go_mod.tmpl", size: 113, mode: os.FileMode(0644), modTime: time.Unix(1585645334, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xb, 0xb2, 0xa8, 0x5a, 0x29, 0x55, 0xab, 0x8e, 0xe8, 0x64, 0xab, 0xe, 0xa1, 0x42, 0xe7, 0x2c, 0xc8, 0x4a, 0x87, 0x1e, 0x46, 0x91, 0xe7, 0xba, 0xca, 0xc0, 0x41, 0x78, 0x2f, 0x15, 0xee}}
	return a, nil
}

var _mux_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x4f\x4b\xc4\x30\x10\xc5\xef\xf3\x29\xc6\x9c\x52\x91\x66\x8f\x4b\x65\x0f\x82\x78\x12\x17\xd4\x2f\x10\xeb\x6c\x1a\x4c\x93\x32\x9d\xea\x82\xf4\xbb\x4b\x92\x2e\x7b\x30\x97\xfc\x79\xf3\x5e\xde\x6f\xb2\xfd\x97\x75\x84\xa3\xf5\x11\xc0\x8f\x53\x62\x41\x0d\x88\x88\x2a\x24\xa7\xea\x29\x92\x98\x41\x64\x52\x50\xef\xce\xcb\xb0\x7c\xb4\x7d\x1a\x8d\x4b\xec\x43\xb0\x66\x5c\xce\x0a\x1a\x80\xd3\x12\xfb\x92\xa6\x1b\xfc\x2d\xd3\x8c\xdd\x01\xc7\xe5\xdc\xbe\xd0\xcf\x6b\x5a\x84\x58\x37\x35\xc7\x18\x64\x72\x7e\x16\x62\x9c\x89\xbf\x6d\x94\x19\x25\x61\x3f\xf8\xea\xdc\xc4\xb7\x4d\xd3\x7c\x35\xce\x62\x59\x2e\xae\xb2\xfb\x9e\x8a\xe8\x4f\x48\x5c\x3e\xcd\x95\xdb\xe7\x1c\x11\x1f\xe2\x67\x4e\x21\xad\xba\xfd\x6e\xbf\x53\x77\xc8\xcd\x7d\x99\xbb\x39\x60\xf4\x61\xeb\x9a\x57\x48\xae\x7d\xb2\x62\x83\x26\xe6\xa6\x3c\xaf\xb0\x6e\x64\xff\x2b\xe1\x6d\x66\xab\x60\x17\x64\x63\xf0\xfd\xf8\x78\xec\xae\x78\x9c\xf5\x02\xc7\xb0\xc2\x5f\x00\x00\x00\xff\xff\x86\x20\x9d\xee\x76\x01\x00\x00"

func mux_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mainTmpl,
		"mux_main.tmpl",
	)
}

func mux_mainTmpl() (*asset, error) {
	bytes, err := mux_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_main.tmpl", size: 374, mode: os.FileMode(0644), modTime: time.Unix(1583565237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0xd5, 0xc2, 0x39, 0x38, 0x8f, 0xff, 0x34, 0x50, 0xc7, 0x47, 0xe9, 0x2b, 0x50, 0xc, 0x56, 0x51, 0x70, 0x8f, 0x5b, 0xd5, 0x59, 0x38, 0xf6, 0xaf, 0xd9, 0xaa, 0xc2, 0x21, 0x92, 0x53, 0x8f}}
	return a, nil
}

var _mux_mirc_mainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xcf\x4e\xc3\x30\x0c\xc6\xef\x79\x0a\x93\x53\x2a\xa1\x46\xec\x38\xb4\x2b\x88\xc3\x60\x62\x0f\x80\x42\xe7\x65\xd1\x52\xbb\x72\xd3\x09\x34\xf5\xdd\x51\xd2\xf1\x67\x1c\x06\x3d\x54\xb1\xfd\xcb\x97\xef\x73\xe7\x9a\xbd\xf3\x08\xad\x0b\xa4\x54\x68\x3b\x96\x04\x46\x01\x00\xe8\xc8\x5e\xab\xe9\xe8\x43\xda\x0d\xaf\x75\xc3\xad\x75\x31\xb4\xef\xb6\x0d\x62\x0f\x33\xdb\xb0\xa0\xbe\x8c\x20\xf9\x40\x78\x12\x7a\x01\x7d\x3c\x42\xbd\xda\xfb\x47\xd7\x22\x8c\x63\xa6\x1a\x2b\x3c\x24\xec\xf5\xdf\x88\x3d\xdc\xfc\x8b\x9a\x69\x55\x29\x65\xad\xe7\xb9\x47\x42\x71\x09\xc1\x33\xc8\x40\x25\x69\xed\x59\x6d\x07\x6a\x4a\x61\x2a\x38\x16\xcd\xc8\xbe\x5e\x49\xa0\x14\xc9\xe8\xaf\x6b\x0d\x6f\x10\xfa\xe4\x24\xe9\xaa\x60\xdc\xa5\x1e\xe6\x0b\xc8\xd9\xeb\xa7\x2e\x05\xa6\x7e\x12\xc8\x5f\xe9\x3e\x0f\xb4\xe4\x0d\x9a\x52\x3c\xd0\x1a\x25\xb8\x98\x3b\xd5\xf5\x39\x78\x3f\xbd\xc2\x92\x53\x98\xf3\xd6\x72\x78\xfb\x8d\xaf\x03\xed\x57\x2e\xed\x8c\xae\xad\x47\xd2\xa7\xf9\x58\xfe\x61\x0b\x28\x92\x9d\x4d\x2b\xff\x54\x42\x93\x1d\x57\xb7\x65\x7a\xb5\x00\x0a\x11\xbe\xfd\xe6\xd0\x77\x2e\xb9\x68\x50\xa4\xfa\x21\x77\x61\x1b\xdb\x40\xa1\xdf\xe9\x4a\x8d\xea\x23\x00\x00\xff\xff\x7e\x81\x17\xc9\x40\x02\x00\x00"

func mux_mirc_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mirc_mainTmpl,
		"mux_mirc_main.tmpl",
	)
}

func mux_mirc_mainTmpl() (*asset, error) {
	bytes, err := mux_mirc_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_mirc_main.tmpl", size: 576, mode: os.FileMode(0644), modTime: time.Unix(1585301779, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfc, 0x15, 0xff, 0x6e, 0xf3, 0xbd, 0xed, 0xd7, 0x42, 0xd, 0x7a, 0x24, 0x12, 0x5b, 0xd, 0xa2, 0xed, 0x1a, 0x78, 0x84, 0xfd, 0x40, 0x92, 0x25, 0x9c, 0x8d, 0xe1, 0xa1, 0xe3, 0x8f, 0x60, 0xe5}}
	return a, nil
}

var _mux_mirc_routes_siteTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x41\x4b\xc4\x30\x10\x85\xef\xf3\x2b\x86\x1e\x96\x16\xd9\x46\xbc\xb9\xb0\xc8\x22\x22\x9e\x3d\x8a\xb0\xd9\x74\xda\x1d\x6c\x92\x32\x9d\xea\x96\x92\xff\x2e\xdd\x56\x10\x04\x2f\xc9\x7b\x7c\xdf\x0b\xa4\xb3\xee\xc3\x36\x84\x12\x07\xa5\x1e\x80\x7d\x17\x45\x31\x07\x44\xc4\xac\x61\x3d\x0f\xa7\xd2\x45\x6f\x6c\xcb\x7e\x34\x9e\xc5\x7c\xde\x65\xff\x52\x43\xa1\xe1\x40\x19\x14\x00\xf5\x10\x1c\x72\x60\xcd\x0b\x9c\xae\xab\x05\x96\x87\xaa\x7a\x0a\x2a\x63\x1e\xe8\x2b\x7f\x65\xa5\xa2\x80\x04\x60\x0c\xce\x05\xfb\xf9\xe0\xa0\x24\xb5\x75\x73\xaa\x23\xe8\xd8\xd1\x4a\x55\x06\xa7\xeb\x83\x8f\x67\xcb\x61\x0e\x9e\xa5\x5c\xca\xd1\xb3\xec\xb2\x6d\x76\xbc\x0a\x2f\xa1\xa2\xcb\x8f\xf0\x4c\x8a\xb8\x0a\x86\x67\x62\x56\xed\x20\xca\xae\xa5\xfe\xaf\x66\xa6\x7e\x38\x55\xd1\x5b\x0e\xa9\xa4\x8b\xf5\x5d\x4b\xcb\xaf\xd7\x89\x99\x9c\x55\x6a\xa2\x8c\xc9\x4c\x5c\xed\xde\x6e\xb7\xf7\xef\x37\xe9\xa1\xe6\x56\x49\xf6\xd3\x72\xa7\x4d\x1d\xe3\xfe\x64\x65\xc3\xd5\xfe\x97\x96\x1d\x21\xc1\x77\x00\x00\x00\xff\xff\x27\x1b\x93\xf1\x88\x01\x00\x00"

func mux_mirc_routes_siteTmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mirc_routes_siteTmpl,
		"mux_mirc_routes_site.tmpl",
	)
}

func mux_mirc_routes_siteTmpl() (*asset, error) {
	bytes, err := mux_mirc_routes_siteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_mirc_routes_site.tmpl", size: 392, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xec, 0x33, 0xa2, 0xdf, 0x97, 0x49, 0xf1, 0x0, 0x56, 0x5f, 0x3d, 0x69, 0x98, 0xc, 0x4a, 0x41, 0x2e, 0x89, 0xbb, 0x49, 0x25, 0x5d, 0x1, 0xa0, 0x5d, 0xca, 0xe5, 0x3e, 0xd1, 0x99, 0x16, 0xdb}}
	return a, nil
}

var _mux_mirc_routes_site_v1Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc3\x40\x10\x06\xe0\xfb\x3c\xc5\x90\x43\x49\x90\x66\xad\x37\x0b\x45\x8a\x88\x78\xf6\x28\x42\xb7\x9b\x49\x3a\x98\xdd\x0d\xd3\x49\x6c\x08\x79\x77\x49\x13\x45\x10\xbc\xec\xee\xcf\xff\xcd\x1e\xa6\xb1\xee\xc3\x56\x84\xdd\x06\x80\x7d\x13\x45\x31\x05\x44\xc4\xa4\x62\x3d\xb5\xc7\xdc\x45\x6f\x6c\xcd\xbe\x37\x9e\xc5\x74\x77\xc9\xbf\xad\xa1\x50\x71\xa0\x04\x32\x80\xb2\x0d\x0e\x39\xb0\xa6\x19\x0e\xd7\xa9\xb9\xcc\xf7\x45\xf1\x14\x54\xfa\x34\xd0\x67\xfa\xca\x4a\x59\x06\x23\x80\x31\x38\x05\x3c\x4f\x47\xb7\x41\x0e\x4a\x52\x5a\x47\xc8\xa1\x8c\xa0\x7d\x43\x0b\x50\x69\x9d\x2e\x7f\x3e\x9e\x2c\x87\xe9\xe1\x59\xf2\x39\x1c\x3c\xcb\x36\x59\x27\x87\x2b\x78\x96\xd8\x36\xdf\x60\x0e\x33\xe8\x36\x8b\x78\x09\x05\x5d\x7e\x04\x29\xe2\x22\x0c\x4f\x8d\x59\xd8\x5e\x94\x5d\x4d\xe7\xbf\xcc\x0c\xe7\xf6\x58\x44\x6f\x39\x8c\x39\x5d\xac\x6f\x6a\x9a\x57\xb3\x8c\x98\xc1\x59\xa5\x2a\x4a\x3f\x9a\x81\x8b\xed\xdb\xed\xfa\xfe\xfd\x66\x7c\x28\xb9\x56\x92\xdd\x30\xdf\xe3\xaa\x8c\x71\x77\xb4\xb2\xe2\x62\xf7\x8b\x25\x07\x18\xe1\x2b\x00\x00\xff\xff\x96\x75\x6f\x28\xa9\x01\x00\x00"

func mux_mirc_routes_site_v1TmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mirc_routes_site_v1Tmpl,
		"mux_mirc_routes_site_v1.tmpl",
	)
}

func mux_mirc_routes_site_v1Tmpl() (*asset, error) {
	bytes, err := mux_mirc_routes_site_v1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_mirc_routes_site_v1.tmpl", size: 425, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0x99, 0x54, 0x22, 0xf5, 0x82, 0xdf, 0x79, 0x41, 0xee, 0x18, 0x93, 0x57, 0x4b, 0x12, 0xa7, 0xe, 0xc4, 0xdd, 0x88, 0x19, 0xa4, 0x41, 0x22, 0xe3, 0x9f, 0x75, 0x5f, 0xf9, 0x39, 0xf6, 0x93}}
	return a, nil
}

var _mux_mirc_routes_site_v2Tmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x41\x4b\xc4\x30\x10\x85\xef\xf9\x15\x43\x0f\x4b\x8b\xd8\x48\x6f\x2e\x2c\xb2\x88\x88\x67\x8f\x22\x6c\x36\x9d\xd6\xc1\x26\x29\xb3\xd3\xba\xa5\xe4\xbf\x4b\xb7\x51\x84\x05\x2f\x49\x86\xf7\xbd\xf7\x32\xbd\xb1\x9f\xa6\x45\x18\x2b\xa5\xc8\xf5\x81\x05\x72\x05\x00\x90\xb5\x24\x1f\xc3\xb1\xb4\xc1\x69\xd3\x91\x9b\xb4\x23\xd6\x63\x95\xfd\xab\x6a\xf4\x2d\x79\xcc\x54\xa1\x54\x33\x78\x0b\xe4\x49\xf2\x02\xe6\x8b\x6b\x15\xcb\x7d\x5d\x3f\x79\xe1\x29\xf7\xf8\x95\xbf\x92\x60\x51\xa8\xa8\x94\xd6\xb0\x0c\x70\x5a\x8e\xb1\x02\xf2\x82\xdc\x18\x8b\x40\xbe\x09\x4a\xa6\x1e\x13\x20\x3c\x58\x49\x99\xcf\x1c\x86\x7e\x79\x38\xe2\x72\x1d\x0e\x8e\x78\x9b\x8d\x55\x76\xb8\x10\x2f\xbe\xc6\xf3\x2f\x81\x02\x90\x08\x4d\x8b\xa2\x13\xb6\x67\x21\xdb\xe1\xe9\x1a\xd3\xf3\x69\x38\xd6\xc1\x19\xf2\xb1\xc4\xb3\x71\x7d\x87\xeb\xe6\xc9\xa2\x67\x6b\x04\xdb\xc0\x53\xd4\x33\xd5\xdb\xb7\xbb\xdb\xfb\xf7\x9b\xf8\xd0\x50\x27\xc8\xbb\x79\xbd\xe3\xa6\x09\x61\x77\x34\xbc\xa1\x7a\xf7\x07\x4b\xfd\x8f\x29\xe2\xba\xff\x27\x7c\xf9\x69\x54\xdf\x01\x00\x00\xff\xff\xcc\x0e\x94\x55\xb2\x01\x00\x00"

func mux_mirc_routes_site_v2TmplBytes() ([]byte, error) {
	return bindataRead(
		_mux_mirc_routes_site_v2Tmpl,
		"mux_mirc_routes_site_v2.tmpl",
	)
}

func mux_mirc_routes_site_v2Tmpl() (*asset, error) {
	bytes, err := mux_mirc_routes_site_v2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mux_mirc_routes_site_v2.tmpl", size: 434, mode: os.FileMode(0644), modTime: time.Unix(1585134022, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0xf5, 0xf7, 0x85, 0x90, 0x42, 0x45, 0x59, 0xa1, 0x19, 0x85, 0x14, 0x75, 0x13, 0xee, 0x41, 0xb6, 0xee, 0xd, 0xa8, 0x72, 0x43, 0xdf, 0xf3, 0xb0, 0xc3, 0x95, 0x35, 0xd, 0x41, 0xd4, 0x62}}
	return a, nil
}

var _readmeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\x4b\xae\xc2\x30\x0c\x46\xe1\xb9\x57\xf1\x4b\xd6\xd5\x1d\xc1\x6e\x98\xc7\x05\xd3\xa6\xe4\x25\x3b\x11\x65\xf7\x28\x48\x1d\x1e\x9d\x8f\x19\x39\xda\x45\x0f\xc9\x2d\xa9\xd3\x3e\xbc\x43\xe0\x71\xe6\x5c\xff\x8e\x73\xe2\x59\x0d\x7a\xb4\x24\xb1\x60\xab\x6f\xf4\x8a\xe1\x3f\x85\x58\xf0\xa9\xc3\xd0\xac\xee\x7a\xef\x57\x22\x66\x66\xdc\x5c\x56\xa5\x10\xc2\x22\xbe\xd1\x1f\xb2\xbc\x14\xab\x16\x35\xe9\x7a\xf6\x32\x62\x7a\x4c\x44\xdf\x00\x00\x00\xff\xff\x07\x15\x44\x7b\x8e\x00\x00\x00"

func readmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_readmeTmpl,
		"readme.tmpl",
	)
}

func readmeTmpl() (*asset, error) {
	bytes, err := readmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme.tmpl", size: 142, mode: os.FileMode(0644), modTime: time.Unix(1583485705, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0x93, 0xd9, 0x49, 0x63, 0xdd, 0x1, 0xbf, 0xc2, 0x90, 0x6c, 0xd6, 0x94, 0x31, 0xcd, 0xa0, 0xe2, 0x63, 0x53, 0xef, 0xb5, 0x96, 0x41, 0xce, 0x42, 0x53, 0x68, 0x9, 0xd7, 0x7f, 0x2b, 0x25}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"chi_go_mod.tmpl":                     chi_go_modTmpl,
	"chi_main.tmpl":                       chi_mainTmpl,
	"chi_mirc_main.tmpl":                  chi_mirc_mainTmpl,
	"chi_mirc_routes_site.tmpl":           chi_mirc_routes_siteTmpl,
	"chi_mirc_routes_site_v1.tmpl":        chi_mirc_routes_site_v1Tmpl,
	"chi_mirc_routes_site_v2.tmpl":        chi_mirc_routes_site_v2Tmpl,
	"echo_go_mod.tmpl":                    echo_go_modTmpl,
	"echo_main.tmpl":                      echo_mainTmpl,
	"echo_mirc_main.tmpl":                 echo_mirc_mainTmpl,
	"echo_mirc_routes_site.tmpl":          echo_mirc_routes_siteTmpl,
	"echo_mirc_routes_site_v1.tmpl":       echo_mirc_routes_site_v1Tmpl,
	"echo_mirc_routes_site_v2.tmpl":       echo_mirc_routes_site_v2Tmpl,
	"gin_go_mod.tmpl":                     gin_go_modTmpl,
	"gin_main.tmpl":                       gin_mainTmpl,
	"gin_mirc_main.tmpl":                  gin_mirc_mainTmpl,
	"gin_mirc_routes_site.tmpl":           gin_mirc_routes_siteTmpl,
	"gin_mirc_routes_site_v1.tmpl":        gin_mirc_routes_site_v1Tmpl,
	"gin_mirc_routes_site_v2.tmpl":        gin_mirc_routes_site_v2Tmpl,
	"httprouter_go_mod.tmpl":              httprouter_go_modTmpl,
	"httprouter_main.tmpl":                httprouter_mainTmpl,
	"httprouter_mirc_main.tmpl":           httprouter_mirc_mainTmpl,
	"httprouter_mirc_routes_site.tmpl":    httprouter_mirc_routes_siteTmpl,
	"httprouter_mirc_routes_site_v1.tmpl": httprouter_mirc_routes_site_v1Tmpl,
	"httprouter_mirc_routes_site_v2.tmpl": httprouter_mirc_routes_site_v2Tmpl,
	"iris_go_mod.tmpl":                    iris_go_modTmpl,
	"iris_main.tmpl":                      iris_mainTmpl,
	"iris_mirc_main.tmpl":                 iris_mirc_mainTmpl,
	"iris_mirc_routes_site.tmpl":          iris_mirc_routes_siteTmpl,
	"iris_mirc_routes_site_v1.tmpl":       iris_mirc_routes_site_v1Tmpl,
	"iris_mirc_routes_site_v2.tmpl":       iris_mirc_routes_site_v2Tmpl,
	"macaron_go_mod.tmpl":                 macaron_go_modTmpl,
	"macaron_main.tmpl":                   macaron_mainTmpl,
	"macaron_mirc_main.tmpl":              macaron_mirc_mainTmpl,
	"macaron_mirc_routes_site.tmpl":       macaron_mirc_routes_siteTmpl,
	"macaron_mirc_routes_site_v1.tmpl":    macaron_mirc_routes_site_v1Tmpl,
	"macaron_mirc_routes_site_v2.tmpl":    macaron_mirc_routes_site_v2Tmpl,
	"makefile.tmpl":                       makefileTmpl,
	"mux_go_mod.tmpl":                     mux_go_modTmpl,
	"mux_main.tmpl":                       mux_mainTmpl,
	"mux_mirc_main.tmpl":                  mux_mirc_mainTmpl,
	"mux_mirc_routes_site.tmpl":           mux_mirc_routes_siteTmpl,
	"mux_mirc_routes_site_v1.tmpl":        mux_mirc_routes_site_v1Tmpl,
	"mux_mirc_routes_site_v2.tmpl":        mux_mirc_routes_site_v2Tmpl,
	"readme.tmpl":                         readmeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"chi_go_mod.tmpl":                     {chi_go_modTmpl, map[string]*bintree{}},
	"chi_main.tmpl":                       {chi_mainTmpl, map[string]*bintree{}},
	"chi_mirc_main.tmpl":                  {chi_mirc_mainTmpl, map[string]*bintree{}},
	"chi_mirc_routes_site.tmpl":           {chi_mirc_routes_siteTmpl, map[string]*bintree{}},
	"chi_mirc_routes_site_v1.tmpl":        {chi_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"chi_mirc_routes_site_v2.tmpl":        {chi_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"echo_go_mod.tmpl":                    {echo_go_modTmpl, map[string]*bintree{}},
	"echo_main.tmpl":                      {echo_mainTmpl, map[string]*bintree{}},
	"echo_mirc_main.tmpl":                 {echo_mirc_mainTmpl, map[string]*bintree{}},
	"echo_mirc_routes_site.tmpl":          {echo_mirc_routes_siteTmpl, map[string]*bintree{}},
	"echo_mirc_routes_site_v1.tmpl":       {echo_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"echo_mirc_routes_site_v2.tmpl":       {echo_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"gin_go_mod.tmpl":                     {gin_go_modTmpl, map[string]*bintree{}},
	"gin_main.tmpl":                       {gin_mainTmpl, map[string]*bintree{}},
	"gin_mirc_main.tmpl":                  {gin_mirc_mainTmpl, map[string]*bintree{}},
	"gin_mirc_routes_site.tmpl":           {gin_mirc_routes_siteTmpl, map[string]*bintree{}},
	"gin_mirc_routes_site_v1.tmpl":        {gin_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"gin_mirc_routes_site_v2.tmpl":        {gin_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"httprouter_go_mod.tmpl":              {httprouter_go_modTmpl, map[string]*bintree{}},
	"httprouter_main.tmpl":                {httprouter_mainTmpl, map[string]*bintree{}},
	"httprouter_mirc_main.tmpl":           {httprouter_mirc_mainTmpl, map[string]*bintree{}},
	"httprouter_mirc_routes_site.tmpl":    {httprouter_mirc_routes_siteTmpl, map[string]*bintree{}},
	"httprouter_mirc_routes_site_v1.tmpl": {httprouter_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"httprouter_mirc_routes_site_v2.tmpl": {httprouter_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"iris_go_mod.tmpl":                    {iris_go_modTmpl, map[string]*bintree{}},
	"iris_main.tmpl":                      {iris_mainTmpl, map[string]*bintree{}},
	"iris_mirc_main.tmpl":                 {iris_mirc_mainTmpl, map[string]*bintree{}},
	"iris_mirc_routes_site.tmpl":          {iris_mirc_routes_siteTmpl, map[string]*bintree{}},
	"iris_mirc_routes_site_v1.tmpl":       {iris_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"iris_mirc_routes_site_v2.tmpl":       {iris_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"macaron_go_mod.tmpl":                 {macaron_go_modTmpl, map[string]*bintree{}},
	"macaron_main.tmpl":                   {macaron_mainTmpl, map[string]*bintree{}},
	"macaron_mirc_main.tmpl":              {macaron_mirc_mainTmpl, map[string]*bintree{}},
	"macaron_mirc_routes_site.tmpl":       {macaron_mirc_routes_siteTmpl, map[string]*bintree{}},
	"macaron_mirc_routes_site_v1.tmpl":    {macaron_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"macaron_mirc_routes_site_v2.tmpl":    {macaron_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"makefile.tmpl":                       {makefileTmpl, map[string]*bintree{}},
	"mux_go_mod.tmpl":                     {mux_go_modTmpl, map[string]*bintree{}},
	"mux_main.tmpl":                       {mux_mainTmpl, map[string]*bintree{}},
	"mux_mirc_main.tmpl":                  {mux_mirc_mainTmpl, map[string]*bintree{}},
	"mux_mirc_routes_site.tmpl":           {mux_mirc_routes_siteTmpl, map[string]*bintree{}},
	"mux_mirc_routes_site_v1.tmpl":        {mux_mirc_routes_site_v1Tmpl, map[string]*bintree{}},
	"mux_mirc_routes_site_v2.tmpl":        {mux_mirc_routes_site_v2Tmpl, map[string]*bintree{}},
	"readme.tmpl":                         {readmeTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
