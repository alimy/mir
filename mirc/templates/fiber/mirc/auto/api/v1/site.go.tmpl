// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir 5.2

package v1

import (
	"net/http"

	"github.com/alimy/mir/v5"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
)

type _binding_ interface {
	Bind(*fiber.Ctx) error
}

type _render_ interface {
	Render(*fiber.Ctx)
}

type _default_ interface {
	Bind(*fiber.Ctx, any) error
	Render(*fiber.Ctx, any, error)
}

type Site interface {
	_default_

	// Chain provide handlers chain for fiber
	Chain() []any

	MultiAttachments(*fiber.Ctx) error
	ManyResources(*fiber.Ctx) error
	AnyStaticks(*fiber.Ctx) error
	Statics(*fiber.Ctx) error
	FileUpload(*fiber.Ctx) error
	ImageUpload(*fiber.Ctx) error
	Articles() error
	Index() error

	mustEmbedUnimplementedSiteServant()
}

// RegisterSiteServant register Site servant to fiber
func RegisterSiteServant(app *fiber.App, s Site) {
	router := app.Group("/v1")
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	{
		h := s.MultiAttachments
		router.Add("GET", "/attachments/:name/", h)
		router.Add("HEAD", "/attachments/:name/", h)
		router.Add("OPTIONS", "/attachments/:name/", h)
	}
	{
		h := s.ManyResources
		router.Add("GET", "/resources/:name/", h)
		router.Add("HEAD", "/resources/:name/", h)
		router.Add("OPTIONS", "/resources/:name/", h)
	}
	router.All("/anystaticks/:name/", s.AnyStaticks)
	router.Add("GET", "/statics/:name/", s.Statics)
	router.Add("POST", "/upload/file/:name/", s.FileUpload)
	router.Add("POST", "/upload/image/:name/", s.ImageUpload)
	{
		h := func(c *fiber.Ctx) error {

			s.Render(c, nil, s.Articles())
			return nil
		}
		router.Add("GET", "/articles/:category/", h)
		router.Add("HEAD", "/articles/:category/", h)
		router.Add("POST", "/articles/:category/", h)
	}
	router.Add("GET", "/index/", func(c *fiber.Ctx) error {

		s.Render(c, nil, s.Index())
		return nil
	})
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) Chain() []any {
	return []any{logger.New()}
}

func (UnimplementedSiteServant) MultiAttachments(c *fiber.Ctx) error {
	c.Status(http.StatusNotImplemented)
	c.Write([]byte("method not implemented"))
	return nil
}

func (UnimplementedSiteServant) ManyResources(c *fiber.Ctx) error {
	c.Status(http.StatusNotImplemented)
	c.Write([]byte("method not implemented"))
	return nil
}

func (UnimplementedSiteServant) AnyStaticks(c *fiber.Ctx) error {
	c.Status(http.StatusNotImplemented)
	c.Write([]byte("method not implemented"))
	return nil
}

func (UnimplementedSiteServant) Statics(c *fiber.Ctx) error {
	c.Status(http.StatusNotImplemented)
	c.Write([]byte("method not implemented"))
	return nil
}

func (UnimplementedSiteServant) FileUpload(c *fiber.Ctx) error {
	c.Status(http.StatusNotImplemented)
	c.Write([]byte("method not implemented"))
	return nil
}

func (UnimplementedSiteServant) ImageUpload(c *fiber.Ctx) error {
	c.Status(http.StatusNotImplemented)
	c.Write([]byte("method not implemented"))
	return nil
}

func (UnimplementedSiteServant) Articles() error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}
