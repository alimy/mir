// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir 5.0.1

package api

import (
	"net/http"

	"github.com/alimy/mir/v5"
	"github.com/julienschmidt/httprouter"
)

type _binding_ interface {
	Bind(*http.Request, httprouter.Params) mir.Error
}

type _render_ interface {
	Render(http.ResponseWriter)
}

type _default_ interface {
	Bind(*http.Request, httprouter.Params, any) mir.Error
	Render(http.ResponseWriter, any, mir.Error)
}

type LoginReq struct {
	AgentInfo AgentInfo `json:"agent_info"`
	Name      string    `json:"name"`
	Passwd    string    `json:"passwd"`
}

type AgentInfo struct {
	Platform  string `json:"platform"`
	UserAgent string `json:"user_agent"`
}

type LoginResp struct {
	UserInfo
	ServerInfo ServerInfo `json:"server_info"`
	JwtToken   string     `json:"jwt_token"`
}

type ServerInfo struct {
	ApiVer string `json:"api_ver"`
}

type UserInfo struct {
	Name string `json:"name"`
}

type LogoutReq struct {
	AgentInfo AgentInfo `json:"agent_info"`
	Name      string    `json:"name"`
}

type TweetsReq struct {
	Date string `json:"date"`
}

type TweetsResp struct {
	Tweets []Tweet `json:"tweets"`
	Total  uint32  `json:"total"`
}

type Tweet struct {
	Type    string `json:"type"`
	Content string `json:"content"`
}

type Site interface {
	_default_

	MultiAttachments(http.ResponseWriter, *http.Request, httprouter.Params)
	ManyResources(http.ResponseWriter, *http.Request, httprouter.Params)
	AnyStaticks(http.ResponseWriter, *http.Request, httprouter.Params)
	Statics(http.ResponseWriter, *http.Request, httprouter.Params)
	Assets(http.ResponseWriter, *http.Request, httprouter.Params, *LoginReq) mir.Error
	SimpleUpload(http.ResponseWriter, *http.Request, httprouter.Params, *LoginReq) (*LoginResp, mir.Error)
	FileUpload(http.ResponseWriter, *http.Request, httprouter.Params)
	ImageUpload(http.ResponseWriter, *http.Request, httprouter.Params)
	Logout(*LogoutReq) mir.Error
	Login(*LoginReq) (*LoginResp, mir.Error)
	PrevTweets(*TweetsReq) (*TweetsResp, mir.Error)
	NextTweets(*TweetsReq) (*TweetsResp, mir.Error)
	Articles() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

// RegisterSiteServant register Site servant to httprouter
func RegisterSiteServant(router *httprouter.Router, s Site) {
	{
		h := s.MultiAttachments
		router.Handle("GET", "/attachments/:name/", h)
		router.Handle("HEAD", "/attachments/:name/", h)
		router.Handle("OPTIONS", "/attachments/:name/", h)
	}
	{
		h := s.ManyResources
		router.Handle("GET", "/resources/:name/", h)
		router.Handle("HEAD", "/resources/:name/", h)
		router.Handle("OPTIONS", "/resources/:name/", h)
	}
	{
		h := s.AnyStaticks
		router.Handle("CONNECT", "/anystaticks/:name/", h)
		router.Handle("DELETE", "/anystaticks/:name/", h)
		router.Handle("GET", "/anystaticks/:name/", h)
		router.Handle("HEAD", "/anystaticks/:name/", h)
		router.Handle("OPTIONS", "/anystaticks/:name/", h)
		router.Handle("PATCH", "/anystaticks/:name/", h)
		router.Handle("POST", "/anystaticks/:name/", h)
		router.Handle("PUT", "/anystaticks/:name/", h)
		router.Handle("TRACE", "/anystaticks/:name/", h)
	}
	router.Handle("GET", "/statics/:name/", s.Statics)
	router.Handle("GET", "/assets/:name/", func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}
		req := new(LoginReq)
		if err := s.Bind(hr, p, req); err != nil {
			s.Render(rw, nil, err)
			return
		}
		s.Render(rw, nil, s.Assets(rw, hr, p, req))
	})
	router.Handle("POST", "/upload/simple/:name/", func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}
		req := new(LoginReq)
		if err := s.Bind(hr, p, req); err != nil {
			s.Render(rw, nil, err)
			return
		}
		resp, err := s.SimpleUpload(rw, hr, p, req)
		s.Render(rw, resp, err)
	})
	router.Handle("POST", "/upload/file/:name/", s.FileUpload)
	router.Handle("POST", "/upload/image/:name/", s.ImageUpload)
	router.Handle("POST", "/user/logout/", func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}
		req := new(LogoutReq)
		if err := s.Bind(hr, p, req); err != nil {
			s.Render(rw, nil, err)
			return
		}
		s.Render(rw, nil, s.Logout(req))
	})
	router.Handle("POST", "/user/login/", func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}
		req := new(LoginReq)
		if err := s.Bind(hr, p, req); err != nil {
			s.Render(rw, nil, err)
			return
		}
		resp, err := s.Login(req)
		s.Render(rw, resp, err)
	})
	{
		h := func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
			select {
			case <-hr.Context().Done():
				return
			default:
			}
			req := new(TweetsReq)
			if err := s.Bind(hr, p, req); err != nil {
				s.Render(rw, nil, err)
				return
			}
			resp, err := s.PrevTweets(req)
			s.Render(rw, resp, err)
		}
		router.Handle("GET", "/tweets/prev", h)
		router.Handle("HEAD", "/tweets/prev", h)
		router.Handle("POST", "/tweets/prev", h)
	}
	{
		h := func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
			select {
			case <-hr.Context().Done():
				return
			default:
			}
			req := new(TweetsReq)
			if err := s.Bind(hr, p, req); err != nil {
				s.Render(rw, nil, err)
				return
			}
			resp, err := s.NextTweets(req)
			s.Render(rw, resp, err)
		}
		router.Handle("CONNECT", "/tweets/next", h)
		router.Handle("DELETE", "/tweets/next", h)
		router.Handle("GET", "/tweets/next", h)
		router.Handle("HEAD", "/tweets/next", h)
		router.Handle("OPTIONS", "/tweets/next", h)
		router.Handle("PATCH", "/tweets/next", h)
		router.Handle("POST", "/tweets/next", h)
		router.Handle("PUT", "/tweets/next", h)
		router.Handle("TRACE", "/tweets/next", h)
	}
	router.Handle("GET", "/articles/:category/", func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.Articles())
	})
	router.Handle("GET", "/index/", func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.Index())
	})
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) MultiAttachments(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) ManyResources(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) AnyStaticks(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) Statics(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) Assets(rw http.ResponseWriter, hr *http.Request, p httprouter.Params, req *LoginReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) SimpleUpload(rw http.ResponseWriter, hr *http.Request, p httprouter.Params, req *LoginReq) (*LoginResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) FileUpload(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) ImageUpload(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) Logout(req *LogoutReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Login(req *LoginReq) (*LoginResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) PrevTweets(req *TweetsReq) (*TweetsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) NextTweets(req *TweetsReq) (*TweetsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}
