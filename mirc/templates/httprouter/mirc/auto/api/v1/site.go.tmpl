// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.1.0

package v1

import (
	"net/http"

	"github.com/alimy/mir/v4"
	"github.com/julienschmidt/httprouter"
)

type _binding_ interface {
	Bind(*http.Request, httprouter.Params) mir.Error
}

type _render_ interface {
	Render(http.ResponseWriter)
}

type _default_ interface {
	Bind(*http.Request, httprouter.Params, any) mir.Error
	Render(http.ResponseWriter, any, mir.Error)
}

type Site interface {
	_default_

	MultiAttachments(http.ResponseWriter, *http.Request, httprouter.Params)
	ManyResources(http.ResponseWriter, *http.Request, httprouter.Params)
	AnyStaticks(http.ResponseWriter, *http.Request, httprouter.Params)
	Statics(http.ResponseWriter, *http.Request, httprouter.Params)
	FileUpload(http.ResponseWriter, *http.Request, httprouter.Params)
	ImageUpload(http.ResponseWriter, *http.Request, httprouter.Params)
	Articles() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

// RegisterSiteServant register Site servant to httprouter
func RegisterSiteServant(router *httprouter.Router, s Site) {
	{
		h := s.MultiAttachments
		router.Handle("OPTIONS", "/v1/attachments/:name/", h)
		router.Handle("HEAD", "/v1/attachments/:name/", h)
		router.Handle("GET", "/v1/attachments/:name/", h)
	}
	{
		h := s.ManyResources
		router.Handle("OPTIONS", "/v1/resources/:name/", h)
		router.Handle("HEAD", "/v1/resources/:name/", h)
		router.Handle("GET", "/v1/resources/:name/", h)
	}
	{
		h := s.AnyStaticks
		router.Handle("PATCH", "/v1/anystaticks/:name/", h)
		router.Handle("DELETE", "/v1/anystaticks/:name/", h)
		router.Handle("CONNECT", "/v1/anystaticks/:name/", h)
		router.Handle("GET", "/v1/anystaticks/:name/", h)
		router.Handle("HEAD", "/v1/anystaticks/:name/", h)
		router.Handle("POST", "/v1/anystaticks/:name/", h)
		router.Handle("PUT", "/v1/anystaticks/:name/", h)
		router.Handle("OPTIONS", "/v1/anystaticks/:name/", h)
		router.Handle("TRACE", "/v1/anystaticks/:name/", h)
	}
	router.Handle("GET", "/v1/statics/:name/", s.Statics)
	router.Handle("POST", "/v1/upload/file/:name/", s.FileUpload)
	router.Handle("POST", "/v1/upload/image/:name/", s.ImageUpload)
	{
		h := func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
			select {
			case <-hr.Context().Done():
				return
			default:
			}

			s.Render(rw, nil, s.Articles())
		}
		router.Handle("GET", "/v1/articles/:category/", h)
		router.Handle("HEAD", "/v1/articles/:category/", h)
		router.Handle("POST", "/v1/articles/:category/", h)
	}
	router.Handle("GET", "/v1/index/", func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.Index())
	})
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) MultiAttachments(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) ManyResources(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) AnyStaticks(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) Statics(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) FileUpload(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) ImageUpload(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}
