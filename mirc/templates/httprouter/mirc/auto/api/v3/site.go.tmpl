// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.0.0

package v3

import (
	"net/http"

	"{{ .PkgName }}/model"
	"github.com/alimy/mir/v4"
	"github.com/julienschmidt/httprouter"
)

type _binding_ interface {
	Bind(*http.Request, httprouter.Params) mir.Error
}

type _render_ interface {
	Render(http.ResponseWriter)
}

type _default_ interface {
	Bind(*http.Request, httprouter.Params, any) mir.Error
	Render(http.ResponseWriter, any, mir.Error)
}

type Site interface {
	_default_

	Logout() mir.Error
	Login(*model.LoginReq) (*model.LoginResp, mir.Error)
	PrevTweets(*model.TweetsReq) (*model.TweetsResp, mir.Error)
	NextTweets(*model.TweetsReq) (*model.TweetsResp, mir.Error)
	Articles() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

// RegisterSiteServant register Site servant to httprouter
func RegisterSiteServant(router *httprouter.Router, s Site) {
	router.Handle("POST", "/v3/user/logout/", func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.Logout())
	})
	router.Handle("POST", "/v3/user/login/", func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}
		req := new(model.LoginReq)
		var bv _binding_ = req
		if err := bv.Bind(hr, p); err != nil {
			s.Render(rw, nil, err)
			return
		}
		resp, err := s.Login(req)
		if err != nil {
			s.Render(rw, nil, err)
			return
		}
		var rv _render_ = resp
		rv.Render(rw)
	})
	{
		h := func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
			select {
			case <-hr.Context().Done():
				return
			default:
			}
			req := new(model.TweetsReq)
			if err := s.Bind(hr, p, req); err != nil {
				s.Render(rw, nil, err)
				return
			}
			resp, err := s.PrevTweets(req)
			s.Render(rw, resp, err)
		}
		router.Handle("GET", "/v3/tweets/prev/", h)
		router.Handle("POST", "/v3/tweets/prev/", h)
		router.Handle("HEAD", "/v3/tweets/prev/", h)
	}
	{
		h := func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
			select {
			case <-hr.Context().Done():
				return
			default:
			}
			req := new(model.TweetsReq)
			if err := s.Bind(hr, p, req); err != nil {
				s.Render(rw, nil, err)
				return
			}
			resp, err := s.NextTweets(req)
			s.Render(rw, resp, err)
		}
		router.Handle("POST", "/v3/tweets/next/", h)
		router.Handle("PATCH", "/v3/tweets/next/", h)
		router.Handle("CONNECT", "/v3/tweets/next/", h)
		router.Handle("OPTIONS", "/v3/tweets/next/", h)
		router.Handle("GET", "/v3/tweets/next/", h)
		router.Handle("HEAD", "/v3/tweets/next/", h)
		router.Handle("PUT", "/v3/tweets/next/", h)
		router.Handle("DELETE", "/v3/tweets/next/", h)
		router.Handle("TRACE", "/v3/tweets/next/", h)
	}
	router.Handle("GET", "/v3/articles/:category/", func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.Articles())
	})
	router.Handle("GET", "/v3/index/", func(rw http.ResponseWriter, hr *http.Request, p httprouter.Params) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.Index())
	})
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) Logout() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Login(req *model.LoginReq) (*model.LoginResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) PrevTweets(req *model.TweetsReq) (*model.TweetsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) NextTweets(req *model.TweetsReq) (*model.TweetsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}
