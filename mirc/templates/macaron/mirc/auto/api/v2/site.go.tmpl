// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v3.1.1

package v2

import (
	"net/http"

	"github.com/alimy/mir/v3"
	"gopkg.in/macaron.v1"
)

type LoginReq struct {
	AgentInfo AgentInfo `json:"agent_info"`
	Name      string    `json:"name"`
	Passwd    string    `json:"passwd"`
}

type AgentInfo struct {
	Platform  string `json:"platform"`
	UserAgent string `json:"user_agent"`
}

type LoginResp struct {
	UserInfo
	ServerInfo ServerInfo `json:"server_info"`
	JwtToken   string     `json:"jwt_token"`
}

type ServerInfo struct {
	ApiVer string `json:"api_ver"`
}

type UserInfo struct {
	Name string `json:"name"`
}

type TweetsReq struct {
	Date string `json:"date"`
}

type TweetsResp struct {
	Tweets []Tweet `json:"tweets"`
	Total  uint32  `json:"total"`
}

type Tweet struct {
	Type    string `json:"type"`
	Content string `json:"content"`
}

type Site interface {
	Logout() mir.Error
	Login(*LoginReq) (*LoginResp, mir.Error)
	PrevTweets(*TweetsReq) (*TweetsResp, mir.Error)
	NextTweets(*TweetsReq) (*TweetsResp, mir.Error)
	Articles() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

type SiteBinding interface {
	BindLogin(*macaron.Context) (*LoginReq, mir.Error)
	BindPrevTweets(*macaron.Context) (*TweetsReq, mir.Error)
	BindNextTweets(*macaron.Context) (*TweetsReq, mir.Error)

	mustEmbedUnimplementedSiteBinding()
}

type SiteRender interface {
	RenderLogout(*macaron.Context, mir.Error)
	RenderLogin(*macaron.Context, *LoginResp, mir.Error)
	RenderPrevTweets(*macaron.Context, *TweetsResp, mir.Error)
	RenderNextTweets(*macaron.Context, *TweetsResp, mir.Error)
	RenderArticles(*macaron.Context, mir.Error)
	RenderIndex(*macaron.Context, mir.Error)

	mustEmbedUnimplementedSiteRender()
}

// RegisterSiteServant register Site servant to macaron
func RegisterSiteServant(m *macaron.Macaron, s Site, b SiteBinding, r SiteRender) {
	m.Group("v2", func() {
		m.Handle("POST", "/user/logout/", []macaron.Handler{func(c *macaron.Context) {
			r.RenderLogout(c, s.Logout())
		}})

		m.Handle("POST", "/user/login/", []macaron.Handler{func(c *macaron.Context) {
			req, err := b.BindLogin(c)
			if err != nil {
				r.RenderLogin(c, nil, err)
				return
			}
			resp, err := s.Login(req)
			r.RenderLogin(c, resp, err)
		}})

		{
			h := func(c *macaron.Context) {
				req, err := b.BindPrevTweets(c)
				if err != nil {
					r.RenderPrevTweets(c, nil, err)
					return
				}
				resp, err := s.PrevTweets(req)
				r.RenderPrevTweets(c, resp, err)
			}
			m.Handle("HEAD", "/tweets/prev", []macaron.Handler{h})
			m.Handle("GET", "/tweets/prev", []macaron.Handler{h})
			m.Handle("POST", "/tweets/prev", []macaron.Handler{h})
		}
		m.Any("/tweets/next", func(c *macaron.Context) {
			req, err := b.BindNextTweets(c)
			if err != nil {
				r.RenderNextTweets(c, nil, err)
				return
			}
			resp, err := s.NextTweets(req)
			r.RenderNextTweets(c, resp, err)
		})

		m.Handle("GET", "/articles/:category/", []macaron.Handler{func(c *macaron.Context) {
			r.RenderArticles(c, s.Articles())
		}})

		m.Handle("GET", "/index/", []macaron.Handler{func(c *macaron.Context) {
			r.RenderIndex(c, s.Index())
		}})

	})
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct {
}

func (UnimplementedSiteServant) Logout() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Login(req *LoginReq) (*LoginResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) PrevTweets(req *TweetsReq) (*TweetsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) NextTweets(req *TweetsReq) (*TweetsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}

// UnimplementedSiteRender can be embedded to have forward compatible implementations.
type UnimplementedSiteRender struct {
	RenderAny func(*macaron.Context, any, mir.Error)
}

func (r *UnimplementedSiteRender) RenderLogout(c *macaron.Context, err mir.Error) {
	r.RenderAny(c, nil, err)
}

func (r *UnimplementedSiteRender) RenderLogin(c *macaron.Context, data *LoginResp, err mir.Error) {
	r.RenderAny(c, data, err)
}

func (r *UnimplementedSiteRender) RenderPrevTweets(c *macaron.Context, data *TweetsResp, err mir.Error) {
	r.RenderAny(c, data, err)
}

func (r *UnimplementedSiteRender) RenderNextTweets(c *macaron.Context, data *TweetsResp, err mir.Error) {
	r.RenderAny(c, data, err)
}

func (r *UnimplementedSiteRender) RenderArticles(c *macaron.Context, err mir.Error) {
	r.RenderAny(c, nil, err)
}

func (r *UnimplementedSiteRender) RenderIndex(c *macaron.Context, err mir.Error) {
	r.RenderAny(c, nil, err)
}

func (r *UnimplementedSiteRender) mustEmbedUnimplementedSiteRender() {}

// UnimplementedSiteBinding can be embedded to have forward compatible implementations.
type UnimplementedSiteBinding struct {
	BindAny func(*macaron.Context, any) mir.Error
}

func (b *UnimplementedSiteBinding) BindLogin(c *macaron.Context) (*LoginReq, mir.Error) {
	obj := new(LoginReq)
	err := b.BindAny(c, obj)
	return obj, err
}

func (b *UnimplementedSiteBinding) BindPrevTweets(c *macaron.Context) (*TweetsReq, mir.Error) {
	obj := new(TweetsReq)
	err := b.BindAny(c, obj)
	return obj, err
}

func (b *UnimplementedSiteBinding) BindNextTweets(c *macaron.Context) (*TweetsReq, mir.Error) {
	obj := new(TweetsReq)
	err := b.BindAny(c, obj)
	return obj, err
}

func (b *UnimplementedSiteBinding) mustEmbedUnimplementedSiteBinding() {}
