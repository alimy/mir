// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir 5.2

package v2

import (
	"net/http"

	"github.com/alimy/mir/v5"
	"gopkg.in/macaron.v1"
)

type _binding_ interface {
	Bind(*macaron.Context) error
}

type _render_ interface {
	Render(*macaron.Context)
}

type _default_ interface {
	Bind(*macaron.Context, any) error
	Render(*macaron.Context, any, error)
}

type LoginReq struct {
	AgentInfo AgentInfo `json:"agent_info"`
	Name      string    `json:"name"`
	Passwd    string    `json:"passwd"`
}

type AgentInfo struct {
	Platform  string `json:"platform"`
	UserAgent string `json:"user_agent"`
}

type LoginResp struct {
	UserInfo
	ServerInfo ServerInfo `json:"server_info"`
	JwtToken   string     `json:"jwt_token"`
}

type ServerInfo struct {
	ApiVer string `json:"api_ver"`
}

type UserInfo struct {
	Name string `json:"name"`
}

type TweetsReq struct {
	Date string `json:"date"`
}

type TweetsResp struct {
	Tweets []Tweet `json:"tweets"`
	Total  uint32  `json:"total"`
}

type Tweet struct {
	Type    string `json:"type"`
	Content string `json:"content"`
}

type Site interface {
	_default_

	MultiAttachments(*macaron.Context)
	ManyResources(*macaron.Context)
	AnyStaticks(*macaron.Context)
	Statics(*macaron.Context)
	Assets(*macaron.Context, *LoginReq) error
	SimpleUpload(*macaron.Context, *LoginReq) (*LoginResp, error)
	FileUpload(*macaron.Context)
	ImageUpload(*macaron.Context)
	Logout() error
	Login(*LoginReq) (*LoginResp, error)
	PrevTweets(*TweetsReq) (*TweetsResp, error)
	NextTweets(*TweetsReq) (*TweetsResp, error)
	Articles() error
	Index() error

	mustEmbedUnimplementedSiteServant()
}

// RegisterSiteServant register Site servant to macaron
func RegisterSiteServant(m *macaron.Macaron, s Site) {
	m.Group("/v2", func() {
		{
			h := s.MultiAttachments
			m.Handle("GET", "/attachments/:name/", []macaron.Handler{h})
			m.Handle("HEAD", "/attachments/:name/", []macaron.Handler{h})
			m.Handle("OPTIONS", "/attachments/:name/", []macaron.Handler{h})
		}
		{
			h := s.ManyResources
			m.Handle("GET", "/resources/:name/", []macaron.Handler{h})
			m.Handle("HEAD", "/resources/:name/", []macaron.Handler{h})
			m.Handle("OPTIONS", "/resources/:name/", []macaron.Handler{h})
		}
		m.Any("/anystaticks/:name/", s.AnyStaticks)

		m.Handle("GET", "/statics/:name/", []macaron.Handler{s.Statics})

		m.Handle("GET", "/assets/:name/", []macaron.Handler{func(c *macaron.Context) {
			req := new(LoginReq)
			if err := s.Bind(c, req); err != nil {
				s.Render(c, nil, err)
				return
			}
			s.Render(c, nil, s.Assets(c, req))
		}})

		m.Handle("POST", "/upload/simple/:name/", []macaron.Handler{func(c *macaron.Context) {
			req := new(LoginReq)
			if err := s.Bind(c, req); err != nil {
				s.Render(c, nil, err)
				return
			}
			resp, err := s.SimpleUpload(c, req)
			s.Render(c, resp, err)
		}})

		m.Handle("POST", "/upload/file/:name/", []macaron.Handler{s.FileUpload})

		m.Handle("POST", "/upload/image/:name/", []macaron.Handler{s.ImageUpload})

		m.Handle("POST", "/user/logout/", []macaron.Handler{func(c *macaron.Context) {

			s.Render(c, nil, s.Logout())
		}})

		m.Handle("POST", "/user/login/", []macaron.Handler{func(c *macaron.Context) {
			req := new(LoginReq)
			if err := s.Bind(c, req); err != nil {
				s.Render(c, nil, err)
				return
			}
			resp, err := s.Login(req)
			s.Render(c, resp, err)
		}})

		{
			h := func(c *macaron.Context) {
				req := new(TweetsReq)
				if err := s.Bind(c, req); err != nil {
					s.Render(c, nil, err)
					return
				}
				resp, err := s.PrevTweets(req)
				s.Render(c, resp, err)
			}
			m.Handle("GET", "/tweets/prev", []macaron.Handler{h})
			m.Handle("HEAD", "/tweets/prev", []macaron.Handler{h})
			m.Handle("POST", "/tweets/prev", []macaron.Handler{h})
		}
		m.Any("/tweets/next", func(c *macaron.Context) {
			req := new(TweetsReq)
			if err := s.Bind(c, req); err != nil {
				s.Render(c, nil, err)
				return
			}
			resp, err := s.NextTweets(req)
			s.Render(c, resp, err)
		})

		m.Handle("GET", "/articles/:category/", []macaron.Handler{func(c *macaron.Context) {

			s.Render(c, nil, s.Articles())
		}})

		m.Handle("GET", "/index/", []macaron.Handler{func(c *macaron.Context) {

			s.Render(c, nil, s.Index())
		}})

	})
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) MultiAttachments(c *macaron.Context) {
	c.Resp.WriteHeader(http.StatusNotImplemented)
	c.Resp.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) ManyResources(c *macaron.Context) {
	c.Resp.WriteHeader(http.StatusNotImplemented)
	c.Resp.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) AnyStaticks(c *macaron.Context) {
	c.Resp.WriteHeader(http.StatusNotImplemented)
	c.Resp.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) Statics(c *macaron.Context) {
	c.Resp.WriteHeader(http.StatusNotImplemented)
	c.Resp.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) Assets(c *macaron.Context, req *LoginReq) error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) SimpleUpload(c *macaron.Context, req *LoginReq) (*LoginResp, error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) FileUpload(c *macaron.Context) {
	c.Resp.WriteHeader(http.StatusNotImplemented)
	c.Resp.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) ImageUpload(c *macaron.Context) {
	c.Resp.WriteHeader(http.StatusNotImplemented)
	c.Resp.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) Logout() error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Login(req *LoginReq) (*LoginResp, error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) PrevTweets(req *TweetsReq) (*TweetsResp, error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) NextTweets(req *TweetsReq) (*TweetsResp, error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Articles() error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}
