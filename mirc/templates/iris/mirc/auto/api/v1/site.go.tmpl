// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir 5.1.0

package v1

import (
	"net/http"

	"github.com/alimy/mir/v5"
	"github.com/kataras/iris/v12"
	"github.com/kataras/iris/v12/context"
)

type _binding_ interface {
	Bind(*context.Context) error
}

type _render_ interface {
	Render(*context.Context)
}

type _default_ interface {
	Bind(*context.Context, any) error
	Render(*context.Context, any, error)
}

type Site interface {
	_default_

	// Chain provide handlers chain for iris
	Chain() context.Handlers

	MultiAttachments(*context.Context)
	ManyResources(*context.Context)
	AnyStaticks(*context.Context)
	Statics(*context.Context)
	FileUpload(*context.Context)
	ImageUpload(*context.Context)
	Articles() error
	Index() error

	mustEmbedUnimplementedSiteServant()
}

type SiteChain interface {
	ChainMultiAttachments() context.Handlers
	ChainFileUpload() context.Handlers

	mustEmbedUnimplementedSiteChain()
}

// RegisterSiteServant register Site servant to iris
func RegisterSiteServant(app *iris.Application, s Site, m ...SiteChain) {
	var cc SiteChain
	if len(m) > 0 {
		cc = m[0]
	} else {
		cc = &UnimplementedSiteChain{}
	}
	router := app.Party("/v1")
	// use chain for party
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	{
		h := append(cc.ChainMultiAttachments(), s.MultiAttachments)
		router.Handle("GET", "/attachments/{name:string}/", h...)
		router.Handle("HEAD", "/attachments/{name:string}/", h...)
		router.Handle("OPTIONS", "/attachments/{name:string}/", h...)
	}
	{
		h := s.ManyResources
		router.Handle("GET", "/resources/{name:string}/", h)
		router.Handle("HEAD", "/resources/{name:string}/", h)
		router.Handle("OPTIONS", "/resources/{name:string}/", h)
	}
	router.Any("/anystaticks/{name:string}/", s.AnyStaticks)
	router.Handle("GET", "/statics/{name:string}/", s.Statics)
	router.Handle("POST", "/upload/file/{name:string}/", append(cc.ChainFileUpload(), s.FileUpload)...)
	router.Handle("POST", "/upload/image/{name:string}/", s.ImageUpload)
	{
		h := func(c *context.Context) {
			select {
			case <-c.Request().Context().Done():
				return
			default:
			}

			s.Render(c, nil, s.Articles())
		}
		router.Handle("GET", "/articles/{category:string}", h)
		router.Handle("HEAD", "/articles/{category:string}", h)
		router.Handle("POST", "/articles/{category:string}", h)
	}
	router.Handle("GET", "/index/", func(c *context.Context) {
		select {
		case <-c.Request().Context().Done():
			return
		default:
		}

		s.Render(c, nil, s.Index())
	})
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) Chain() context.Handlers {
	return nil
}

func (UnimplementedSiteServant) MultiAttachments(c *context.Context) {
	c.StatusCode(http.StatusNotImplemented)
	c.WriteString("method not implemented")
}

func (UnimplementedSiteServant) ManyResources(c *context.Context) {
	c.StatusCode(http.StatusNotImplemented)
	c.WriteString("method not implemented")
}

func (UnimplementedSiteServant) AnyStaticks(c *context.Context) {
	c.StatusCode(http.StatusNotImplemented)
	c.WriteString("method not implemented")
}

func (UnimplementedSiteServant) Statics(c *context.Context) {
	c.StatusCode(http.StatusNotImplemented)
	c.WriteString("method not implemented")
}

func (UnimplementedSiteServant) FileUpload(c *context.Context) {
	c.StatusCode(http.StatusNotImplemented)
	c.WriteString("method not implemented")
}

func (UnimplementedSiteServant) ImageUpload(c *context.Context) {
	c.StatusCode(http.StatusNotImplemented)
	c.WriteString("method not implemented")
}

func (UnimplementedSiteServant) Articles() error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}

// UnimplementedSiteChain can be embedded to have forward compatible implementations.
type UnimplementedSiteChain struct{}

func (b *UnimplementedSiteChain) ChainMultiAttachments() context.Handlers {
	return nil
}

func (b *UnimplementedSiteChain) ChainFileUpload() context.Handlers {
	return nil
}

func (b *UnimplementedSiteChain) mustEmbedUnimplementedSiteChain() {}
