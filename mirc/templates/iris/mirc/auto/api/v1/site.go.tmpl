// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.0.0

package v1

import (
	"net/http"

	"github.com/alimy/mir/v4"
	"github.com/kataras/iris/v12"
	"github.com/kataras/iris/v12/context"
)

type _binding_ interface {
	Bind(*context.Context) mir.Error
}

type _render_ interface {
	Render(*context.Context)
}

type _default_ interface {
	Bind(*context.Context, any) mir.Error
	Render(*context.Context, any, mir.Error)
}

type Site interface {
	_default_

	// Chain provide handlers chain for iris
	Chain() context.Handlers

	Articles() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

// RegisterSiteServant register Site servant to iris
func RegisterSiteServant(app *iris.Application, s Site) {
	router := app.Party("/v1")
	// use chain for party
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	{
		h := func(c *context.Context) {
			select {
			case <-c.Request().Context().Done():
				return
			default:
			}

			s.Render(c, nil, s.Articles())
		}
		router.Handle("POST", "/articles/{category:string}", h)
		router.Handle("GET", "/articles/{category:string}", h)
		router.Handle("HEAD", "/articles/{category:string}", h)
	}
	router.Handle("GET", "/index/", func(c *context.Context) {
		select {
		case <-c.Request().Context().Done():
			return
		default:
		}

		s.Render(c, nil, s.Index())
	})
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) Chain() context.Handlers {
	return nil
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}
