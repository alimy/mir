// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v3.1.1

package api

import (
	"net/http"

	"github.com/alimy/mir/v3"
	"github.com/kataras/iris/v12"
	"github.com/kataras/iris/v12/context"
)

type LogoutReq struct {
	AgentInfo AgentInfo `json:"agent_info"`
	Name      string    `json:"name"`
}

type AgentInfo struct {
	Platform  string `json:"platform"`
	UserAgent string `json:"user_agent"`
}

type LoginReq struct {
	AgentInfo AgentInfo `json:"agent_info"`
	Name      string    `json:"name"`
	Passwd    string    `json:"passwd"`
}

type LoginResp struct {
	UserInfo
	ServerInfo ServerInfo `json:"server_info"`
	JwtToken   string     `json:"jwt_token"`
}

type ServerInfo struct {
	ApiVer string `json:"api_ver"`
}

type UserInfo struct {
	Name string `json:"name"`
}

type TweetsReq struct {
	Date string `json:"date"`
}

type TweetsResp struct {
	Tweets []Tweet `json:"tweets"`
	Total  uint32  `json:"total"`
}

type Tweet struct {
	Type    string `json:"type"`
	Content string `json:"content"`
}

type Site interface {
	// Chain provide handlers chain for iris
	Chain() context.Handlers

	Logout(*LogoutReq) mir.Error
	Login(*LoginReq) (*LoginResp, mir.Error)
	PrevTweets(*TweetsReq) (*TweetsResp, mir.Error)
	NextTweets(*TweetsReq) (*TweetsResp, mir.Error)
	Articles() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

type SiteBinding interface {
	BindLogout(context.Context) (*LogoutReq, mir.Error)
	BindLogin(context.Context) (*LoginReq, mir.Error)
	BindPrevTweets(context.Context) (*TweetsReq, mir.Error)
	BindNextTweets(context.Context) (*TweetsReq, mir.Error)

	mustEmbedUnimplementedSiteBinding()
}

type SiteRender interface {
	RenderLogout(context.Context, mir.Error)
	RenderLogin(context.Context, *LoginResp, mir.Error)
	RenderPrevTweets(context.Context, *TweetsResp, mir.Error)
	RenderNextTweets(context.Context, *TweetsResp, mir.Error)
	RenderArticles(context.Context, mir.Error)
	RenderIndex(context.Context, mir.Error)

	mustEmbedUnimplementedSiteRender()
}

// RegisterSiteServant register Site servant to iris
func RegisterSiteServant(app *iris.Application, s Site, b SiteBinding, r SiteRender) {
	router := app
	// use chain for party
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	router.Handle("POST", "/user/logout/", func(c context.Context) {
		select {
		case <-c.Request().Context().Done():
			return
		default:
		}

		req, err := b.BindLogout(c)
		if err != nil {
			r.RenderLogout(c, err)
			return
		}
		r.RenderLogout(c, s.Logout(req))
	})

	router.Handle("POST", "/user/login/", func(c context.Context) {
		select {
		case <-c.Request().Context().Done():
			return
		default:
		}

		req, err := b.BindLogin(c)
		if err != nil {
			r.RenderLogin(c, nil, err)
			return
		}
		resp, err := s.Login(req)
		r.RenderLogin(c, resp, err)
	})

	{
		h := func(c context.Context) {
			select {
			case <-c.Request().Context().Done():
				return
			default:
			}

			req, err := b.BindPrevTweets(c)
			if err != nil {
				r.RenderPrevTweets(c, nil, err)
				return
			}
			resp, err := s.PrevTweets(req)
			r.RenderPrevTweets(c, resp, err)
		}
		router.Handle("HEAD", "/tweets/prev", h)
		router.Handle("GET", "/tweets/prev", h)
		router.Handle("POST", "/tweets/prev", h)
	}

	router.Any("/tweets/next", func(c context.Context) {
		select {
		case <-c.Request().Context().Done():
			return
		default:
		}

		req, err := b.BindNextTweets(c)
		if err != nil {
			r.RenderNextTweets(c, nil, err)
			return
		}
		resp, err := s.NextTweets(req)
		r.RenderNextTweets(c, resp, err)
	})

	router.Handle("GET", "/articles/{category:string}", func(c context.Context) {
		select {
		case <-c.Request().Context().Done():
			return
		default:
		}

		r.RenderArticles(c, s.Articles())
	})

	router.Handle("GET", "/index/", func(c context.Context) {
		select {
		case <-c.Request().Context().Done():
			return
		default:
		}

		r.RenderIndex(c, s.Index())
	})

}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct {
}

func (UnimplementedSiteServant) Chain() context.Handlers {
	return nil
}

func (UnimplementedSiteServant) Logout(req *LogoutReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Login(req *LoginReq) (*LoginResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) PrevTweets(req *TweetsReq) (*TweetsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) NextTweets(req *TweetsReq) (*TweetsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}

// UnimplementedSiteRender can be embedded to have forward compatible implementations.
type UnimplementedSiteRender struct {
	RenderAny func(context.Context, any, mir.Error)
}

func (r *UnimplementedSiteRender) RenderLogout(c context.Context, err mir.Error) {
	r.RenderAny(c, nil, err)
}

func (r *UnimplementedSiteRender) RenderLogin(c context.Context, data *LoginResp, err mir.Error) {
	r.RenderAny(c, data, err)
}

func (r *UnimplementedSiteRender) RenderPrevTweets(c context.Context, data *TweetsResp, err mir.Error) {
	r.RenderAny(c, data, err)
}

func (r *UnimplementedSiteRender) RenderNextTweets(c context.Context, data *TweetsResp, err mir.Error) {
	r.RenderAny(c, data, err)
}

func (r *UnimplementedSiteRender) RenderArticles(c context.Context, err mir.Error) {
	r.RenderAny(c, nil, err)
}

func (r *UnimplementedSiteRender) RenderIndex(c context.Context, err mir.Error) {
	r.RenderAny(c, nil, err)
}

func (r *UnimplementedSiteRender) mustEmbedUnimplementedSiteRender() {}

// UnimplementedSiteBinding can be embedded to have forward compatible implementations.
type UnimplementedSiteBinding struct {
	BindAny func(context.Context, any) mir.Error
}

func (b *UnimplementedSiteBinding) BindLogout(c context.Context) (*LogoutReq, mir.Error) {
	obj := new(LogoutReq)
	err := b.BindAny(c, obj)
	return obj, err
}

func (b *UnimplementedSiteBinding) BindLogin(c context.Context) (*LoginReq, mir.Error) {
	obj := new(LoginReq)
	err := b.BindAny(c, obj)
	return obj, err
}

func (b *UnimplementedSiteBinding) BindPrevTweets(c context.Context) (*TweetsReq, mir.Error) {
	obj := new(TweetsReq)
	err := b.BindAny(c, obj)
	return obj, err
}

func (b *UnimplementedSiteBinding) BindNextTweets(c context.Context) (*TweetsReq, mir.Error) {
	obj := new(TweetsReq)
	err := b.BindAny(c, obj)
	return obj, err
}

func (b *UnimplementedSiteBinding) mustEmbedUnimplementedSiteBinding() {}
