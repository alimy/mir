// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.0.0

package v1

import (
	"net/http"

	"github.com/alimy/mir/v4"
	"github.com/gorilla/mux"
)

type _binding_ interface {
	Bind(*http.Request) mir.Error
}

type _render_ interface {
	Render(http.ResponseWriter)
}

type _default_ interface {
	Bind(*http.Request, any) mir.Error
	Render(http.ResponseWriter, any, mir.Error)
}

type Site interface {
	_default_

	// Chain provide middlewares for mux
	Chain() []mux.MiddlewareFunc

	Articles() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

// RegisterSiteServant register Site servant to mux
func RegisterSiteServant(e *mux.Router, s Site) {
	router := e.PathPrefix("/v1").Subrouter()
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router

	router.HandleFunc("/articles/{category}/{id:[0-9]+}", func(rw http.ResponseWriter, hr *http.Request) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.Articles())
	}).Methods("POST", "GET", "HEAD").
		Host("{subdomain}.example.com").
		Queries("filter", "{filter}", "foo", "bar", "id", "{id:[0-9]+}")
	router.HandleFunc("/index/", func(rw http.ResponseWriter, hr *http.Request) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.Index())
	}).Methods("GET")
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) Chain() []mux.MiddlewareFunc {
	return nil
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}
