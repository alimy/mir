// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v5.0.0

package v1

import (
	"net/http"

	"github.com/alimy/mir/v5"
	"github.com/go-chi/chi/v5"
)

type _binding_ interface {
	Bind(*http.Request) mir.Error
}

type _render_ interface {
	Render(http.ResponseWriter)
}

type _default_ interface {
	Bind(*http.Request, any) mir.Error
	Render(http.ResponseWriter, any, mir.Error)
}

type Site interface {
	_default_

	// Chain provide middlewares for chi
	Chain() chi.Middlewares

	MultiAttachments(http.ResponseWriter, *http.Request)
	ManyResources(http.ResponseWriter, *http.Request)
	AnyStaticks(http.ResponseWriter, *http.Request)
	Statics(http.ResponseWriter, *http.Request)
	FileUpload(http.ResponseWriter, *http.Request)
	ImageUpload(http.ResponseWriter, *http.Request)
	Logout() mir.Error
	Articles() mir.Error
	AnyTopics() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

type SiteChain interface {
	ChainMultiAttachments() chi.Middlewares
	ChainFileUpload() chi.Middlewares
	ChainArticles() chi.Middlewares
	ChainAnyTopics() chi.Middlewares
	ChainIndex() chi.Middlewares

	mustEmbedUnimplementedSiteChain()
}

// RegisterSiteServant register Site servant to chi
func RegisterSiteServant(e chi.Router, s Site, m ...SiteChain) {
	var cc SiteChain
	if len(m) > 0 {
		cc = m[0]
	} else {
		cc = &UnimplementedSiteChain{}
	}
	router := chi.NewRouter()
	e.Mount("/v1", router)

	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	{
		h := s.MultiAttachments
		router := router.With(cc.ChainMultiAttachments()...)
		router.MethodFunc("OPTIONS", "/attachments/:name/", h)
		router.MethodFunc("HEAD", "/attachments/:name/", h)
		router.MethodFunc("GET", "/attachments/:name/", h)
	}
	{
		h := s.ManyResources

		router.MethodFunc("OPTIONS", "/resources/:name/", h)
		router.MethodFunc("HEAD", "/resources/:name/", h)
		router.MethodFunc("GET", "/resources/:name/", h)
	}
	router.HandleFunc("/anystaticks/:name/", s.AnyStaticks)
	router.MethodFunc("GET", "/statics/:name/", s.Statics)
	router.With(cc.ChainFileUpload()...).MethodFunc("POST", "/upload/file/:name/", s.FileUpload)
	router.MethodFunc("POST", "/upload/image/:name/", s.ImageUpload)
	router.MethodFunc("POST", "/user/logout/", func(rw http.ResponseWriter, hr *http.Request) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.Logout())
	})
	{
		h := func(rw http.ResponseWriter, hr *http.Request) {
			select {
			case <-hr.Context().Done():
				return
			default:
			}

			s.Render(rw, nil, s.Articles())
		}
		router := router.With(cc.ChainArticles()...)
		router.MethodFunc("POST", "/articles/:category/", h)
		router.MethodFunc("GET", "/articles/:category/", h)
		router.MethodFunc("HEAD", "/articles/:category/", h)
	}
	router.With(cc.ChainAnyTopics()...).HandleFunc("/topics/", func(rw http.ResponseWriter, hr *http.Request) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.AnyTopics())
	})
	router.With(cc.ChainIndex()...).MethodFunc("GET", "/index/", func(rw http.ResponseWriter, hr *http.Request) {
		select {
		case <-hr.Context().Done():
			return
		default:
		}

		s.Render(rw, nil, s.Index())
	})
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) Chain() chi.Middlewares {
	return nil
}

func (UnimplementedSiteServant) MultiAttachments(rw http.ResponseWriter, hr *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) ManyResources(rw http.ResponseWriter, hr *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) AnyStaticks(rw http.ResponseWriter, hr *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) Statics(rw http.ResponseWriter, hr *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) FileUpload(rw http.ResponseWriter, hr *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) ImageUpload(rw http.ResponseWriter, hr *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method not implemented"))
}

func (UnimplementedSiteServant) Logout() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) AnyTopics() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}

// UnimplementedSiteChain can be embedded to have forward compatible implementations.
type UnimplementedSiteChain struct{}

func (b *UnimplementedSiteChain) ChainMultiAttachments() chi.Middlewares {
	return nil
}

func (b *UnimplementedSiteChain) ChainFileUpload() chi.Middlewares {
	return nil
}

func (b *UnimplementedSiteChain) ChainArticles() chi.Middlewares {
	return nil
}

func (b *UnimplementedSiteChain) ChainAnyTopics() chi.Middlewares {
	return nil
}

func (b *UnimplementedSiteChain) ChainIndex() chi.Middlewares {
	return nil
}

func (b *UnimplementedSiteChain) mustEmbedUnimplementedSiteChain() {}
