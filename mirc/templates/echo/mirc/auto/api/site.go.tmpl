// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir 5.2

package api

import (
	"net/http"

	"github.com/alimy/mir/v5"
	"github.com/labstack/echo/v4"
)

type _binding_ interface {
	Bind(echo.Context) error
}

type _render_ interface {
	Render(echo.Context)
}

type _default_ interface {
	Bind(echo.Context, any) error
	Render(echo.Context, any, error)
}

type LoginReq struct {
	AgentInfo AgentInfo `json:"agent_info"`
	Name      string    `json:"name"`
	Passwd    string    `json:"passwd"`
}

type AgentInfo struct {
	Platform  string `json:"platform"`
	UserAgent string `json:"user_agent"`
}

type LoginResp struct {
	UserInfo
	ServerInfo ServerInfo `json:"server_info"`
	JwtToken   string     `json:"jwt_token"`
}

type ServerInfo struct {
	ApiVer string `json:"api_ver"`
}

type UserInfo struct {
	Name string `json:"name"`
}

type LogoutReq struct {
	AgentInfo AgentInfo `json:"agent_info"`
	Name      string    `json:"name"`
}

type TweetsReq struct {
	Date string `json:"date"`
}

type TweetsResp struct {
	Tweets []Tweet `json:"tweets"`
	Total  uint32  `json:"total"`
}

type Tweet struct {
	Type    string `json:"type"`
	Content string `json:"content"`
}

type Site interface {
	_default_

	// Chain provide handlers chain for echo
	Chain() []echo.MiddlewareFunc

	MultiAttachments(echo.Context) error
	ManyResources(echo.Context) error
	AnyStaticks(echo.Context) error
	Statics(echo.Context) error
	Assets(echo.Context, *LoginReq) error
	SimpleUpload(echo.Context, *LoginReq) (*LoginResp, error)
	FileUpload(echo.Context) error
	ImageUpload(echo.Context) error
	Logout(*LogoutReq) error
	Login(*LoginReq) (*LoginResp, error)
	PrevTweets(*TweetsReq) (*TweetsResp, error)
	NextTweets(*TweetsReq) (*TweetsResp, error)
	Articles() error
	Index() error

	mustEmbedUnimplementedSiteServant()
}

type SiteChain interface {
	ChainMultiAttachments() []echo.MiddlewareFunc
	ChainSimpleUpload() []echo.MiddlewareFunc
	ChainFileUpload() []echo.MiddlewareFunc

	mustEmbedUnimplementedSiteChain()
}

// RegisterSiteServant register Site servant to echo
func RegisterSiteServant(e *echo.Echo, s Site, m ...SiteChain) {
	var cc SiteChain
	if len(m) > 0 {
		cc = m[0]
	} else {
		cc = &UnimplementedSiteChain{}
	}
	router := e
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	{
		h := s.MultiAttachments
		router.Add("GET", "/attachments/:name/", h, cc.ChainMultiAttachments()...)
		router.Add("HEAD", "/attachments/:name/", h, cc.ChainMultiAttachments()...)
		router.Add("OPTIONS", "/attachments/:name/", h, cc.ChainMultiAttachments()...)
	}
	{
		h := s.ManyResources
		router.Add("GET", "/resources/:name/", h)
		router.Add("HEAD", "/resources/:name/", h)
		router.Add("OPTIONS", "/resources/:name/", h)
	}
	router.Any("/anystaticks/:name/", s.AnyStaticks)
	router.Add("GET", "/statics/:name/", s.Statics)
	router.Add("GET", "/assets/:name/", func(c echo.Context) error {
		ctx := c.Request().Context()
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}
		req := new(LoginReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return err
		}
		s.Render(c, nil, s.Assets(c, req))
		return nil
	})
	router.Add("POST", "/upload/simple/:name/", func(c echo.Context) error {
		ctx := c.Request().Context()
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}
		req := new(LoginReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return err
		}
		resp, err := s.SimpleUpload(c, req)
		s.Render(c, resp, err)
		return nil
	}, cc.ChainSimpleUpload()...)
	router.Add("POST", "/upload/file/:name/", s.FileUpload, cc.ChainFileUpload()...)
	router.Add("POST", "/upload/image/:name/", s.ImageUpload)
	router.Add("POST", "/user/logout/", func(c echo.Context) error {
		ctx := c.Request().Context()
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}
		req := new(LogoutReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return err
		}
		s.Render(c, nil, s.Logout(req))
		return nil
	})
	router.Add("POST", "/user/login/", func(c echo.Context) error {
		ctx := c.Request().Context()
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}
		req := new(LoginReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return err
		}
		resp, err := s.Login(req)
		s.Render(c, resp, err)
		return nil
	})
	{
		h := func(c echo.Context) error {
			ctx := c.Request().Context()
			select {
			case <-ctx.Done():
				return ctx.Err()
			default:
			}
			req := new(TweetsReq)
			if err := s.Bind(c, req); err != nil {
				s.Render(c, nil, err)
				return err
			}
			resp, err := s.PrevTweets(req)
			s.Render(c, resp, err)
			return nil
		}
		router.Add("GET", "/tweets/prev", h)
		router.Add("HEAD", "/tweets/prev", h)
		router.Add("POST", "/tweets/prev", h)
	}
	router.Any("/tweets/next", func(c echo.Context) error {
		ctx := c.Request().Context()
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}
		req := new(TweetsReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return err
		}
		resp, err := s.NextTweets(req)
		s.Render(c, resp, err)
		return nil
	})
	router.Add("GET", "/articles/:category/", func(c echo.Context) error {
		ctx := c.Request().Context()
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}

		s.Render(c, nil, s.Articles())
		return nil
	})
	router.Add("GET", "/index/", func(c echo.Context) error {
		ctx := c.Request().Context()
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}

		s.Render(c, nil, s.Index())
		return nil
	})
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) Chain() []echo.MiddlewareFunc {
	return nil
}

func (UnimplementedSiteServant) MultiAttachments(c echo.Context) error {
	return c.String(http.StatusNotImplemented, "method not implemented")
}

func (UnimplementedSiteServant) ManyResources(c echo.Context) error {
	return c.String(http.StatusNotImplemented, "method not implemented")
}

func (UnimplementedSiteServant) AnyStaticks(c echo.Context) error {
	return c.String(http.StatusNotImplemented, "method not implemented")
}

func (UnimplementedSiteServant) Statics(c echo.Context) error {
	return c.String(http.StatusNotImplemented, "method not implemented")
}

func (UnimplementedSiteServant) Assets(c echo.Context, req *LoginReq) error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) SimpleUpload(c echo.Context, req *LoginReq) (*LoginResp, error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) FileUpload(c echo.Context) error {
	return c.String(http.StatusNotImplemented, "method not implemented")
}

func (UnimplementedSiteServant) ImageUpload(c echo.Context) error {
	return c.String(http.StatusNotImplemented, "method not implemented")
}

func (UnimplementedSiteServant) Logout(req *LogoutReq) error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Login(req *LoginReq) (*LoginResp, error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) PrevTweets(req *TweetsReq) (*TweetsResp, error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) NextTweets(req *TweetsReq) (*TweetsResp, error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Articles() error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}

// UnimplementedSiteChain can be embedded to have forward compatible implementations.
type UnimplementedSiteChain struct{}

func (b *UnimplementedSiteChain) ChainMultiAttachments() []echo.MiddlewareFunc {
	return nil
}

func (b *UnimplementedSiteChain) ChainSimpleUpload() []echo.MiddlewareFunc {
	return nil
}

func (b *UnimplementedSiteChain) ChainFileUpload() []echo.MiddlewareFunc {
	return nil
}

func (b *UnimplementedSiteChain) mustEmbedUnimplementedSiteChain() {}
