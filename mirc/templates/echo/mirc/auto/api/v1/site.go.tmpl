// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v3.1.1

package v1

import (
	"net/http"

	"github.com/alimy/mir/v3"
	"github.com/labstack/echo/v4"
)

type Site interface {
	// Chain provide handlers chain for echo
	Chain() []echo.MiddlewareFunc

	Articles() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

type SiteRender interface {
	RenderArticles(echo.Context, mir.Error)
	RenderIndex(echo.Context, mir.Error)

	mustEmbedUnimplementedSiteRender()
}

// RegisterSiteServant register Site servant to echo
func RegisterSiteServant(e *echo.Echo, s Site, r SiteRender) {
	router := e.Group("v1")
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	{
		h := func(c echo.Context) error {
			ctx := c.Request().Context()
			select {
			case <-ctx.Done():
				return ctx.Err()
			default:
			}

			r.RenderArticles(c, s.Articles())
			return nil
		}
		router.Add("POST", "/articles/:category/", h)
		router.Add("GET", "/articles/:category/", h)
		router.Add("HEAD", "/articles/:category/", h)
	}

	router.Add("GET", "/index/", func(c echo.Context) error {
		ctx := c.Request().Context()
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}

		r.RenderIndex(c, s.Index())
		return nil
	})

}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct {
}

func (UnimplementedSiteServant) Chain() []echo.MiddlewareFunc {
	return nil
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}

// UnimplementedSiteRender can be embedded to have forward compatible implementations.
type UnimplementedSiteRender struct {
	RenderAny func(echo.Context, any, mir.Error)
}

func (r *UnimplementedSiteRender) RenderArticles(c echo.Context, err mir.Error) {
	r.RenderAny(c, nil, err)
}

func (r *UnimplementedSiteRender) RenderIndex(c echo.Context, err mir.Error) {
	r.RenderAny(c, nil, err)
}

func (r *UnimplementedSiteRender) mustEmbedUnimplementedSiteRender() {}
