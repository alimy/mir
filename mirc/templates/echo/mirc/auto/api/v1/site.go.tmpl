// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.1.0

package v1

import (
	"net/http"

	"github.com/alimy/mir/v4"
	"github.com/labstack/echo/v4"
)

type _binding_ interface {
	Bind(echo.Context) mir.Error
}

type _render_ interface {
	Render(echo.Context)
}

type _default_ interface {
	Bind(echo.Context, any) mir.Error
	Render(echo.Context, any, mir.Error)
}

type Site interface {
	_default_

	// Chain provide handlers chain for echo
	Chain() []echo.MiddlewareFunc

	MultiAttachments(echo.Context) error
	ManyResources(echo.Context) error
	AnyStaticks(echo.Context) error
	Statics(echo.Context) error
	FileUpload(echo.Context) error
	ImageUpload(echo.Context) error
	Articles() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

type SiteChain interface {
	ChainMultiAttachments() []echo.MiddlewareFunc
	ChainFileUpload() []echo.MiddlewareFunc

	mustEmbedUnimplementedSiteChain()
}

// RegisterSiteServant register Site servant to echo
func RegisterSiteServant(e *echo.Echo, s Site, m ...SiteChain) {
	var cc SiteChain
	if len(m) > 0 {
		cc = m[0]
	} else {
		cc = &UnimplementedSiteChain{}
	}
	router := e.Group("/v1")
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	{
		h := s.MultiAttachments
		router.Add("GET", "/attachments/:name/", h, cc.ChainMultiAttachments()...)
		router.Add("OPTIONS", "/attachments/:name/", h, cc.ChainMultiAttachments()...)
		router.Add("HEAD", "/attachments/:name/", h, cc.ChainMultiAttachments()...)
	}
	{
		h := s.ManyResources
		router.Add("HEAD", "/resources/:name/", h)
		router.Add("GET", "/resources/:name/", h)
		router.Add("OPTIONS", "/resources/:name/", h)
	}
	router.Any("/anystaticks/:name/", s.AnyStaticks)
	router.Add("GET", "/statics/:name/", s.Statics)
	router.Add("POST", "/upload/file/:name/", s.FileUpload, cc.ChainFileUpload()...)
	router.Add("POST", "/upload/image/:name/", s.ImageUpload)
	{
		h := func(c echo.Context) error {
			ctx := c.Request().Context()
			select {
			case <-ctx.Done():
				return ctx.Err()
			default:
			}

			s.Render(c, nil, s.Articles())
			return nil
		}
		router.Add("POST", "/articles/:category/", h)
		router.Add("GET", "/articles/:category/", h)
		router.Add("HEAD", "/articles/:category/", h)
	}
	router.Add("GET", "/index/", func(c echo.Context) error {
		ctx := c.Request().Context()
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}

		s.Render(c, nil, s.Index())
		return nil
	})
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) Chain() []echo.MiddlewareFunc {
	return nil
}

func (UnimplementedSiteServant) MultiAttachments(c echo.Context) error {
	return c.String(http.StatusNotImplemented, "method not implemented")
}

func (UnimplementedSiteServant) ManyResources(c echo.Context) error {
	return c.String(http.StatusNotImplemented, "method not implemented")
}

func (UnimplementedSiteServant) AnyStaticks(c echo.Context) error {
	return c.String(http.StatusNotImplemented, "method not implemented")
}

func (UnimplementedSiteServant) Statics(c echo.Context) error {
	return c.String(http.StatusNotImplemented, "method not implemented")
}

func (UnimplementedSiteServant) FileUpload(c echo.Context) error {
	return c.String(http.StatusNotImplemented, "method not implemented")
}

func (UnimplementedSiteServant) ImageUpload(c echo.Context) error {
	return c.String(http.StatusNotImplemented, "method not implemented")
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}

// UnimplementedSiteChain can be embedded to have forward compatible implementations.
type UnimplementedSiteChain struct{}

func (b *UnimplementedSiteChain) ChainMultiAttachments() []echo.MiddlewareFunc {
	return nil
}

func (b *UnimplementedSiteChain) ChainFileUpload() []echo.MiddlewareFunc {
	return nil
}

func (b *UnimplementedSiteChain) mustEmbedUnimplementedSiteChain() {}
