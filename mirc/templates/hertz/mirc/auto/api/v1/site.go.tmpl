// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v3.1.1

package v1

import (
	"context"
	"net/http"

	"github.com/alimy/mir/v3"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/route"
)

type Site interface {
	// Chain provide handlers chain for hertz
	Chain() []app.HandlerFunc

	Articles() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

type SiteRender interface {
	RenderArticles(*app.RequestContext, mir.Error)
	RenderIndex(*app.RequestContext, mir.Error)

	mustEmbedUnimplementedSiteRender()
}

// RegisterSiteServant register Site servant to hertz
func RegisterSiteServant(e *route.Engine, s Site, r SiteRender) {
	router := e.Group("v1")
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	{
		h := func(c context.Context, ctx *app.RequestContext) {
			select {
			case <-c.Done():
				return
			default:
			}

			r.RenderArticles(ctx, s.Articles())
		}
		router.Handle("POST", "/articles/:category/", h)
		router.Handle("GET", "/articles/:category/", h)
		router.Handle("HEAD", "/articles/:category/", h)
	}

	router.Handle("GET", "/index/", func(c context.Context, ctx *app.RequestContext) {
		select {
		case <-c.Done():
			return
		default:
		}

		r.RenderIndex(ctx, s.Index())
	})

}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct {
}

func (UnimplementedSiteServant) Chain() []app.HandlerFunc {
	return nil
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}

// UnimplementedSiteRender can be embedded to have forward compatible implementations.
type UnimplementedSiteRender struct {
	RenderAny func(*app.RequestContext, any, mir.Error)
}

func (r *UnimplementedSiteRender) RenderArticles(ctx *app.RequestContext, err mir.Error) {
	r.RenderAny(ctx, nil, err)
}

func (r *UnimplementedSiteRender) RenderIndex(ctx *app.RequestContext, err mir.Error) {
	r.RenderAny(ctx, nil, err)
}

func (r *UnimplementedSiteRender) mustEmbedUnimplementedSiteRender() {}
