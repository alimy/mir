// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v5.0.0

package v1

import (
	"context"
	"net/http"

	"github.com/alimy/mir/v5"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/route"
)

type Site interface {
	_default_

	// Chain provide handlers chain for hertz
	Chain() []app.HandlerFunc

	MultiAttachments(context.Context, *app.RequestContext)
	ManyResources(context.Context, *app.RequestContext)
	AnyStaticks(context.Context, *app.RequestContext)
	Statics(context.Context, *app.RequestContext)
	FileUpload(context.Context, *app.RequestContext)
	ImageUpload(context.Context, *app.RequestContext)
	Logout() mir.Error
	Articles() mir.Error
	AnyTopics() mir.Error
	Index() mir.Error

	mustEmbedUnimplementedSiteServant()
}

type SiteChain interface {
	ChainMultiAttachments() []app.HandlerFunc
	ChainFileUpload() []app.HandlerFunc
	ChainArticles() []app.HandlerFunc
	ChainAnyTopics() []app.HandlerFunc
	ChainIndex() []app.HandlerFunc

	mustEmbedUnimplementedSiteChain()
}

// RegisterSiteServant register Site servant to hertz
func RegisterSiteServant(e *route.Engine, s Site, m ...SiteChain) {
	var cc SiteChain
	if len(m) > 0 {
		cc = m[0]
	} else {
		cc = &UnimplementedSiteChain{}
	}
	router := e.Group("v1")
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	{
		h := append(cc.ChainMultiAttachments(), s.MultiAttachments)
		router.Handle("HEAD", "/attachments/:name/", h...)
		router.Handle("GET", "/attachments/:name/", h...)
		router.Handle("OPTIONS", "/attachments/:name/", h...)
	}
	{
		h := s.ManyResources
		router.Handle("OPTIONS", "/resources/:name/", h)
		router.Handle("HEAD", "/resources/:name/", h)
		router.Handle("GET", "/resources/:name/", h)
	}
	router.Any("/anystaticks/:name/", s.AnyStaticks)
	router.Handle("GET", "/statics/:name/", s.Statics)
	router.Handle("POST", "/upload/file/:name/", append(cc.ChainFileUpload(), s.FileUpload)...)
	router.Handle("POST", "/upload/image/:name/", s.ImageUpload)
	router.Handle("POST", "/user/logout/", func(c context.Context, ctx *app.RequestContext) {
		select {
		case <-c.Done():
			return
		default:
		}

		s.Render(c, ctx, nil, s.Logout())
	})
	{
		h := append(cc.ChainArticles(), func(c context.Context, ctx *app.RequestContext) {
			select {
			case <-c.Done():
				return
			default:
			}

			s.Render(c, ctx, nil, s.Articles())
		})
		router.Handle("GET", "/articles/:category/", h...)
		router.Handle("HEAD", "/articles/:category/", h...)
		router.Handle("POST", "/articles/:category/", h...)
	}
	router.Any("/topics/", append(cc.ChainAnyTopics(), func(c context.Context, ctx *app.RequestContext) {
		select {
		case <-c.Done():
			return
		default:
		}

		s.Render(c, ctx, nil, s.AnyTopics())
	})...)
	router.Handle("GET", "/index/", append(cc.ChainIndex(), func(c context.Context, ctx *app.RequestContext) {
		select {
		case <-c.Done():
			return
		default:
		}

		s.Render(c, ctx, nil, s.Index())
	})...)
}

// UnimplementedSiteServant can be embedded to have forward compatible implementations.
type UnimplementedSiteServant struct{}

func (UnimplementedSiteServant) Chain() []app.HandlerFunc {
	return nil
}

func (UnimplementedSiteServant) MultiAttachments(c context.Context, ctx *app.RequestContext) {
	ctx.String(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) ManyResources(c context.Context, ctx *app.RequestContext) {
	ctx.String(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) AnyStaticks(c context.Context, ctx *app.RequestContext) {
	ctx.String(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Statics(c context.Context, ctx *app.RequestContext) {
	ctx.String(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) FileUpload(c context.Context, ctx *app.RequestContext) {
	ctx.String(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) ImageUpload(c context.Context, ctx *app.RequestContext) {
	ctx.String(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Logout() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Articles() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) AnyTopics() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) Index() mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedSiteServant) mustEmbedUnimplementedSiteServant() {}

// UnimplementedSiteChain can be embedded to have forward compatible implementations.
type UnimplementedSiteChain struct {
}

func (b *UnimplementedSiteChain) ChainMultiAttachments() []app.HandlerFunc {
	return nil
}

func (b *UnimplementedSiteChain) ChainFileUpload() []app.HandlerFunc {
	return nil
}

func (b *UnimplementedSiteChain) ChainArticles() []app.HandlerFunc {
	return nil
}

func (b *UnimplementedSiteChain) ChainAnyTopics() []app.HandlerFunc {
	return nil
}

func (b *UnimplementedSiteChain) ChainIndex() []app.HandlerFunc {
	return nil
}

func (b *UnimplementedSiteChain) mustEmbedUnimplementedSiteChain() {}
