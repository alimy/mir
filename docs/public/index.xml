<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>介绍 on Mir 文档</title><link>https://alimy.github.io/mir/</link><description>Recent content in 介绍 on Mir 文档</description><generator>Hugo -- gohugo.io</generator><language>zh</language><atom:link href="https://alimy.github.io/mir/index.xml" rel="self" type="application/rss+xml"/><item><title>生成样板项目</title><link>https://alimy.github.io/mir/docs/tutorials/generate-template-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/docs/tutorials/generate-template-project/</guid><description>生成样板项目 # % go get github.com/alimy/mir/mirc/v5@latest % mirc new -h create template project Usage: mirc new [flags] Flags: -d, --dst string genereted destination target directory (default &amp;#34;.&amp;#34;) -h, --help help for new --mir string mir replace package name or place -p, --pkg string project&amp;#39;s package name (default &amp;#34;github.com/alimy/mir-example&amp;#34;) -s, --style string generated engine style eg: gin,chi,mux,hertz,echo,iris,fiber,fiber-v2,macaron,httprouter (default &amp;#34;gin&amp;#34;) % mirc new -d example % tree example example . |-- Makefile |-- README.</description></item><item><title>接口定义</title><link>https://alimy.github.io/mir/docs/tutorials/interface-define/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/docs/tutorials/interface-define/</guid><description>接口定义 # // file: mirc/routes/v1.go package v1 import ( . &amp;#34;github.com/alimy/mir/v5&amp;#34; ) type LoginReq struct { Name string `json:&amp;#34;name&amp;#34;` Passwd string `json:&amp;#34;passwd&amp;#34;` } type LoginResp struct { JwtToken string `json:&amp;#34;jwt_token&amp;#34;` } // User user interface info type User struct { Schema `mir:&amp;#34;v1,chain&amp;#34;` Login func(Post, LoginReq) LoginResp `mir:&amp;#34;/login/&amp;#34;` Logout func(Post) `mir:&amp;#34;/logout/&amp;#34;` } 如上示例，file:mirc/routes.go文件定义了User RESTful API接口，简要说明Mir的接口是如何定义：
一个独立的接口集合是定义在Golang的结构体struct中的，struct的名字将是接口集合的名字；定义后的接口需要通过mir.AddEntry(any)注册到Mir中以供服务接口代码的自动生成；比如这里的User就是一个RESTful API的集合，定义后的接口信息通过init()中的AddEntry(new(User))注册到Mir中，在Mir自动生成服务接口代码的时候将根据User中包含的信息自动生成服务接口代码； 接口定义的结构体struct中，每个Field都有特殊意义: Field名字表示这个服务接口自动生成代码的方法名字； Field中的struct tag mir 定义的是接口将注册的路由url；
如上示例的Login接口将生成如下代码: // RegisterUserServant register User servant to gin func RegisterUserServant(e *gin.</description></item><item><title>代码生成</title><link>https://alimy.github.io/mir/docs/tutorials/code-generate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/docs/tutorials/code-generate/</guid><description>代码生成 # // file: mirc/auto/api/v1/user.go // Code generated by go-mir. DO NOT EDIT. // versions: // - mir 5.2 package v1 import ( &amp;#34;net/http&amp;#34; &amp;#34;github.com/alimy/mir/v5&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) type _binding_ interface { Bind(*gin.Context) error } type _render_ interface { Render(*gin.Context) } type _default_ interface { Bind(*gin.Context, any) error Render(*gin.Context, any, error) } type LoginReq struct { Name string `json:&amp;#34;name&amp;#34;` Passwd string `json:&amp;#34;passwd&amp;#34;` } type LoginResp struct { JwtToken string `json:&amp;#34;jwt_token&amp;#34;` } type User interface { _default_ // Chain provide handlers chain for gin Chain() gin.</description></item><item><title>接口实现</title><link>https://alimy.github.io/mir/docs/tutorials/servant-implement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/docs/tutorials/servant-implement/</guid><description>接口实现 # // file: servants/user.go package servants import ( &amp;#34;net/http&amp;#34; &amp;#34;github.com/alimy/mir/v5&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; api &amp;#34;github.com/alimy/mir-example/v5/mirc/auto/api/v1&amp;#34; ) type baseSrv struct{} func (baseSrv) Bind(c *gin.Context, obj any) error { if err := c.ShouldBind(obj); err != nil { mir.NewError(http.StatusBadRequest, err) } return nil } func (baseSrv) Render(c *gin.Context, data any, err error) { if err == nil { c.JSON(http.StatusOK, data) } else if code, ok := mir.HttpStatusCode(err); ok { c.JSON(code, err.Error()) } else { c.</description></item><item><title>服务注册</title><link>https://alimy.github.io/mir/docs/tutorials/servant-register/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/docs/tutorials/servant-register/</guid><description> 服务注册 # // file: servants/servants.go package servants import ( api &amp;#34;github.com/alimy/mir-example/v4/mirc/auto/api/v1&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) // RegisterServants register all the servants to gin.Engine func RegisterServants(e *gin.Engine) { api.RegisterUserServant(e, newUserSrv()) // TODO: some other servant to register }</description></item><item><title>程序启动</title><link>https://alimy.github.io/mir/docs/tutorials/app-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/docs/tutorials/app-start/</guid><description> 程序启动: # // file: main.go package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/alimy/mir-example/v4/servants&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func main() { e := gin.Default() // register servants to gin servants.RegisterServants(e) // start servant service if err := e.Run(); err != nil { log.Fatal(err) } }</description></item><item><title/><link>https://alimy.github.io/mir/menu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/menu/</guid><description/></item><item><title>使用go-mir的项目</title><link>https://alimy.github.io/mir/docs/quck-start/projects-use-go-mir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/docs/quck-start/projects-use-go-mir/</guid><description> 使用go-mir的项目 # examples - 本项目自带的demo，主要演示了如何使用 Mir快速进行RESTful API的后端开发。 paopao-ce - 一个清新文艺的微社区，提供类似Twiter/微博的推文分享服务。</description></item></channel></rss>