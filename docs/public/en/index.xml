<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Mir Docs</title><link>https://alimy.github.io/mir/en/</link><description>Recent content in Introduction on Mir Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://alimy.github.io/mir/en/index.xml" rel="self" type="application/rss+xml"/><item><title>Generate Template Project</title><link>https://alimy.github.io/mir/en/docs/tutorials/generate-template-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/en/docs/tutorials/generate-template-project/</guid><description>Generate Template Project # % go install github.com/alimy/mir/mirc/v5@latest % mirc new -h create template project Usage: mirc new [flags] Flags: -d, --dst string genereted destination target directory (default &amp;#34;.&amp;#34;) -h, --help help for new --mir string mir replace package name or place -p, --pkg string project&amp;#39;s package name (default &amp;#34;github.com/alimy/mir-example&amp;#34;) -s, --style string generated engine style eg: gin,chi,mux,hertz,echo,iris,fiber,fiber-v2,macaron,httprouter (default &amp;#34;gin&amp;#34;) % mirc new -d example % tree example example .</description></item><item><title>Interface Define</title><link>https://alimy.github.io/mir/en/docs/tutorials/interface-define/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/en/docs/tutorials/interface-define/</guid><description> Interface Define # // file: mirc/routes.go package routes import ( . &amp;#34;github.com/alimy/mir/v5&amp;#34; ) type LoginReq struct { Name string `json:&amp;#34;name&amp;#34;` Passwd string `json:&amp;#34;passwd&amp;#34;` } type LoginResp struct { JwtToken string `json:&amp;#34;jwt_token&amp;#34;` } // User user interface info type User struct { Schema `mir:&amp;#34;v1,chain&amp;#34;` Login func(Post, LoginReq) LoginResp `mir:&amp;#34;/login/&amp;#34;` Logout func(Post) `mir:&amp;#34;/logout/&amp;#34;` }</description></item><item><title>Code Generate</title><link>https://alimy.github.io/mir/en/docs/tutorials/code-generate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/en/docs/tutorials/code-generate/</guid><description>Code Generate # // file: mirc/auto/api/v1/user.go // Code generated by go-mir. DO NOT EDIT. // versions: // - mir 5.0.1 package v1 import ( &amp;#34;net/http&amp;#34; &amp;#34;github.com/alimy/mir/v5&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) type _binding_ interface { Bind(*gin.Context) mir.Error } type _render_ interface { Render(*gin.Context) } type _default_ interface { Bind(*gin.Context, any) mir.Error Render(*gin.Context, any, mir.Error) } type LoginReq struct { Name string `json:&amp;#34;name&amp;#34;` Passwd string `json:&amp;#34;passwd&amp;#34;` } type LoginResp struct { JwtToken string `json:&amp;#34;jwt_token&amp;#34;` } type User interface { _default_ // Chain provide handlers chain for gin Chain() gin.</description></item><item><title>Servant Implement</title><link>https://alimy.github.io/mir/en/docs/tutorials/servant-implement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/en/docs/tutorials/servant-implement/</guid><description>Servant Implement: # // file: servants/user.go package servants import ( &amp;#34;net/http&amp;#34; &amp;#34;github.com/alimy/mir/v5&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; api &amp;#34;github.com/alimy/mir-example/v5/mirc/auto/api/v1&amp;#34; ) type baseSrv struct{} func (baseSrv) Bind(c *gin.Context, obj any) mir.Error { if err := c.ShouldBind(obj); err != nil { mir.NewError(http.StatusBadRequest, err) } return nil } func (baseSrv) Render(c *gin.Context, data any, err mir.Error) { if err == nil { c.JSON(http.StatusOK, data) } else { c.JSON(err.StatusCode(), err.Error()) } } type userSrv struct { baseSrv api.</description></item><item><title>Servant Register</title><link>https://alimy.github.io/mir/en/docs/tutorials/servant-register/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/en/docs/tutorials/servant-register/</guid><description> Servant Register: # // file: servants/servants.go package servants import ( api &amp;#34;github.com/alimy/mir-example/v4/mirc/auto/api/v1&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) // RegisterServants register all the servants to gin.Engine func RegisterServants(e *gin.Engine) { api.RegisterUserServant(e, newUserSrv()) // TODO: some other servant to register }</description></item><item><title>App Start</title><link>https://alimy.github.io/mir/en/docs/tutorials/app-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/en/docs/tutorials/app-start/</guid><description> App Start: # // file: main.go package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/alimy/mir-example/v4/servants&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func main() { e := gin.Default() // register servants to gin servants.RegisterServants(e) // start servant service if err := e.Run(); err != nil { log.Fatal(err) } }</description></item><item><title/><link>https://alimy.github.io/mir/en/menu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/en/menu/</guid><description/></item><item><title>Projects That Use go-mir</title><link>https://alimy.github.io/mir/en/docs/quick-start/projects-use-go-mir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alimy.github.io/mir/en/docs/quick-start/projects-use-go-mir/</guid><description> Projects That Use go-mir # examples - a demo example to describe how to use Mir to develop RESTful API backend service quickly. paopao-ce - A artistic &amp;ldquo;twitter like&amp;rdquo; community built on gin+zinc+vue+ts.</description></item></channel></rss>